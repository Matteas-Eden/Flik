ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	displaystring
  95 0001 000000   		.align	2
  96              		.type	displaystring, %object
  97              		.size	displaystring, 64
  98              	displaystring:
  99 0004 43533330 		.ascii	"CS301 2020\012\000"
  99      31203230 
  99      32300A00 
 100 0010 00000000 		.space	52
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.comm	line,64,4
 102              		.comm	entry,64,4
 103              		.comm	usbBuffer,64,4
 104              		.comm	system_state,32,4
 105              		.global	sensor_readings
 106              		.bss
 107 0012 0000     		.align	2
 108              		.type	sensor_readings, %object
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 3


 109              		.size	sensor_readings, 6
 110              	sensor_readings:
 111 0014 00000000 		.space	6
 111      0000
 112              		.global	adc_flag
 113 001a 0000     		.align	2
 114              		.type	adc_flag, %object
 115              		.size	adc_flag, 4
 116              	adc_flag:
 117 001c 00000000 		.space	4
 118              		.global	adc_readings
 119              		.align	2
 120              		.type	adc_readings, %object
 121              		.size	adc_readings, 24
 122              	adc_readings:
 123 0020 00000000 		.space	24
 123      00000000 
 123      00000000 
 123      00000000 
 123      00000000 
 124              		.global	sample_count
 125              		.align	2
 126              		.type	sample_count, %object
 127              		.size	sample_count, 4
 128              	sample_count:
 129 0038 00000000 		.space	4
 130              		.global	countM1
 131              		.align	2
 132              		.type	countM1, %object
 133              		.size	countM1, 4
 134              	countM1:
 135 003c 00000000 		.space	4
 136              		.global	countM2
 137              		.align	2
 138              		.type	countM2, %object
 139              		.size	countM2, 4
 140              	countM2:
 141 0040 00000000 		.space	4
 142              		.global	prevCountM1
 143              		.align	2
 144              		.type	prevCountM1, %object
 145              		.size	prevCountM1, 4
 146              	prevCountM1:
 147 0044 00000000 		.space	4
 148              		.global	prevCountM2
 149              		.align	2
 150              		.type	prevCountM2, %object
 151              		.size	prevCountM2, 4
 152              	prevCountM2:
 153 0048 00000000 		.space	4
 154              		.global	timer_flag
 155              		.align	2
 156              		.type	timer_flag, %object
 157              		.size	timer_flag, 4
 158              	timer_flag:
 159 004c 00000000 		.space	4
 160              		.section	.text.ENCODER_ISR,"ax",%progbits
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 4


 161              		.align	2
 162              		.global	ENCODER_ISR
 163              		.thumb
 164              		.thumb_func
 165              		.type	ENCODER_ISR, %function
 166              	ENCODER_ISR:
 167              	.LFB63:
 168              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  * Copyright Univ of Auckland, 2016
   3:.\main.c      ****  * All Rights Reserved
   4:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   5:.\main.c      ****  *
   6:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   7:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   8:.\main.c      ****  *
   9:.\main.c      ****  * ================== INCLUDE ======================
  10:.\main.c      **** */
  11:.\main.c      **** #include <stdio.h>
  12:.\main.c      **** #include <string.h>
  13:.\main.c      **** #include <stdlib.h>
  14:.\main.c      **** #include <project.h>
  15:.\main.c      **** 
  16:.\main.c      **** #include "defines.h"
  17:.\main.c      **** #include "vars.h"
  18:.\main.c      **** //* =================== MACROS =====================
  19:.\main.c      **** // SENSOR MAPPINGS
  20:.\main.c      **** #define TOP_LEFT_SENSOR 0
  21:.\main.c      **** #define TOP_MID_SENSOR 1
  22:.\main.c      **** #define TOP_RIGHT_SENSOR 2
  23:.\main.c      **** #define BOTTOM_LEFT_SENSOR 3
  24:.\main.c      **** #define BOTTOM_MID_SENSOR 4
  25:.\main.c      **** #define BOTTOM_RIGHT_SENSOR 5
  26:.\main.c      **** 
  27:.\main.c      **** // LIGHT SENSORS
  28:.\main.c      **** #define NUM_SENSORS 6
  29:.\main.c      **** #define LIGHT_LEVEL 300
  30:.\main.c      **** 
  31:.\main.c      **** // ADC stuff
  32:.\main.c      **** #define ADC_READINGS_SIZE 90
  33:.\main.c      **** 
  34:.\main.c      **** // Speed calculations
  35:.\main.c      **** #define LINEAR_DISTANCE_PER_REV 20.42035225
  36:.\main.c      **** #define TICKS_PER_REV 228
  37:.\main.c      **** #define TIMER_PERIOD 0.03
  38:.\main.c      **** 
  39:.\main.c      **** // Speed control
  40:.\main.c      **** #define DESIRED_COUNT 8
  41:.\main.c      **** #define TURN_SPEED 450
  42:.\main.c      **** 
  43:.\main.c      **** // Straight line test
  44:.\main.c      **** #define GRID_SIZE 12
  45:.\main.c      **** #define HALF_ROBOT_LENGTH 10
  46:.\main.c      **** 
  47:.\main.c      **** // 90 degree turn - TODO: Calculate true values
  48:.\main.c      **** #define TICKS_FOR_TURN 190
  49:.\main.c      **** #define TURN_PWM_VAL 225
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 5


  50:.\main.c      **** 
  51:.\main.c      **** // Line following macros - require calibration
  52:.\main.c      **** #define ADJUST_SPEED_LARGE 3
  53:.\main.c      **** #define ADJUST_SPEED_SMALL 1
  54:.\main.c      **** #define MAX_SPEED 9
  55:.\main.c      **** #define MIN_SPEED 4
  56:.\main.c      **** #define SLOW_DOWN_SPEED 1
  57:.\main.c      **** 
  58:.\main.c      **** // Debug flag - uncomment when debugging
  59:.\main.c      **** #define PUTTY
  60:.\main.c      **** #define PRINT_RATE 0x8000
  61:.\main.c      **** //* ================= TPYE DEF =======================
  62:.\main.c      **** //typedef struct wheel_speed{
  63:.\main.c      **** //    float m1;
  64:.\main.c      **** //    float m2;
  65:.\main.c      **** //} speed;
  66:.\main.c      **** typedef enum robot_state{
  67:.\main.c      ****     CORRECT,
  68:.\main.c      ****     SLIGHTLY_RIGHT,
  69:.\main.c      ****     SLIGHTLY_LEFT,
  70:.\main.c      ****     MEDIUM_RIGHT,
  71:.\main.c      ****     MEDIUM_LEFT,
  72:.\main.c      ****     TURN_RIGHT,
  73:.\main.c      ****     TURN_LEFT,
  74:.\main.c      ****     SLOW,
  75:.\main.c      ****     PASS
  76:.\main.c      **** } robot_state;
  77:.\main.c      **** //* ================= FUNCTIONS =======================
  78:.\main.c      **** void usbPutString(char *s);
  79:.\main.c      **** int getMax(int * readings);
  80:.\main.c      **** 
  81:.\main.c      **** int32 getValForChannel(int16 n);
  82:.\main.c      **** void updateSensorValues();
  83:.\main.c      **** 
  84:.\main.c      **** //speed getSpeed();
  85:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2);
  86:.\main.c      **** void turnRight();
  87:.\main.c      **** void turnLeft();
  88:.\main.c      **** void sharpTurnRight();
  89:.\main.c      **** void sharpTurnLeft();
  90:.\main.c      **** void turnForDegrees(int degrees);
  91:.\main.c      **** int8 performTurn(int isLeft);
  92:.\main.c      **** 
  93:.\main.c      **** void goStraight(int desired_distance, int *right_speed_count, int *left_wheel_count);
  94:.\main.c      **** void changeRightWheelSpeed(int amount);
  95:.\main.c      **** void changeLeftWheelSpeed(int amount);
  96:.\main.c      **** void invertWheels();
  97:.\main.c      **** void setWheelDirection(int isLeftForward, int isRightForward);
  98:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel);
  99:.\main.c      **** //* ================= GLOBAL VARIABLES =======================
 100:.\main.c      **** // ADC
 101:.\main.c      **** int8 sensor_readings[NUM_SENSORS] = { 0 };
 102:.\main.c      **** volatile int adc_flag = FALSE;
 103:.\main.c      **** int adc_readings[NUM_SENSORS] = { 0 };
 104:.\main.c      **** int sample_count = 0;
 105:.\main.c      **** // Encoder
 106:.\main.c      **** volatile int countM1 = 0;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 6


 107:.\main.c      **** volatile int countM2 = 0;
 108:.\main.c      **** int prevCountM1 = 0;
 109:.\main.c      **** int prevCountM2 = 0;
 110:.\main.c      **** volatile int timer_flag = FALSE;
 111:.\main.c      **** //* ================== ISR ======================
 112:.\main.c      **** CY_ISR(ENCODER_ISR) {
 169              		.loc 1 112 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 1, uses_anonymous_args = 0
 173 0000 80B5     		push	{r7, lr}
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 177 0002 00AF     		add	r7, sp, #0
 178              		.cfi_def_cfa_register 7
 113:.\main.c      ****     countM1 = QuadDec_M1_GetCounter();
 179              		.loc 1 113 0
 180 0004 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 181 0008 0346     		mov	r3, r0
 182 000a 1A46     		mov	r2, r3
 183 000c 054B     		ldr	r3, .L2
 184 000e 1A60     		str	r2, [r3]
 114:.\main.c      ****     countM2 = QuadDec_M2_GetCounter();
 185              		.loc 1 114 0
 186 0010 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 187 0014 0346     		mov	r3, r0
 188 0016 1A46     		mov	r2, r3
 189 0018 034B     		ldr	r3, .L2+4
 190 001a 1A60     		str	r2, [r3]
 115:.\main.c      ****     timer_flag = TRUE;
 191              		.loc 1 115 0
 192 001c 034B     		ldr	r3, .L2+8
 193 001e 0122     		movs	r2, #1
 194 0020 1A60     		str	r2, [r3]
 116:.\main.c      **** }
 195              		.loc 1 116 0
 196 0022 80BD     		pop	{r7, pc}
 197              	.L3:
 198              		.align	2
 199              	.L2:
 200 0024 00000000 		.word	countM1
 201 0028 00000000 		.word	countM2
 202 002c 00000000 		.word	timer_flag
 203              		.cfi_endproc
 204              	.LFE63:
 205              		.size	ENCODER_ISR, .-ENCODER_ISR
 206              		.section	.text.ADC_ISR,"ax",%progbits
 207              		.align	2
 208              		.global	ADC_ISR
 209              		.thumb
 210              		.thumb_func
 211              		.type	ADC_ISR, %function
 212              	ADC_ISR:
 213              	.LFB64:
 117:.\main.c      **** 
 118:.\main.c      **** /* ### Retrieve and Store Measurements ### */
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 7


 119:.\main.c      **** CY_ISR(ADC_ISR) {
 214              		.loc 1 119 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219 0000 80B4     		push	{r7}
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 7, -4
 222 0002 00AF     		add	r7, sp, #0
 223              		.cfi_def_cfa_register 7
 120:.\main.c      ****     adc_flag = TRUE;
 224              		.loc 1 120 0
 225 0004 034B     		ldr	r3, .L5
 226 0006 0122     		movs	r2, #1
 227 0008 1A60     		str	r2, [r3]
 121:.\main.c      **** }
 228              		.loc 1 121 0
 229 000a BD46     		mov	sp, r7
 230              		.cfi_def_cfa_register 13
 231              		@ sp needed
 232 000c 5DF8047B 		ldr	r7, [sp], #4
 233              		.cfi_restore 7
 234              		.cfi_def_cfa_offset 0
 235 0010 7047     		bx	lr
 236              	.L6:
 237 0012 00BF     		.align	2
 238              	.L5:
 239 0014 00000000 		.word	adc_flag
 240              		.cfi_endproc
 241              	.LFE64:
 242              		.size	ADC_ISR, .-ADC_ISR
 243              		.section	.rodata
 244              		.align	2
 245              	.LC0:
 246 0000 53686172 		.ascii	"Sharp turn right\000"
 246      70207475 
 246      726E2072 
 246      69676874 
 246      00
 247 0011 000000   		.align	2
 248              	.LC1:
 249 0014 53686172 		.ascii	"Sharp turn left\000"
 249      70207475 
 249      726E206C 
 249      65667400 
 250              		.align	2
 251              	.LC2:
 252 0024 53747261 		.ascii	"Straight\000"
 252      69676874 
 252      00
 253              		.section	.text.main,"ax",%progbits
 254              		.align	2
 255              		.global	main
 256              		.thumb
 257              		.thumb_func
 258              		.type	main, %function
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 8


 259              	main:
 260              	.LFB65:
 122:.\main.c      **** 
 123:.\main.c      **** /** ## Notes
 124:.\main.c      ****     
 125:.\main.c      ****     Ratio of linear distance to quad decoder ticks
 126:.\main.c      ****     One revolution gives a linear distance (in cm)
 127:.\main.c      ****     Each revolution is 57 ticks (228 for 4x mode)
 128:.\main.c      ****     Centimetres per tick = linear distance / countM(1|2)
 129:.\main.c      ****     
 130:.\main.c      ****     Decoder use a 4x count, so each revolution gives 4 counts
 131:.\main.c      ****     Sampling rate is determined by our 100ms timer (might be a little slow)
 132:.\main.c      ****     
 133:.\main.c      ****     ## Algorithm Control Flow
 134:.\main.c      ****     - Get ADC value for each channel
 135:.\main.c      ****     - Get decoder val for M1 & M2
 136:.\main.c      ****     - Use these values to drive the movement of the robot
 137:.\main.c      ****     
 138:.\main.c      **** */
 139:.\main.c      **** 
 140:.\main.c      **** int main()
 141:.\main.c      **** {
 261              		.loc 1 141 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 32
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 80B5     		push	{r7, lr}
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 7, -8
 268              		.cfi_offset 14, -4
 269 0002 88B0     		sub	sp, sp, #32
 270              		.cfi_def_cfa_offset 40
 271 0004 00AF     		add	r7, sp, #0
 272              		.cfi_def_cfa_register 7
 142:.\main.c      ****     // delay
 143:.\main.c      ****     CyDelay(2000);
 273              		.loc 1 143 0
 274 0006 4FF4FA60 		mov	r0, #2000
 275 000a FFF7FEFF 		bl	CyDelay
 144:.\main.c      ****     
 145:.\main.c      ****     // --------------------------------
 146:.\main.c      ****     // ----- INITIALIZATIONS ----------
 147:.\main.c      ****     // ========================================
 148:.\main.c      ****     CYGlobalIntEnable;
 276              		.loc 1 148 0
 277              	@ 148 ".\main.c" 1
 278 000e 62B6     		CPSIE   i
 279              	@ 0 "" 2
 149:.\main.c      ****     
 150:.\main.c      ****     // PWMs
 151:.\main.c      ****     PWM_1_Start();
 280              		.loc 1 151 0
 281              		.thumb
 282 0010 FFF7FEFF 		bl	PWM_1_Start
 152:.\main.c      ****     PWM_2_Start();
 283              		.loc 1 152 0
 284 0014 FFF7FEFF 		bl	PWM_2_Start
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 9


 153:.\main.c      ****     
 154:.\main.c      ****     // Timer for encoder
 155:.\main.c      ****     Timer_TS_Start();
 285              		.loc 1 155 0
 286 0018 FFF7FEFF 		bl	Timer_TS_Start
 156:.\main.c      ****     isr_TS_Start(); // Timer interrupts need to be started independently
 287              		.loc 1 156 0
 288 001c FFF7FEFF 		bl	isr_TS_Start
 157:.\main.c      ****     isr_TS_StartEx(ENCODER_ISR);
 289              		.loc 1 157 0
 290 0020 3F48     		ldr	r0, .L13
 291 0022 FFF7FEFF 		bl	isr_TS_StartEx
 158:.\main.c      ****     
 159:.\main.c      ****     // Quad Decoders
 160:.\main.c      ****     QuadDec_M1_Start();
 292              		.loc 1 160 0
 293 0026 FFF7FEFF 		bl	QuadDec_M1_Start
 161:.\main.c      ****     QuadDec_M2_Start();
 294              		.loc 1 161 0
 295 002a FFF7FEFF 		bl	QuadDec_M2_Start
 162:.\main.c      ****     
 163:.\main.c      ****     // ADC
 164:.\main.c      ****     ADC_Start(); // Start ADC
 296              		.loc 1 164 0
 297 002e FFF7FEFF 		bl	ADC_Start
 165:.\main.c      ****     ADC_IRQ_Enable(); // Enable ADC interrupts
 298              		.loc 1 165 0
 299 0032 FFF7FEFF 		bl	ADC_IRQ_Enable
 166:.\main.c      ****     ADC_StartConvert(); // Start conversions
 300              		.loc 1 166 0
 301 0036 FFF7FEFF 		bl	ADC_StartConvert
 167:.\main.c      ****     isr_eoc_StartEx(ADC_ISR); // link interrupt for ADC
 302              		.loc 1 167 0
 303 003a 3A48     		ldr	r0, .L13+4
 304 003c FFF7FEFF 		bl	isr_eoc_StartEx
 168:.\main.c      **** 
 169:.\main.c      ****     // ---------- USB SETUP ------------    
 170:.\main.c      ****     #ifdef USE_USB    
 171:.\main.c      ****         USBUART_Start(0, USBUART_5V_OPERATION);
 305              		.loc 1 171 0
 306 0040 0020     		movs	r0, #0
 307 0042 0121     		movs	r1, #1
 308 0044 FFF7FEFF 		bl	USBUART_Start
 172:.\main.c      ****     #endif            
 173:.\main.c      ****     
 174:.\main.c      ****     // To make sure wheels rotate in the same direction i.e. forward
 175:.\main.c      ****     INV2_Write(1);
 309              		.loc 1 175 0
 310 0048 0120     		movs	r0, #1
 311 004a FFF7FEFF 		bl	INV2_Write
 176:.\main.c      ****     
 177:.\main.c      ****     // Storing count values
 178:.\main.c      ****     int right_wheel_count = DESIRED_COUNT;
 312              		.loc 1 178 0
 313 004e 0823     		movs	r3, #8
 314 0050 FB60     		str	r3, [r7, #12]
 179:.\main.c      ****     int left_wheel_count = DESIRED_COUNT;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 10


 315              		.loc 1 179 0
 316 0052 0823     		movs	r3, #8
 317 0054 BB60     		str	r3, [r7, #8]
 180:.\main.c      ****     int polling_count = 0;
 318              		.loc 1 180 0
 319 0056 0023     		movs	r3, #0
 320 0058 BB61     		str	r3, [r7, #24]
 181:.\main.c      ****     
 182:.\main.c      ****     robot_state state;
 183:.\main.c      ****     robot_state prev_state = CORRECT;
 321              		.loc 1 183 0
 322 005a 0023     		movs	r3, #0
 323 005c FB75     		strb	r3, [r7, #23]
 184:.\main.c      ****     
 185:.\main.c      ****     //char directions[8] = {'4', 'L', '4', 'R', '2', 'R'};
 186:.\main.c      ****     char directions[8] = {'4', 'R', '2'};
 324              		.loc 1 186 0
 325 005e 0023     		movs	r3, #0
 326 0060 3B60     		str	r3, [r7]
 327 0062 0023     		movs	r3, #0
 328 0064 7B60     		str	r3, [r7, #4]
 329 0066 3423     		movs	r3, #52
 330 0068 3B70     		strb	r3, [r7]
 331 006a 5223     		movs	r3, #82
 332 006c 7B70     		strb	r3, [r7, #1]
 333 006e 3223     		movs	r3, #50
 334 0070 BB70     		strb	r3, [r7, #2]
 187:.\main.c      ****     int direction_index = 0;
 335              		.loc 1 187 0
 336 0072 0023     		movs	r3, #0
 337 0074 FB61     		str	r3, [r7, #28]
 188:.\main.c      ****     
 189:.\main.c      ****     while (directions[direction_index] != 0) {
 338              		.loc 1 189 0
 339 0076 3FE0     		b	.L8
 340              	.L12:
 190:.\main.c      ****         if (directions[direction_index] == 'R') {
 341              		.loc 1 190 0
 342 0078 3A46     		mov	r2, r7
 343 007a FB69     		ldr	r3, [r7, #28]
 344 007c 1344     		add	r3, r3, r2
 345 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 346 0080 522B     		cmp	r3, #82
 347 0082 0BD1     		bne	.L9
 191:.\main.c      ****             usbPutString("Sharp turn right");
 348              		.loc 1 191 0
 349 0084 2848     		ldr	r0, .L13+8
 350 0086 FFF7FEFF 		bl	usbPutString
 192:.\main.c      ****             sharpTurnRight(&right_wheel_count, &left_wheel_count);
 351              		.loc 1 192 0
 352 008a 07F10C02 		add	r2, r7, #12
 353 008e 07F10803 		add	r3, r7, #8
 354 0092 1046     		mov	r0, r2
 355 0094 1946     		mov	r1, r3
 356 0096 FFF7FEFF 		bl	sharpTurnRight
 357 009a 2AE0     		b	.L10
 358              	.L9:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 11


 193:.\main.c      ****         } else if (directions[direction_index] == 'L') {
 359              		.loc 1 193 0
 360 009c 3A46     		mov	r2, r7
 361 009e FB69     		ldr	r3, [r7, #28]
 362 00a0 1344     		add	r3, r3, r2
 363 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364 00a4 4C2B     		cmp	r3, #76
 365 00a6 0BD1     		bne	.L11
 194:.\main.c      ****             usbPutString("Sharp turn left");
 366              		.loc 1 194 0
 367 00a8 2048     		ldr	r0, .L13+12
 368 00aa FFF7FEFF 		bl	usbPutString
 195:.\main.c      ****             sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 369              		.loc 1 195 0
 370 00ae 07F10C02 		add	r2, r7, #12
 371 00b2 07F10803 		add	r3, r7, #8
 372 00b6 1046     		mov	r0, r2
 373 00b8 1946     		mov	r1, r3
 374 00ba FFF7FEFF 		bl	sharpTurnLeft
 375 00be 18E0     		b	.L10
 376              	.L11:
 377              	.LBB2:
 196:.\main.c      ****         } else {
 197:.\main.c      ****             usbPutString("Straight");
 378              		.loc 1 197 0
 379 00c0 1B48     		ldr	r0, .L13+16
 380 00c2 FFF7FEFF 		bl	usbPutString
 198:.\main.c      ****             int num_coords = directions[direction_index] - '0';
 381              		.loc 1 198 0
 382 00c6 3A46     		mov	r2, r7
 383 00c8 FB69     		ldr	r3, [r7, #28]
 384 00ca 1344     		add	r3, r3, r2
 385 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 386 00ce 303B     		subs	r3, r3, #48
 387 00d0 3B61     		str	r3, [r7, #16]
 199:.\main.c      ****             goStraight(GRID_SIZE * num_coords - HALF_ROBOT_LENGTH, &right_wheel_count, &left_wheel_
 388              		.loc 1 199 0
 389 00d2 3A69     		ldr	r2, [r7, #16]
 390 00d4 1346     		mov	r3, r2
 391 00d6 5B00     		lsls	r3, r3, #1
 392 00d8 1344     		add	r3, r3, r2
 393 00da 9B00     		lsls	r3, r3, #2
 394 00dc A3F10A01 		sub	r1, r3, #10
 395 00e0 07F10C02 		add	r2, r7, #12
 396 00e4 07F10803 		add	r3, r7, #8
 397 00e8 0846     		mov	r0, r1
 398 00ea 1146     		mov	r1, r2
 399 00ec 1A46     		mov	r2, r3
 400 00ee FFF7FEFF 		bl	goStraight
 401              	.L10:
 402              	.LBE2:
 200:.\main.c      ****         }
 201:.\main.c      ****         
 202:.\main.c      **** //        int num_coords;
 203:.\main.c      **** //            
 204:.\main.c      **** //        switch(directions[direction_index]) {
 205:.\main.c      **** //            case 'R':
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 12


 206:.\main.c      **** //                sharpTurnRight(&right_wheel_count, &left_wheel_count);
 207:.\main.c      **** //                usbPutString("Sharp turn right");
 208:.\main.c      **** //                break;
 209:.\main.c      **** //            case 'L':
 210:.\main.c      **** //                sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 211:.\main.c      **** //                usbPutString("Sharp turn left");
 212:.\main.c      **** //                break;
 213:.\main.c      **** //            default: 
 214:.\main.c      **** //                usbPutString("Straight");
 215:.\main.c      **** //                num_coords = directions[direction_index] - '0';
 216:.\main.c      **** //                goStraight(GRID_SIZE * num_coords - DESIRED_COUNT, &right_wheel_count, &left_whee
 217:.\main.c      **** //                break;
 218:.\main.c      **** //        }
 219:.\main.c      ****         direction_index++;
 403              		.loc 1 219 0
 404 00f2 FB69     		ldr	r3, [r7, #28]
 405 00f4 0133     		adds	r3, r3, #1
 406 00f6 FB61     		str	r3, [r7, #28]
 407              	.L8:
 189:.\main.c      ****         if (directions[direction_index] == 'R') {
 408              		.loc 1 189 0
 409 00f8 3A46     		mov	r2, r7
 410 00fa FB69     		ldr	r3, [r7, #28]
 411 00fc 1344     		add	r3, r3, r2
 412 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 413 0100 002B     		cmp	r3, #0
 414 0102 B9D1     		bne	.L12
 220:.\main.c      ****         
 221:.\main.c      **** //        PWM_1_WriteCompare(0);
 222:.\main.c      **** //        PWM_2_WriteCompare(0);
 223:.\main.c      **** //        // delay
 224:.\main.c      **** //        CyDelay(1000);
 225:.\main.c      **** //        PWM_1_WriteCompare(350);
 226:.\main.c      **** //        PWM_2_WriteCompare(350);
 227:.\main.c      ****     }
 228:.\main.c      ****     LED_Write(1);
 415              		.loc 1 228 0
 416 0104 0120     		movs	r0, #1
 417 0106 FFF7FEFF 		bl	LED_Write
 229:.\main.c      ****     
 230:.\main.c      ****     //goStraight(GRID_SIZE, &right_wheel_count, &left_wheel_count);
 231:.\main.c      ****     //sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 232:.\main.c      ****     
 233:.\main.c      ****     PWM_1_WriteCompare(0);
 418              		.loc 1 233 0
 419 010a 0020     		movs	r0, #0
 420 010c FFF7FEFF 		bl	PWM_1_WriteCompare
 234:.\main.c      ****     PWM_2_WriteCompare(0);
 421              		.loc 1 234 0
 422 0110 0020     		movs	r0, #0
 423 0112 FFF7FEFF 		bl	PWM_2_WriteCompare
 235:.\main.c      ****     
 236:.\main.c      **** //    while(1) { // Begin main control
 237:.\main.c      **** //        polling_count++;
 238:.\main.c      **** //        
 239:.\main.c      **** //        if (adc_flag) {
 240:.\main.c      **** //            updateSensorValues();
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 13


 241:.\main.c      **** //            adc_flag = FALSE;
 242:.\main.c      **** //        }
 243:.\main.c      **** //        
 244:.\main.c      **** //         // New count values from encoder are ready
 245:.\main.c      **** //        if (timer_flag){
 246:.\main.c      **** //            isr_TS_Disable();
 247:.\main.c      **** //            
 248:.\main.c      **** //            // Correct speed
 249:.\main.c      **** //            correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 250:.\main.c      **** //            correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 251:.\main.c      **** //            
 252:.\main.c      **** //            // Update previous values
 253:.\main.c      **** //            prevCountM1 = countM1;
 254:.\main.c      **** //            prevCountM2 = countM2;
 255:.\main.c      **** //            
 256:.\main.c      **** //            // Reset flag
 257:.\main.c      **** //            timer_flag = FALSE;
 258:.\main.c      **** //            
 259:.\main.c      **** //            isr_TS_Enable();
 260:.\main.c      **** //        }
 261:.\main.c      **** //        
 262:.\main.c      **** //       // follow a line algorithm
 263:.\main.c      **** //        if (sensor_readings[TOP_MID_SENSOR]) { // on line
 264:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 265:.\main.c      **** //                state = SLIGHTLY_RIGHT;
 266:.\main.c      **** //                right_wheel_count -= ADJUST_SPEED_SMALL;
 267:.\main.c      **** //                left_wheel_count += ADJUST_SPEED_SMALL;
 268:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { 
 269:.\main.c      **** //                state = SLIGHTLY_LEFT;
 270:.\main.c      **** //                right_wheel_count += ADJUST_SPEED_SMALL;
 271:.\main.c      **** //                left_wheel_count -= ADJUST_SPEED_SMALL;
 272:.\main.c      **** //            } else { // Correct speed
 273:.\main.c      **** //                state = CORRECT;
 274:.\main.c      **** //            }
 275:.\main.c      **** //        } else { // moved off
 276:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 277:.\main.c      **** //                state = MEDIUM_RIGHT;
 278:.\main.c      **** //                turnRight();
 279:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {/
 280:.\main.c      **** //                state = MEDIUM_LEFT;
 281:.\main.c      **** //				turnLeft();
 282:.\main.c      **** //            // for corners
 283:.\main.c      **** //            } else if (!sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {
 284:.\main.c      **** //                if (sensor_readings[BOTTOM_LEFT_SENSOR]) {
 285:.\main.c      **** //                    state = TURN_LEFT;
 286:.\main.c      **** //                    sharpTurnLeft();
 287:.\main.c      **** //                } else if (sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 288:.\main.c      **** //                    state = TURN_RIGHT;
 289:.\main.c      **** //                    sharpTurnRight();
 290:.\main.c      **** //                 // slow down in preperation for a sharp turn
 291:.\main.c      **** //                } else if (left_wheel_count > MIN_SPEED && right_wheel_count > MIN_SPEED) {
 292:.\main.c      **** //                    state = SLOW;
 293:.\main.c      **** //                    right_wheel_count -= SLOW_DOWN_SPEED;
 294:.\main.c      **** //                    left_wheel_count -= SLOW_DOWN_SPEED;
 295:.\main.c      **** //                } else {
 296:.\main.c      **** //                    state = PASS;
 297:.\main.c      **** //                }
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 14


 298:.\main.c      **** //            }
 299:.\main.c      **** //        }
 300:.\main.c      **** //        
 301:.\main.c      **** //        if (right_wheel_count > MAX_SPEED) {
 302:.\main.c      **** //            right_wheel_count = MAX_SPEED;
 303:.\main.c      **** //        }
 304:.\main.c      **** //        if (left_wheel_count > MAX_SPEED) {
 305:.\main.c      **** //            left_wheel_count = MAX_SPEED;
 306:.\main.c      **** //        }
 307:.\main.c      **** //        if (right_wheel_count < MIN_SPEED) {
 308:.\main.c      **** //            right_wheel_count = MIN_SPEED;
 309:.\main.c      **** //        }
 310:.\main.c      **** //        if (left_wheel_count < MIN_SPEED) {
 311:.\main.c      **** //            left_wheel_count = MIN_SPEED;
 312:.\main.c      **** //        }
 313:.\main.c      **** //        
 314:.\main.c      **** ////        if (polling_count == PRINT_RATE) {
 315:.\main.c      **** //        if (prev_state != state) {
 316:.\main.c      **** //            if (state == SLIGHTLY_LEFT) {
 317:.\main.c      **** //                usbPutString("SLIGHTLY_LEFT\r\n");
 318:.\main.c      **** //            } else if (state == SLIGHTLY_RIGHT) {
 319:.\main.c      **** //                usbPutString("SLIGHTLY_RIGHT\r\n");
 320:.\main.c      **** //            } else if (state == MEDIUM_LEFT) {
 321:.\main.c      **** //                usbPutString("MEDIUM_LEFT\r\n");
 322:.\main.c      **** //            } else if (state == MEDIUM_RIGHT) {
 323:.\main.c      **** //                usbPutString("MEDIUM_RIGHT\r\n");
 324:.\main.c      **** //            } else if (state == TURN_LEFT) {
 325:.\main.c      **** //                usbPutString("TURN_LEFT\r\n");
 326:.\main.c      **** //            } else if (state == TURN_RIGHT) {
 327:.\main.c      **** //                usbPutString("TURN_RIGHT\r\n");
 328:.\main.c      **** //            } else if (state == SLOW) {
 329:.\main.c      **** //                usbPutString("SLOW\r\n");
 330:.\main.c      **** //            } else if (state == PASS) {
 331:.\main.c      **** //                usbPutString("PASS\r\n");
 332:.\main.c      **** //            } else if (state == CORRECT) {
 333:.\main.c      **** //                usbPutString("CORRECT\r\n");
 334:.\main.c      **** //            }
 335:.\main.c      **** //            prev_state = state;
 336:.\main.c      **** //        }
 337:.\main.c      **** //                
 338:.\main.c      **** //                
 339:.\main.c      **** //        if (polling_count == PRINT_RATE) polling_count = 0;
 340:.\main.c      **** //    }
 341:.\main.c      **** }
 424              		.loc 1 341 0
 425 0116 1846     		mov	r0, r3
 426 0118 2037     		adds	r7, r7, #32
 427              		.cfi_def_cfa_offset 8
 428 011a BD46     		mov	sp, r7
 429              		.cfi_def_cfa_register 13
 430              		@ sp needed
 431 011c 80BD     		pop	{r7, pc}
 432              	.L14:
 433 011e 00BF     		.align	2
 434              	.L13:
 435 0120 00000000 		.word	ENCODER_ISR
 436 0124 00000000 		.word	ADC_ISR
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 15


 437 0128 00000000 		.word	.LC0
 438 012c 14000000 		.word	.LC1
 439 0130 24000000 		.word	.LC2
 440              		.cfi_endproc
 441              	.LFE65:
 442              		.size	main, .-main
 443              		.section	.rodata
 444 002d 000000   		.align	2
 445              	.LC3:
 446 0030 202D2064 		.ascii	" - desired  \000"
 446      65736972 
 446      65642020 
 446      00
 447 003d 000000   		.align	2
 448              	.LC4:
 449 0040 202D2064 		.ascii	" - distance \000"
 449      69737461 
 449      6E636520 
 449      00
 450              		.global	__aeabi_f2iz
 451              		.global	__aeabi_fadd
 452 004d 000000   		.align	2
 453              	.LC5:
 454 0050 202D2074 		.ascii	" - turn right\000"
 454      75726E20 
 454      72696768 
 454      7400
 455 005e 0000     		.align	2
 456              	.LC6:
 457 0060 202D2074 		.ascii	" - turn left\000"
 457      75726E20 
 457      6C656674 
 457      00
 458              		.global	__aeabi_i2f
 459              		.global	__aeabi_fcmpgt
 460              		.section	.text.goStraight,"ax",%progbits
 461              		.align	2
 462              		.global	goStraight
 463              		.thumb
 464              		.thumb_func
 465              		.type	goStraight, %function
 466              	goStraight:
 467              	.LFB66:
 342:.\main.c      **** 
 343:.\main.c      **** 
 344:.\main.c      **** /* Template code */
 345:.\main.c      **** /*
 346:.\main.c      ****     while(TRUE){
 347:.\main.c      ****         
 348:.\main.c      ****         // Update sensor values from ADC
 349:.\main.c      ****         if (adc_flag){
 350:.\main.c      ****             updateSensorValues();
 351:.\main.c      ****             adc_flag = FALSE;
 352:.\main.c      ****         }
 353:.\main.c      ****         // Update distance and speed of robot
 354:.\main.c      ****         if (timer_flag){
 355:.\main.c      ****             isr_TS_Disable();
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 16


 356:.\main.c      ****             
 357:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 358:.\main.c      ****             
 359:.\main.c      ****             // Correct speed
 360:.\main.c      ****             correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 361:.\main.c      ****             correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 362:.\main.c      ****             
 363:.\main.c      ****             // Update previous values
 364:.\main.c      ****             prevCountM1 = countM1;
 365:.\main.c      ****             prevCountM2 = countM2;
 366:.\main.c      ****             
 367:.\main.c      ****             // Reset flag
 368:.\main.c      ****             timer_flag = FALSE;
 369:.\main.c      ****             
 370:.\main.c      ****             isr_TS_Enable();
 371:.\main.c      ****         }
 372:.\main.c      **** 
 373:.\main.c      ****         // Execute next instruction in queue after reaching a certain distance
 374:.\main.c      ****         if (distance == NODE_DISTANCE){
 375:.\main.c      ****             // Execute the next instruction (uses function pointers)
 376:.\main.c      ****             instructions[instruction_count]();
 377:.\main.c      ****             instruction_count++;
 378:.\main.c      ****             distance = 0;
 379:.\main.c      ****         }
 380:.\main.c      ****     }
 381:.\main.c      **** */
 382:.\main.c      **** 
 383:.\main.c      **** void goStraight(int desired_distance, int *right_wheel_count, int *left_wheel_count) {
 468              		.loc 1 383 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 56
 471              		@ frame_needed = 1, uses_anonymous_args = 0
 472 0000 80B5     		push	{r7, lr}
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476 0002 8EB0     		sub	sp, sp, #56
 477              		.cfi_def_cfa_offset 64
 478 0004 00AF     		add	r7, sp, #0
 479              		.cfi_def_cfa_register 7
 480 0006 F860     		str	r0, [r7, #12]
 481 0008 B960     		str	r1, [r7, #8]
 482 000a 7A60     		str	r2, [r7, #4]
 384:.\main.c      ****     usbPutString(" - desired  ");
 483              		.loc 1 384 0
 484 000c 7348     		ldr	r0, .L28
 485 000e FFF7FEFF 		bl	usbPutString
 385:.\main.c      ****     char buf[32];
 386:.\main.c      ****     itoa(desired_distance, buf, 10);
 486              		.loc 1 386 0
 487 0012 07F11403 		add	r3, r7, #20
 488 0016 F868     		ldr	r0, [r7, #12]
 489 0018 1946     		mov	r1, r3
 490 001a 0A22     		movs	r2, #10
 491 001c FFF7FEFF 		bl	itoa
 387:.\main.c      ****     usbPutString(buf);
 492              		.loc 1 387 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 17


 493 0020 07F11403 		add	r3, r7, #20
 494 0024 1846     		mov	r0, r3
 495 0026 FFF7FEFF 		bl	usbPutString
 388:.\main.c      ****     
 389:.\main.c      ****     PWM_1_WriteCompare(350);
 496              		.loc 1 389 0
 497 002a 4FF4AF70 		mov	r0, #350
 498 002e FFF7FEFF 		bl	PWM_1_WriteCompare
 390:.\main.c      ****     PWM_2_WriteCompare(350);
 499              		.loc 1 390 0
 500 0032 4FF4AF70 		mov	r0, #350
 501 0036 FFF7FEFF 		bl	PWM_2_WriteCompare
 391:.\main.c      ****     *right_wheel_count = DESIRED_COUNT;
 502              		.loc 1 391 0
 503 003a BB68     		ldr	r3, [r7, #8]
 504 003c 0822     		movs	r2, #8
 505 003e 1A60     		str	r2, [r3]
 392:.\main.c      ****     *left_wheel_count = DESIRED_COUNT;
 506              		.loc 1 392 0
 507 0040 7B68     		ldr	r3, [r7, #4]
 508 0042 0822     		movs	r2, #8
 509 0044 1A60     		str	r2, [r3]
 393:.\main.c      ****     // Storing count values
 394:.\main.c      ****     
 395:.\main.c      ****     float distance = 0;
 510              		.loc 1 395 0
 511 0046 4FF00003 		mov	r3, #0
 512 004a 7B63     		str	r3, [r7, #52]	@ float
 396:.\main.c      ****     
 397:.\main.c      ****     usbPutString(" - distance ");
 513              		.loc 1 397 0
 514 004c 6448     		ldr	r0, .L28+4
 515 004e FFF7FEFF 		bl	usbPutString
 398:.\main.c      ****     itoa(distance, buf, 10);
 516              		.loc 1 398 0
 517 0052 786B     		ldr	r0, [r7, #52]	@ float
 518 0054 FFF7FEFF 		bl	__aeabi_f2iz
 519 0058 0246     		mov	r2, r0
 520 005a 07F11403 		add	r3, r7, #20
 521 005e 1046     		mov	r0, r2
 522 0060 1946     		mov	r1, r3
 523 0062 0A22     		movs	r2, #10
 524 0064 FFF7FEFF 		bl	itoa
 399:.\main.c      ****     usbPutString(buf);
 525              		.loc 1 399 0
 526 0068 07F11403 		add	r3, r7, #20
 527 006c 1846     		mov	r0, r3
 528 006e FFF7FEFF 		bl	usbPutString
 400:.\main.c      ****         
 401:.\main.c      ****     while (distance < desired_distance) {
 529              		.loc 1 401 0
 530 0072 A3E0     		b	.L16
 531              	.L27:
 402:.\main.c      ****         if (adc_flag) {
 532              		.loc 1 402 0
 533 0074 5B4B     		ldr	r3, .L28+8
 534 0076 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 18


 535 0078 002B     		cmp	r3, #0
 536 007a 04D0     		beq	.L17
 403:.\main.c      ****             updateSensorValues();
 537              		.loc 1 403 0
 538 007c FFF7FEFF 		bl	updateSensorValues
 404:.\main.c      ****             adc_flag = FALSE;
 539              		.loc 1 404 0
 540 0080 584B     		ldr	r3, .L28+8
 541 0082 0022     		movs	r2, #0
 542 0084 1A60     		str	r2, [r3]
 543              	.L17:
 405:.\main.c      ****         }
 406:.\main.c      ****         
 407:.\main.c      ****          // New count values from encoder are ready
 408:.\main.c      ****         if (timer_flag){
 544              		.loc 1 408 0
 545 0086 584B     		ldr	r3, .L28+12
 546 0088 1B68     		ldr	r3, [r3]
 547 008a 002B     		cmp	r3, #0
 548 008c 35D0     		beq	.L18
 409:.\main.c      ****             isr_TS_Disable();
 549              		.loc 1 409 0
 550 008e FFF7FEFF 		bl	isr_TS_Disable
 410:.\main.c      ****             
 411:.\main.c      ****             // update distance
 412:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 551              		.loc 1 412 0
 552 0092 564B     		ldr	r3, .L28+16
 553 0094 1A68     		ldr	r2, [r3]
 554 0096 564B     		ldr	r3, .L28+20
 555 0098 1B68     		ldr	r3, [r3]
 556 009a 1046     		mov	r0, r2
 557 009c 1946     		mov	r1, r3
 558 009e FFF7FEFF 		bl	getDistance
 559 00a2 0346     		mov	r3, r0
 560 00a4 786B     		ldr	r0, [r7, #52]	@ float
 561 00a6 1946     		mov	r1, r3
 562 00a8 FFF7FEFF 		bl	__aeabi_fadd
 563 00ac 0346     		mov	r3, r0
 564 00ae 7B63     		str	r3, [r7, #52]	@ float
 413:.\main.c      ****             
 414:.\main.c      ****             // Correct speed
 415:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 565              		.loc 1 415 0
 566 00b0 4E4B     		ldr	r3, .L28+16
 567 00b2 1968     		ldr	r1, [r3]
 568 00b4 4F4B     		ldr	r3, .L28+24
 569 00b6 1A68     		ldr	r2, [r3]
 570 00b8 7B68     		ldr	r3, [r7, #4]
 571 00ba 1B68     		ldr	r3, [r3]
 572 00bc 0846     		mov	r0, r1
 573 00be 1146     		mov	r1, r2
 574 00c0 1A46     		mov	r2, r3
 575 00c2 0123     		movs	r3, #1
 576 00c4 FFF7FEFF 		bl	correctSpeed
 416:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 577              		.loc 1 416 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 19


 578 00c8 494B     		ldr	r3, .L28+20
 579 00ca 1968     		ldr	r1, [r3]
 580 00cc 4A4B     		ldr	r3, .L28+28
 581 00ce 1A68     		ldr	r2, [r3]
 582 00d0 BB68     		ldr	r3, [r7, #8]
 583 00d2 1B68     		ldr	r3, [r3]
 584 00d4 0846     		mov	r0, r1
 585 00d6 1146     		mov	r1, r2
 586 00d8 1A46     		mov	r2, r3
 587 00da 0023     		movs	r3, #0
 588 00dc FFF7FEFF 		bl	correctSpeed
 417:.\main.c      ****             
 418:.\main.c      ****             // Update previous values
 419:.\main.c      ****             prevCountM1 = countM1;
 589              		.loc 1 419 0
 590 00e0 444B     		ldr	r3, .L28+24
 591 00e2 1B68     		ldr	r3, [r3]
 592 00e4 414A     		ldr	r2, .L28+16
 593 00e6 1360     		str	r3, [r2]
 420:.\main.c      ****             prevCountM2 = countM2;
 594              		.loc 1 420 0
 595 00e8 434B     		ldr	r3, .L28+28
 596 00ea 1B68     		ldr	r3, [r3]
 597 00ec 404A     		ldr	r2, .L28+20
 598 00ee 1360     		str	r3, [r2]
 421:.\main.c      ****             
 422:.\main.c      ****             // Reset flag
 423:.\main.c      ****             timer_flag = FALSE;
 599              		.loc 1 423 0
 600 00f0 3D4B     		ldr	r3, .L28+12
 601 00f2 0022     		movs	r2, #0
 602 00f4 1A60     		str	r2, [r3]
 424:.\main.c      ****             
 425:.\main.c      ****             isr_TS_Enable();
 603              		.loc 1 425 0
 604 00f6 FFF7FEFF 		bl	isr_TS_Enable
 605              	.L18:
 426:.\main.c      ****         }
 427:.\main.c      ****         
 428:.\main.c      ****         // follow a line algorithm
 429:.\main.c      ****         if (sensor_readings[TOP_MID_SENSOR]) { // on line
 606              		.loc 1 429 0
 607 00fa 404B     		ldr	r3, .L28+32
 608 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 609 00fe 002B     		cmp	r3, #0
 610 0100 25D0     		beq	.L19
 430:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 611              		.loc 1 430 0
 612 0102 3E4B     		ldr	r3, .L28+32
 613 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 614 0106 002B     		cmp	r3, #0
 615 0108 0ED1     		bne	.L20
 616              		.loc 1 430 0 is_stmt 0 discriminator 1
 617 010a 3C4B     		ldr	r3, .L28+32
 618 010c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 619 010e 002B     		cmp	r3, #0
 620 0110 0AD0     		beq	.L20
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 20


 431:.\main.c      ****                 *right_wheel_count -= ADJUST_SPEED_SMALL;
 621              		.loc 1 431 0 is_stmt 1
 622 0112 BB68     		ldr	r3, [r7, #8]
 623 0114 1B68     		ldr	r3, [r3]
 624 0116 5A1E     		subs	r2, r3, #1
 625 0118 BB68     		ldr	r3, [r7, #8]
 626 011a 1A60     		str	r2, [r3]
 432:.\main.c      ****                 *left_wheel_count += ADJUST_SPEED_SMALL;
 627              		.loc 1 432 0
 628 011c 7B68     		ldr	r3, [r7, #4]
 629 011e 1B68     		ldr	r3, [r3]
 630 0120 5A1C     		adds	r2, r3, #1
 631 0122 7B68     		ldr	r3, [r7, #4]
 632 0124 1A60     		str	r2, [r3]
 633 0126 2DE0     		b	.L22
 634              	.L20:
 433:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { //
 635              		.loc 1 433 0
 636 0128 344B     		ldr	r3, .L28+32
 637 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 638 012c 002B     		cmp	r3, #0
 639 012e 29D0     		beq	.L22
 640              		.loc 1 433 0 is_stmt 0 discriminator 1
 641 0130 324B     		ldr	r3, .L28+32
 642 0132 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 643 0134 002B     		cmp	r3, #0
 644 0136 25D1     		bne	.L22
 434:.\main.c      ****                 *right_wheel_count += ADJUST_SPEED_SMALL;
 645              		.loc 1 434 0 is_stmt 1
 646 0138 BB68     		ldr	r3, [r7, #8]
 647 013a 1B68     		ldr	r3, [r3]
 648 013c 5A1C     		adds	r2, r3, #1
 649 013e BB68     		ldr	r3, [r7, #8]
 650 0140 1A60     		str	r2, [r3]
 435:.\main.c      ****                 *left_wheel_count -= ADJUST_SPEED_SMALL;
 651              		.loc 1 435 0
 652 0142 7B68     		ldr	r3, [r7, #4]
 653 0144 1B68     		ldr	r3, [r3]
 654 0146 5A1E     		subs	r2, r3, #1
 655 0148 7B68     		ldr	r3, [r7, #4]
 656 014a 1A60     		str	r2, [r3]
 657 014c 1AE0     		b	.L22
 658              	.L19:
 436:.\main.c      ****             }
 437:.\main.c      ****         } else { // moved off
 438:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 659              		.loc 1 438 0
 660 014e 2B4B     		ldr	r3, .L28+32
 661 0150 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 662 0152 002B     		cmp	r3, #0
 663 0154 09D1     		bne	.L23
 664              		.loc 1 438 0 is_stmt 0 discriminator 1
 665 0156 294B     		ldr	r3, .L28+32
 666 0158 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 667 015a 002B     		cmp	r3, #0
 668 015c 05D0     		beq	.L23
 439:.\main.c      ****                 usbPutString(" - turn right");
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 21


 669              		.loc 1 439 0 is_stmt 1
 670 015e 2848     		ldr	r0, .L28+36
 671 0160 FFF7FEFF 		bl	usbPutString
 440:.\main.c      ****                 turnRight();
 672              		.loc 1 440 0
 673 0164 FFF7FEFF 		bl	turnRight
 674 0168 0CE0     		b	.L22
 675              	.L23:
 441:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {// 
 676              		.loc 1 441 0
 677 016a 244B     		ldr	r3, .L28+32
 678 016c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 679 016e 002B     		cmp	r3, #0
 680 0170 08D0     		beq	.L22
 681              		.loc 1 441 0 is_stmt 0 discriminator 1
 682 0172 224B     		ldr	r3, .L28+32
 683 0174 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 684 0176 002B     		cmp	r3, #0
 685 0178 04D1     		bne	.L22
 442:.\main.c      ****                 usbPutString(" - turn left");
 686              		.loc 1 442 0 is_stmt 1
 687 017a 2248     		ldr	r0, .L28+40
 688 017c FFF7FEFF 		bl	usbPutString
 443:.\main.c      **** 				turnLeft();
 689              		.loc 1 443 0
 690 0180 FFF7FEFF 		bl	turnLeft
 691              	.L22:
 444:.\main.c      ****             }
 445:.\main.c      ****         }
 446:.\main.c      ****         
 447:.\main.c      ****         if (*right_wheel_count > MAX_SPEED) {
 692              		.loc 1 447 0
 693 0184 BB68     		ldr	r3, [r7, #8]
 694 0186 1B68     		ldr	r3, [r3]
 695 0188 092B     		cmp	r3, #9
 696 018a 02DD     		ble	.L24
 448:.\main.c      ****             *right_wheel_count = MAX_SPEED;
 697              		.loc 1 448 0
 698 018c BB68     		ldr	r3, [r7, #8]
 699 018e 0922     		movs	r2, #9
 700 0190 1A60     		str	r2, [r3]
 701              	.L24:
 449:.\main.c      ****         }
 450:.\main.c      ****         if (*left_wheel_count > MAX_SPEED) {
 702              		.loc 1 450 0
 703 0192 7B68     		ldr	r3, [r7, #4]
 704 0194 1B68     		ldr	r3, [r3]
 705 0196 092B     		cmp	r3, #9
 706 0198 02DD     		ble	.L25
 451:.\main.c      ****             *left_wheel_count = MAX_SPEED;
 707              		.loc 1 451 0
 708 019a 7B68     		ldr	r3, [r7, #4]
 709 019c 0922     		movs	r2, #9
 710 019e 1A60     		str	r2, [r3]
 711              	.L25:
 452:.\main.c      ****         }
 453:.\main.c      ****         if (*right_wheel_count < MIN_SPEED) {
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 22


 712              		.loc 1 453 0
 713 01a0 BB68     		ldr	r3, [r7, #8]
 714 01a2 1B68     		ldr	r3, [r3]
 715 01a4 032B     		cmp	r3, #3
 716 01a6 02DC     		bgt	.L26
 454:.\main.c      ****             *right_wheel_count = MIN_SPEED;
 717              		.loc 1 454 0
 718 01a8 BB68     		ldr	r3, [r7, #8]
 719 01aa 0422     		movs	r2, #4
 720 01ac 1A60     		str	r2, [r3]
 721              	.L26:
 455:.\main.c      ****         }
 456:.\main.c      ****         if (*left_wheel_count < MIN_SPEED) {
 722              		.loc 1 456 0
 723 01ae 7B68     		ldr	r3, [r7, #4]
 724 01b0 1B68     		ldr	r3, [r3]
 725 01b2 032B     		cmp	r3, #3
 726 01b4 02DC     		bgt	.L16
 457:.\main.c      ****             *left_wheel_count = MIN_SPEED;
 727              		.loc 1 457 0
 728 01b6 7B68     		ldr	r3, [r7, #4]
 729 01b8 0422     		movs	r2, #4
 730 01ba 1A60     		str	r2, [r3]
 731              	.L16:
 401:.\main.c      ****         if (adc_flag) {
 732              		.loc 1 401 0
 733 01bc F868     		ldr	r0, [r7, #12]
 734 01be FFF7FEFF 		bl	__aeabi_i2f
 735 01c2 0346     		mov	r3, r0
 736 01c4 1846     		mov	r0, r3
 737 01c6 796B     		ldr	r1, [r7, #52]	@ float
 738 01c8 FFF7FEFF 		bl	__aeabi_fcmpgt
 739 01cc 0346     		mov	r3, r0
 740 01ce 002B     		cmp	r3, #0
 741 01d0 7FF450AF 		bne	.L27
 458:.\main.c      ****         }
 459:.\main.c      ****     }
 460:.\main.c      **** }
 742              		.loc 1 460 0
 743 01d4 3837     		adds	r7, r7, #56
 744              		.cfi_def_cfa_offset 8
 745 01d6 BD46     		mov	sp, r7
 746              		.cfi_def_cfa_register 13
 747              		@ sp needed
 748 01d8 80BD     		pop	{r7, pc}
 749              	.L29:
 750 01da 00BF     		.align	2
 751              	.L28:
 752 01dc 30000000 		.word	.LC3
 753 01e0 40000000 		.word	.LC4
 754 01e4 00000000 		.word	adc_flag
 755 01e8 00000000 		.word	timer_flag
 756 01ec 00000000 		.word	prevCountM1
 757 01f0 00000000 		.word	prevCountM2
 758 01f4 00000000 		.word	countM1
 759 01f8 00000000 		.word	countM2
 760 01fc 00000000 		.word	sensor_readings
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 23


 761 0200 50000000 		.word	.LC5
 762 0204 60000000 		.word	.LC6
 763              		.cfi_endproc
 764              	.LFE66:
 765              		.size	goStraight, .-goStraight
 766              		.global	__aeabi_fdiv
 767              		.global	__aeabi_f2d
 768              		.global	__aeabi_dmul
 769              		.global	__aeabi_d2f
 770              		.section	.text.getDistance,"ax",%progbits
 771              		.align	2
 772              		.global	getDistance
 773              		.thumb
 774              		.thumb_func
 775              		.type	getDistance, %function
 776              	getDistance:
 777              	.LFB67:
 461:.\main.c      **** 
 462:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2) {
 778              		.loc 1 462 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 16
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782 0000 80B5     		push	{r7, lr}
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 84B0     		sub	sp, sp, #16
 787              		.cfi_def_cfa_offset 24
 788 0004 00AF     		add	r7, sp, #0
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 791 0008 3960     		str	r1, [r7]
 463:.\main.c      ****     float m1_dist = ((float)abs(countM1 - prevCountM1) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 792              		.loc 1 463 0
 793 000a 2D4B     		ldr	r3, .L32+8
 794 000c 1A68     		ldr	r2, [r3]
 795 000e 7B68     		ldr	r3, [r7, #4]
 796 0010 D31A     		subs	r3, r2, r3
 797 0012 002B     		cmp	r3, #0
 798 0014 B8BF     		it	lt
 799 0016 5B42     		rsblt	r3, r3, #0
 800 0018 1846     		mov	r0, r3
 801 001a FFF7FEFF 		bl	__aeabi_i2f
 802 001e 0346     		mov	r3, r0
 803 0020 1846     		mov	r0, r3
 804 0022 2849     		ldr	r1, .L32+12
 805 0024 FFF7FEFF 		bl	__aeabi_fdiv
 806 0028 0346     		mov	r3, r0
 807 002a 1846     		mov	r0, r3
 808 002c FFF7FEFF 		bl	__aeabi_f2d
 809 0030 0246     		mov	r2, r0
 810 0032 0B46     		mov	r3, r1
 811 0034 1046     		mov	r0, r2
 812 0036 1946     		mov	r1, r3
 813 0038 1FA3     		adr	r3, .L32
 814 003a D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 24


 815 003e FFF7FEFF 		bl	__aeabi_dmul
 816 0042 0246     		mov	r2, r0
 817 0044 0B46     		mov	r3, r1
 818 0046 1046     		mov	r0, r2
 819 0048 1946     		mov	r1, r3
 820 004a FFF7FEFF 		bl	__aeabi_d2f
 821 004e 0346     		mov	r3, r0
 822 0050 FB60     		str	r3, [r7, #12]	@ float
 464:.\main.c      ****     float m2_dist = ((float)abs(countM2 - prevCountM2) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 823              		.loc 1 464 0
 824 0052 1D4B     		ldr	r3, .L32+16
 825 0054 1A68     		ldr	r2, [r3]
 826 0056 3B68     		ldr	r3, [r7]
 827 0058 D31A     		subs	r3, r2, r3
 828 005a 002B     		cmp	r3, #0
 829 005c B8BF     		it	lt
 830 005e 5B42     		rsblt	r3, r3, #0
 831 0060 1846     		mov	r0, r3
 832 0062 FFF7FEFF 		bl	__aeabi_i2f
 833 0066 0346     		mov	r3, r0
 834 0068 1846     		mov	r0, r3
 835 006a 1649     		ldr	r1, .L32+12
 836 006c FFF7FEFF 		bl	__aeabi_fdiv
 837 0070 0346     		mov	r3, r0
 838 0072 1846     		mov	r0, r3
 839 0074 FFF7FEFF 		bl	__aeabi_f2d
 840 0078 0246     		mov	r2, r0
 841 007a 0B46     		mov	r3, r1
 842 007c 1046     		mov	r0, r2
 843 007e 1946     		mov	r1, r3
 844 0080 0DA3     		adr	r3, .L32
 845 0082 D3E90023 		ldrd	r2, [r3]
 846 0086 FFF7FEFF 		bl	__aeabi_dmul
 847 008a 0246     		mov	r2, r0
 848 008c 0B46     		mov	r3, r1
 849 008e 1046     		mov	r0, r2
 850 0090 1946     		mov	r1, r3
 851 0092 FFF7FEFF 		bl	__aeabi_d2f
 852 0096 0346     		mov	r3, r0
 853 0098 BB60     		str	r3, [r7, #8]	@ float
 465:.\main.c      ****     return (m1_dist + m2_dist) / 2;
 854              		.loc 1 465 0
 855 009a F868     		ldr	r0, [r7, #12]	@ float
 856 009c B968     		ldr	r1, [r7, #8]	@ float
 857 009e FFF7FEFF 		bl	__aeabi_fadd
 858 00a2 0346     		mov	r3, r0
 859 00a4 1846     		mov	r0, r3
 860 00a6 4FF08041 		mov	r1, #1073741824
 861 00aa FFF7FEFF 		bl	__aeabi_fdiv
 862 00ae 0346     		mov	r3, r0
 466:.\main.c      **** };
 863              		.loc 1 466 0
 864 00b0 1846     		mov	r0, r3
 865 00b2 1037     		adds	r7, r7, #16
 866              		.cfi_def_cfa_offset 8
 867 00b4 BD46     		mov	sp, r7
 868              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 25


 869              		@ sp needed
 870 00b6 80BD     		pop	{r7, pc}
 871              	.L33:
 872              		.align	3
 873              	.L32:
 874 00b8 CE8C7E34 		.word	880708814
 875 00bc 9C6B3440 		.word	1077177244
 876 00c0 00000000 		.word	countM1
 877 00c4 00006443 		.word	1130627072
 878 00c8 00000000 		.word	countM2
 879              		.cfi_endproc
 880              	.LFE67:
 881              		.size	getDistance, .-getDistance
 882              		.global	__aeabi_fcmplt
 883 00cc AFF30080 		.section	.text.turnForDegrees,"ax",%progbits
 884              		.align	2
 885              		.global	turnForDegrees
 886              		.thumb
 887              		.thumb_func
 888              		.type	turnForDegrees, %function
 889              	turnForDegrees:
 890              	.LFB68:
 467:.\main.c      **** 
 468:.\main.c      **** void turnForDegrees(int degrees) {
 891              		.loc 1 468 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 16
 894              		@ frame_needed = 1, uses_anonymous_args = 0
 895 0000 80B5     		push	{r7, lr}
 896              		.cfi_def_cfa_offset 8
 897              		.cfi_offset 7, -8
 898              		.cfi_offset 14, -4
 899 0002 84B0     		sub	sp, sp, #16
 900              		.cfi_def_cfa_offset 24
 901 0004 00AF     		add	r7, sp, #0
 902              		.cfi_def_cfa_register 7
 903 0006 7860     		str	r0, [r7, #4]
 469:.\main.c      ****     float distance_to_turn = degrees / 13;
 904              		.loc 1 469 0
 905 0008 7B68     		ldr	r3, [r7, #4]
 906 000a 1D4A     		ldr	r2, .L37
 907 000c 82FB0312 		smull	r1, r2, r2, r3
 908 0010 9210     		asrs	r2, r2, #2
 909 0012 DB17     		asrs	r3, r3, #31
 910 0014 D31A     		subs	r3, r2, r3
 911 0016 1846     		mov	r0, r3
 912 0018 FFF7FEFF 		bl	__aeabi_i2f
 913 001c 0346     		mov	r3, r0
 914 001e BB60     		str	r3, [r7, #8]	@ float
 470:.\main.c      ****     float distance_turned = 0;
 915              		.loc 1 470 0
 916 0020 4FF00003 		mov	r3, #0
 917 0024 FB60     		str	r3, [r7, #12]	@ float
 471:.\main.c      ****     // Storing count values
 472:.\main.c      **** //    int prevCountM1 = 0;
 473:.\main.c      **** //    int prevCountM2 = 0;
 474:.\main.c      ****     
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 26


 475:.\main.c      ****     while (distance_turned < distance_to_turn) {
 918              		.loc 1 475 0
 919 0026 21E0     		b	.L35
 920              	.L36:
 476:.\main.c      ****          // New count values from encoder are ready
 477:.\main.c      ****         if (timer_flag){
 921              		.loc 1 477 0
 922 0028 164B     		ldr	r3, .L37+4
 923 002a 1B68     		ldr	r3, [r3]
 924 002c 002B     		cmp	r3, #0
 925 002e 1DD0     		beq	.L35
 478:.\main.c      ****             isr_TS_Disable();
 926              		.loc 1 478 0
 927 0030 FFF7FEFF 		bl	isr_TS_Disable
 479:.\main.c      ****             
 480:.\main.c      ****             distance_turned += getDistance(prevCountM1, prevCountM2);
 928              		.loc 1 480 0
 929 0034 144B     		ldr	r3, .L37+8
 930 0036 1A68     		ldr	r2, [r3]
 931 0038 144B     		ldr	r3, .L37+12
 932 003a 1B68     		ldr	r3, [r3]
 933 003c 1046     		mov	r0, r2
 934 003e 1946     		mov	r1, r3
 935 0040 FFF7FEFF 		bl	getDistance
 936 0044 0346     		mov	r3, r0
 937 0046 F868     		ldr	r0, [r7, #12]	@ float
 938 0048 1946     		mov	r1, r3
 939 004a FFF7FEFF 		bl	__aeabi_fadd
 940 004e 0346     		mov	r3, r0
 941 0050 FB60     		str	r3, [r7, #12]	@ float
 481:.\main.c      ****             
 482:.\main.c      ****             // Update previous values
 483:.\main.c      ****             prevCountM1 = countM1;
 942              		.loc 1 483 0
 943 0052 0F4B     		ldr	r3, .L37+16
 944 0054 1B68     		ldr	r3, [r3]
 945 0056 0C4A     		ldr	r2, .L37+8
 946 0058 1360     		str	r3, [r2]
 484:.\main.c      ****             prevCountM2 = countM2;
 947              		.loc 1 484 0
 948 005a 0E4B     		ldr	r3, .L37+20
 949 005c 1B68     		ldr	r3, [r3]
 950 005e 0B4A     		ldr	r2, .L37+12
 951 0060 1360     		str	r3, [r2]
 485:.\main.c      ****             
 486:.\main.c      ****             // Reset flag
 487:.\main.c      ****             timer_flag = FALSE;
 952              		.loc 1 487 0
 953 0062 084B     		ldr	r3, .L37+4
 954 0064 0022     		movs	r2, #0
 955 0066 1A60     		str	r2, [r3]
 488:.\main.c      ****             
 489:.\main.c      ****             isr_TS_Enable();
 956              		.loc 1 489 0
 957 0068 FFF7FEFF 		bl	isr_TS_Enable
 958              	.L35:
 475:.\main.c      ****          // New count values from encoder are ready
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 27


 959              		.loc 1 475 0
 960 006c F868     		ldr	r0, [r7, #12]	@ float
 961 006e B968     		ldr	r1, [r7, #8]	@ float
 962 0070 FFF7FEFF 		bl	__aeabi_fcmplt
 963 0074 0346     		mov	r3, r0
 964 0076 002B     		cmp	r3, #0
 965 0078 D6D1     		bne	.L36
 490:.\main.c      ****         }
 491:.\main.c      ****     }
 492:.\main.c      **** }
 966              		.loc 1 492 0
 967 007a 1037     		adds	r7, r7, #16
 968              		.cfi_def_cfa_offset 8
 969 007c BD46     		mov	sp, r7
 970              		.cfi_def_cfa_register 13
 971              		@ sp needed
 972 007e 80BD     		pop	{r7, pc}
 973              	.L38:
 974              		.align	2
 975              	.L37:
 976 0080 4FECC44E 		.word	1321528399
 977 0084 00000000 		.word	timer_flag
 978 0088 00000000 		.word	prevCountM1
 979 008c 00000000 		.word	prevCountM2
 980 0090 00000000 		.word	countM1
 981 0094 00000000 		.word	countM2
 982              		.cfi_endproc
 983              	.LFE68:
 984              		.size	turnForDegrees, .-turnForDegrees
 985              		.section	.text.getValForChannel,"ax",%progbits
 986              		.align	2
 987              		.global	getValForChannel
 988              		.thumb
 989              		.thumb_func
 990              		.type	getValForChannel, %function
 991              	getValForChannel:
 992              	.LFB69:
 493:.\main.c      ****     
 494:.\main.c      **** 
 495:.\main.c      **** // Simple ADC conversion
 496:.\main.c      **** int32 getValForChannel(int16 n){
 993              		.loc 1 496 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 8
 996              		@ frame_needed = 1, uses_anonymous_args = 0
 997 0000 80B5     		push	{r7, lr}
 998              		.cfi_def_cfa_offset 8
 999              		.cfi_offset 7, -8
 1000              		.cfi_offset 14, -4
 1001 0002 82B0     		sub	sp, sp, #8
 1002              		.cfi_def_cfa_offset 16
 1003 0004 00AF     		add	r7, sp, #0
 1004              		.cfi_def_cfa_register 7
 1005 0006 0346     		mov	r3, r0
 1006 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 497:.\main.c      ****     return ADC_CountsTo_mVolts(ADC_GetResult16(n));
 1007              		.loc 1 497 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 28


 1008 000a FB88     		ldrh	r3, [r7, #6]
 1009 000c 1846     		mov	r0, r3
 1010 000e FFF7FEFF 		bl	ADC_GetResult16
 1011 0012 0346     		mov	r3, r0
 1012 0014 1846     		mov	r0, r3
 1013 0016 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 1014 001a 0346     		mov	r3, r0
 498:.\main.c      **** }
 1015              		.loc 1 498 0
 1016 001c 1846     		mov	r0, r3
 1017 001e 0837     		adds	r7, r7, #8
 1018              		.cfi_def_cfa_offset 8
 1019 0020 BD46     		mov	sp, r7
 1020              		.cfi_def_cfa_register 13
 1021              		@ sp needed
 1022 0022 80BD     		pop	{r7, pc}
 1023              		.cfi_endproc
 1024              	.LFE69:
 1025              		.size	getValForChannel, .-getValForChannel
 1026              		.section	.text.updateSensorValues,"ax",%progbits
 1027              		.align	2
 1028              		.global	updateSensorValues
 1029              		.thumb
 1030              		.thumb_func
 1031              		.type	updateSensorValues, %function
 1032              	updateSensorValues:
 1033              	.LFB70:
 499:.\main.c      **** 
 500:.\main.c      **** void updateSensorValues(){
 1034              		.loc 1 500 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 8
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038 0000 80B5     		push	{r7, lr}
 1039              		.cfi_def_cfa_offset 8
 1040              		.cfi_offset 7, -8
 1041              		.cfi_offset 14, -4
 1042 0002 82B0     		sub	sp, sp, #8
 1043              		.cfi_def_cfa_offset 16
 1044 0004 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
 501:.\main.c      ****     // update each sensor with the maximum reading so far
 502:.\main.c      ****     int i;
 503:.\main.c      ****     for (i = 0; i < NUM_SENSORS; i++){
 1046              		.loc 1 503 0
 1047 0006 0023     		movs	r3, #0
 1048 0008 7B60     		str	r3, [r7, #4]
 1049 000a 15E0     		b	.L42
 1050              	.L44:
 1051              	.LBB3:
 504:.\main.c      ****         int reading = getValForChannel(i);
 1052              		.loc 1 504 0
 1053 000c 7B68     		ldr	r3, [r7, #4]
 1054 000e 9BB2     		uxth	r3, r3
 1055 0010 1BB2     		sxth	r3, r3
 1056 0012 1846     		mov	r0, r3
 1057 0014 FFF7FEFF 		bl	getValForChannel
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 29


 1058 0018 3860     		str	r0, [r7]
 505:.\main.c      ****         if (reading > adc_readings[i]) {
 1059              		.loc 1 505 0
 1060 001a 234A     		ldr	r2, .L49
 1061 001c 7B68     		ldr	r3, [r7, #4]
 1062 001e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1063 0022 3B68     		ldr	r3, [r7]
 1064 0024 9A42     		cmp	r2, r3
 1065 0026 04DA     		bge	.L43
 506:.\main.c      ****             adc_readings[i] = reading;
 1066              		.loc 1 506 0
 1067 0028 1F49     		ldr	r1, .L49
 1068 002a 7B68     		ldr	r3, [r7, #4]
 1069 002c 3A68     		ldr	r2, [r7]
 1070 002e 41F82320 		str	r2, [r1, r3, lsl #2]
 1071              	.L43:
 1072              	.LBE3:
 503:.\main.c      ****         int reading = getValForChannel(i);
 1073              		.loc 1 503 0 discriminator 2
 1074 0032 7B68     		ldr	r3, [r7, #4]
 1075 0034 0133     		adds	r3, r3, #1
 1076 0036 7B60     		str	r3, [r7, #4]
 1077              	.L42:
 503:.\main.c      ****         int reading = getValForChannel(i);
 1078              		.loc 1 503 0 is_stmt 0 discriminator 1
 1079 0038 7B68     		ldr	r3, [r7, #4]
 1080 003a 052B     		cmp	r3, #5
 1081 003c E6DD     		ble	.L44
 507:.\main.c      ****         }
 508:.\main.c      ****     }
 509:.\main.c      **** 
 510:.\main.c      ****     sample_count++;
 1082              		.loc 1 510 0 is_stmt 1
 1083 003e 1B4B     		ldr	r3, .L49+4
 1084 0040 1B68     		ldr	r3, [r3]
 1085 0042 0133     		adds	r3, r3, #1
 1086 0044 194A     		ldr	r2, .L49+4
 1087 0046 1360     		str	r3, [r2]
 511:.\main.c      ****     if (sample_count == ADC_READINGS_SIZE){
 1088              		.loc 1 511 0
 1089 0048 184B     		ldr	r3, .L49+4
 1090 004a 1B68     		ldr	r3, [r3]
 1091 004c 5A2B     		cmp	r3, #90
 1092 004e 25D1     		bne	.L45
 512:.\main.c      ****         // Black = 1 (high voltage level)
 513:.\main.c      ****         for (i = 0; i < NUM_SENSORS; i++){
 1093              		.loc 1 513 0
 1094 0050 0023     		movs	r3, #0
 1095 0052 7B60     		str	r3, [r7, #4]
 1096 0054 18E0     		b	.L46
 1097              	.L47:
 514:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 1098              		.loc 1 514 0 discriminator 3
 1099 0056 144A     		ldr	r2, .L49
 1100 0058 7B68     		ldr	r3, [r7, #4]
 1101 005a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1102 005e 40F22B12 		movw	r2, #299
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 30


 1103 0062 9342     		cmp	r3, r2
 1104 0064 D4BF     		ite	le
 1105 0066 0123     		movle	r3, #1
 1106 0068 0023     		movgt	r3, #0
 1107 006a DBB2     		uxtb	r3, r3
 1108 006c D9B2     		uxtb	r1, r3
 1109 006e 104A     		ldr	r2, .L49+8
 1110 0070 7B68     		ldr	r3, [r7, #4]
 1111 0072 1344     		add	r3, r3, r2
 1112 0074 0A46     		mov	r2, r1
 1113 0076 1A70     		strb	r2, [r3]
 515:.\main.c      ****             adc_readings[i] = 0; // Reset max value from samples
 1114              		.loc 1 515 0 discriminator 3
 1115 0078 0B4A     		ldr	r2, .L49
 1116 007a 7B68     		ldr	r3, [r7, #4]
 1117 007c 0021     		movs	r1, #0
 1118 007e 42F82310 		str	r1, [r2, r3, lsl #2]
 513:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 1119              		.loc 1 513 0 discriminator 3
 1120 0082 7B68     		ldr	r3, [r7, #4]
 1121 0084 0133     		adds	r3, r3, #1
 1122 0086 7B60     		str	r3, [r7, #4]
 1123              	.L46:
 513:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 1124              		.loc 1 513 0 is_stmt 0 discriminator 1
 1125 0088 7B68     		ldr	r3, [r7, #4]
 1126 008a 052B     		cmp	r3, #5
 1127 008c E3DD     		ble	.L47
 516:.\main.c      ****         }
 517:.\main.c      ****         ADC_DEBUG_Write(1);
 1128              		.loc 1 517 0 is_stmt 1
 1129 008e 0120     		movs	r0, #1
 1130 0090 FFF7FEFF 		bl	ADC_DEBUG_Write
 518:.\main.c      ****         sample_count = 0;
 1131              		.loc 1 518 0
 1132 0094 054B     		ldr	r3, .L49+4
 1133 0096 0022     		movs	r2, #0
 1134 0098 1A60     		str	r2, [r3]
 1135 009a 02E0     		b	.L41
 1136              	.L45:
 519:.\main.c      ****     }
 520:.\main.c      ****     else ADC_DEBUG_Write(0);
 1137              		.loc 1 520 0
 1138 009c 0020     		movs	r0, #0
 1139 009e FFF7FEFF 		bl	ADC_DEBUG_Write
 1140              	.L41:
 521:.\main.c      **** }
 1141              		.loc 1 521 0
 1142 00a2 0837     		adds	r7, r7, #8
 1143              		.cfi_def_cfa_offset 8
 1144 00a4 BD46     		mov	sp, r7
 1145              		.cfi_def_cfa_register 13
 1146              		@ sp needed
 1147 00a6 80BD     		pop	{r7, pc}
 1148              	.L50:
 1149              		.align	2
 1150              	.L49:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 31


 1151 00a8 00000000 		.word	adc_readings
 1152 00ac 00000000 		.word	sample_count
 1153 00b0 00000000 		.word	sensor_readings
 1154              		.cfi_endproc
 1155              	.LFE70:
 1156              		.size	updateSensorValues, .-updateSensorValues
 1157              		.section	.text.changeLeftWheelSpeed,"ax",%progbits
 1158              		.align	2
 1159              		.global	changeLeftWheelSpeed
 1160              		.thumb
 1161              		.thumb_func
 1162              		.type	changeLeftWheelSpeed, %function
 1163              	changeLeftWheelSpeed:
 1164              	.LFB71:
 522:.\main.c      **** 
 523:.\main.c      **** void changeLeftWheelSpeed(int amount) {
 1165              		.loc 1 523 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 16
 1168              		@ frame_needed = 1, uses_anonymous_args = 0
 1169 0000 80B5     		push	{r7, lr}
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 7, -8
 1172              		.cfi_offset 14, -4
 1173 0002 84B0     		sub	sp, sp, #16
 1174              		.cfi_def_cfa_offset 24
 1175 0004 00AF     		add	r7, sp, #0
 1176              		.cfi_def_cfa_register 7
 1177 0006 7860     		str	r0, [r7, #4]
 524:.\main.c      ****     int new_value = PWM_1_ReadCompare() + amount;
 1178              		.loc 1 524 0
 1179 0008 FFF7FEFF 		bl	PWM_1_ReadCompare
 1180 000c 0346     		mov	r3, r0
 1181 000e 1A46     		mov	r2, r3
 1182 0010 7B68     		ldr	r3, [r7, #4]
 1183 0012 1344     		add	r3, r3, r2
 1184 0014 FB60     		str	r3, [r7, #12]
 525:.\main.c      ****     PWM_1_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1185              		.loc 1 525 0
 1186 0016 FB68     		ldr	r3, [r7, #12]
 1187 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1188 001c 9BB2     		uxth	r3, r3
 1189 001e 1846     		mov	r0, r3
 1190 0020 FFF7FEFF 		bl	PWM_1_WriteCompare
 526:.\main.c      **** }
 1191              		.loc 1 526 0
 1192 0024 1037     		adds	r7, r7, #16
 1193              		.cfi_def_cfa_offset 8
 1194 0026 BD46     		mov	sp, r7
 1195              		.cfi_def_cfa_register 13
 1196              		@ sp needed
 1197 0028 80BD     		pop	{r7, pc}
 1198              		.cfi_endproc
 1199              	.LFE71:
 1200              		.size	changeLeftWheelSpeed, .-changeLeftWheelSpeed
 1201 002a 00BF     		.section	.text.changeRightWheelSpeed,"ax",%progbits
 1202              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 32


 1203              		.global	changeRightWheelSpeed
 1204              		.thumb
 1205              		.thumb_func
 1206              		.type	changeRightWheelSpeed, %function
 1207              	changeRightWheelSpeed:
 1208              	.LFB72:
 527:.\main.c      **** 
 528:.\main.c      **** void changeRightWheelSpeed(int amount){
 1209              		.loc 1 528 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 16
 1212              		@ frame_needed = 1, uses_anonymous_args = 0
 1213 0000 80B5     		push	{r7, lr}
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 84B0     		sub	sp, sp, #16
 1218              		.cfi_def_cfa_offset 24
 1219 0004 00AF     		add	r7, sp, #0
 1220              		.cfi_def_cfa_register 7
 1221 0006 7860     		str	r0, [r7, #4]
 529:.\main.c      ****     int new_value = PWM_2_ReadCompare() + amount;
 1222              		.loc 1 529 0
 1223 0008 FFF7FEFF 		bl	PWM_2_ReadCompare
 1224 000c 0346     		mov	r3, r0
 1225 000e 1A46     		mov	r2, r3
 1226 0010 7B68     		ldr	r3, [r7, #4]
 1227 0012 1344     		add	r3, r3, r2
 1228 0014 FB60     		str	r3, [r7, #12]
 530:.\main.c      ****     PWM_2_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1229              		.loc 1 530 0
 1230 0016 FB68     		ldr	r3, [r7, #12]
 1231 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1232 001c 9BB2     		uxth	r3, r3
 1233 001e 1846     		mov	r0, r3
 1234 0020 FFF7FEFF 		bl	PWM_2_WriteCompare
 531:.\main.c      **** }
 1235              		.loc 1 531 0
 1236 0024 1037     		adds	r7, r7, #16
 1237              		.cfi_def_cfa_offset 8
 1238 0026 BD46     		mov	sp, r7
 1239              		.cfi_def_cfa_register 13
 1240              		@ sp needed
 1241 0028 80BD     		pop	{r7, pc}
 1242              		.cfi_endproc
 1243              	.LFE72:
 1244              		.size	changeRightWheelSpeed, .-changeRightWheelSpeed
 1245 002a 00BF     		.section	.text.correctSpeed,"ax",%progbits
 1246              		.align	2
 1247              		.global	correctSpeed
 1248              		.thumb
 1249              		.thumb_func
 1250              		.type	correctSpeed, %function
 1251              	correctSpeed:
 1252              	.LFB73:
 532:.\main.c      **** 
 533:.\main.c      **** /* ## SPEED CONTROL ## 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 33


 534:.\main.c      **** * Algorithm: Get difference between counts, compare to
 535:.\main.c      **** * the difference we expect. Add the correction to the PWM.
 536:.\main.c      **** */
 537:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel){    
 1253              		.loc 1 537 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 88
 1256              		@ frame_needed = 1, uses_anonymous_args = 0
 1257 0000 80B5     		push	{r7, lr}
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 7, -8
 1260              		.cfi_offset 14, -4
 1261 0002 96B0     		sub	sp, sp, #88
 1262              		.cfi_def_cfa_offset 96
 1263 0004 00AF     		add	r7, sp, #0
 1264              		.cfi_def_cfa_register 7
 1265 0006 F860     		str	r0, [r7, #12]
 1266 0008 B960     		str	r1, [r7, #8]
 1267 000a 7A60     		str	r2, [r7, #4]
 1268 000c 3B60     		str	r3, [r7]
 538:.\main.c      ****     
 539:.\main.c      ****     // Account for overflow edge or other unknown error
 540:.\main.c      ****     if (prevCount > count) return;
 1269              		.loc 1 540 0
 1270 000e FA68     		ldr	r2, [r7, #12]
 1271 0010 BB68     		ldr	r3, [r7, #8]
 1272 0012 9A42     		cmp	r2, r3
 1273 0014 00DD     		ble	.L54
 1274 0016 19E0     		b	.L53
 1275              	.L54:
 541:.\main.c      ****     
 542:.\main.c      ****     int diff_count = abs(count - prevCount);
 1276              		.loc 1 542 0
 1277 0018 BA68     		ldr	r2, [r7, #8]
 1278 001a FB68     		ldr	r3, [r7, #12]
 1279 001c D31A     		subs	r3, r2, r3
 1280 001e 002B     		cmp	r3, #0
 1281 0020 B8BF     		it	lt
 1282 0022 5B42     		rsblt	r3, r3, #0
 1283 0024 7B65     		str	r3, [r7, #84]
 543:.\main.c      ****     
 544:.\main.c      ****     // Account for a situation where PSoc is powered but wheels aren't moving
 545:.\main.c      ****     if (diff_count == 0) return;
 1284              		.loc 1 545 0
 1285 0026 7B6D     		ldr	r3, [r7, #84]
 1286 0028 002B     		cmp	r3, #0
 1287 002a 00D1     		bne	.L56
 1288              		.loc 1 545 0 is_stmt 0 discriminator 2
 1289 002c 0EE0     		b	.L53
 1290              	.L56:
 546:.\main.c      ****     
 547:.\main.c      ****     char msg[64];
 548:.\main.c      ****         
 549:.\main.c      ****     /* Determine correction that must be applied to the wheel
 550:.\main.c      ****     * desired_count > diff_count :-> wheel is slow; increase PWM
 551:.\main.c      ****     * desired_count < diff_count :-> wheel is fast; decrease PWM
 552:.\main.c      ****     * desired_count == diff_count :-> wheel is stable; do nothing
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 34


 553:.\main.c      ****     */
 554:.\main.c      ****     int correction = desired_count-diff_count;
 1291              		.loc 1 554 0 is_stmt 1
 1292 002e 7A68     		ldr	r2, [r7, #4]
 1293 0030 7B6D     		ldr	r3, [r7, #84]
 1294 0032 D31A     		subs	r3, r2, r3
 1295 0034 3B65     		str	r3, [r7, #80]
 555:.\main.c      ****     
 556:.\main.c      ****     // Apply the speed correction to the appropriate wheel          
 557:.\main.c      ****     if (isLeftWheel){
 1296              		.loc 1 557 0
 1297 0036 3B68     		ldr	r3, [r7]
 1298 0038 002B     		cmp	r3, #0
 1299 003a 03D0     		beq	.L57
 558:.\main.c      ****         changeLeftWheelSpeed(correction);
 1300              		.loc 1 558 0
 1301 003c 386D     		ldr	r0, [r7, #80]
 1302 003e FFF7FEFF 		bl	changeLeftWheelSpeed
 1303 0042 02E0     		b	.L58
 1304              	.L57:
 559:.\main.c      ****     }
 560:.\main.c      ****     else{
 561:.\main.c      ****         changeRightWheelSpeed(correction);
 1305              		.loc 1 561 0
 1306 0044 386D     		ldr	r0, [r7, #80]
 1307 0046 FFF7FEFF 		bl	changeRightWheelSpeed
 1308              	.L58:
 562:.\main.c      ****     }
 563:.\main.c      ****     
 564:.\main.c      ****     return;
 1309              		.loc 1 564 0 discriminator 3
 1310 004a 00BF     		nop
 1311              	.L53:
 565:.\main.c      **** }
 1312              		.loc 1 565 0
 1313 004c 5837     		adds	r7, r7, #88
 1314              		.cfi_def_cfa_offset 8
 1315 004e BD46     		mov	sp, r7
 1316              		.cfi_def_cfa_register 13
 1317              		@ sp needed
 1318 0050 80BD     		pop	{r7, pc}
 1319              		.cfi_endproc
 1320              	.LFE73:
 1321              		.size	correctSpeed, .-correctSpeed
 1322 0052 00BF     		.section	.text.setWheelDirection,"ax",%progbits
 1323              		.align	2
 1324              		.global	setWheelDirection
 1325              		.thumb
 1326              		.thumb_func
 1327              		.type	setWheelDirection, %function
 1328              	setWheelDirection:
 1329              	.LFB74:
 566:.\main.c      **** 
 567:.\main.c      **** /* Set wheel direction explicitly
 568:.\main.c      **** * Parameters are boolean, UNKNOWN can be passed
 569:.\main.c      **** * in if you wish the value to be unchanged
 570:.\main.c      **** */
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 35


 571:.\main.c      **** void setWheelDirection(int leftIsForward, int rightIsForward){
 1330              		.loc 1 571 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 8
 1333              		@ frame_needed = 1, uses_anonymous_args = 0
 1334 0000 80B5     		push	{r7, lr}
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 7, -8
 1337              		.cfi_offset 14, -4
 1338 0002 82B0     		sub	sp, sp, #8
 1339              		.cfi_def_cfa_offset 16
 1340 0004 00AF     		add	r7, sp, #0
 1341              		.cfi_def_cfa_register 7
 1342 0006 7860     		str	r0, [r7, #4]
 1343 0008 3960     		str	r1, [r7]
 572:.\main.c      ****     INV1_Write(!leftIsForward);
 1344              		.loc 1 572 0
 1345 000a 7B68     		ldr	r3, [r7, #4]
 1346 000c 002B     		cmp	r3, #0
 1347 000e 0CBF     		ite	eq
 1348 0010 0123     		moveq	r3, #1
 1349 0012 0023     		movne	r3, #0
 1350 0014 DBB2     		uxtb	r3, r3
 1351 0016 1846     		mov	r0, r3
 1352 0018 FFF7FEFF 		bl	INV1_Write
 573:.\main.c      ****     INV2_Write(rightIsForward);
 1353              		.loc 1 573 0
 1354 001c 3B68     		ldr	r3, [r7]
 1355 001e DBB2     		uxtb	r3, r3
 1356 0020 1846     		mov	r0, r3
 1357 0022 FFF7FEFF 		bl	INV2_Write
 574:.\main.c      **** }
 1358              		.loc 1 574 0
 1359 0026 0837     		adds	r7, r7, #8
 1360              		.cfi_def_cfa_offset 8
 1361 0028 BD46     		mov	sp, r7
 1362              		.cfi_def_cfa_register 13
 1363              		@ sp needed
 1364 002a 80BD     		pop	{r7, pc}
 1365              		.cfi_endproc
 1366              	.LFE74:
 1367              		.size	setWheelDirection, .-setWheelDirection
 1368              		.section	.text.turnLeft,"ax",%progbits
 1369              		.align	2
 1370              		.global	turnLeft
 1371              		.thumb
 1372              		.thumb_func
 1373              		.type	turnLeft, %function
 1374              	turnLeft:
 1375              	.LFB75:
 575:.\main.c      **** 
 576:.\main.c      **** void turnLeft() {
 1376              		.loc 1 576 0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 0
 1379              		@ frame_needed = 1, uses_anonymous_args = 0
 1380 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 36


 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 7, -8
 1383              		.cfi_offset 14, -4
 1384 0002 00AF     		add	r7, sp, #0
 1385              		.cfi_def_cfa_register 7
 577:.\main.c      ****     PWM_1_WriteCompare(0);
 1386              		.loc 1 577 0
 1387 0004 0020     		movs	r0, #0
 1388 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 578:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1389              		.loc 1 578 0
 1390 000a 4FF4E170 		mov	r0, #450
 1391 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 579:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1392              		.loc 1 579 0
 1393 0012 08E0     		b	.L62
 1394              	.L63:
 580:.\main.c      ****         if (adc_flag) {
 1395              		.loc 1 580 0
 1396 0014 084B     		ldr	r3, .L64
 1397 0016 1B68     		ldr	r3, [r3]
 1398 0018 002B     		cmp	r3, #0
 1399 001a 04D0     		beq	.L62
 581:.\main.c      ****             updateSensorValues();
 1400              		.loc 1 581 0
 1401 001c FFF7FEFF 		bl	updateSensorValues
 582:.\main.c      ****             adc_flag = FALSE;
 1402              		.loc 1 582 0
 1403 0020 054B     		ldr	r3, .L64
 1404 0022 0022     		movs	r2, #0
 1405 0024 1A60     		str	r2, [r3]
 1406              	.L62:
 579:.\main.c      ****         if (adc_flag) {
 1407              		.loc 1 579 0
 1408 0026 054B     		ldr	r3, .L64+4
 1409 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1410 002a 002B     		cmp	r3, #0
 1411 002c F2D0     		beq	.L63
 583:.\main.c      ****         }
 584:.\main.c      ****     }
 585:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1412              		.loc 1 585 0
 1413 002e 4FF4E170 		mov	r0, #450
 1414 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
 586:.\main.c      **** }
 1415              		.loc 1 586 0
 1416 0036 80BD     		pop	{r7, pc}
 1417              	.L65:
 1418              		.align	2
 1419              	.L64:
 1420 0038 00000000 		.word	adc_flag
 1421 003c 00000000 		.word	sensor_readings
 1422              		.cfi_endproc
 1423              	.LFE75:
 1424              		.size	turnLeft, .-turnLeft
 1425              		.section	.text.turnRight,"ax",%progbits
 1426              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 37


 1427              		.global	turnRight
 1428              		.thumb
 1429              		.thumb_func
 1430              		.type	turnRight, %function
 1431              	turnRight:
 1432              	.LFB76:
 587:.\main.c      **** 
 588:.\main.c      **** void turnRight() {
 1433              		.loc 1 588 0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 1, uses_anonymous_args = 0
 1437 0000 80B5     		push	{r7, lr}
 1438              		.cfi_def_cfa_offset 8
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 1441 0002 00AF     		add	r7, sp, #0
 1442              		.cfi_def_cfa_register 7
 589:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1443              		.loc 1 589 0
 1444 0004 4FF4E170 		mov	r0, #450
 1445 0008 FFF7FEFF 		bl	PWM_1_WriteCompare
 590:.\main.c      ****     PWM_2_WriteCompare(0);
 1446              		.loc 1 590 0
 1447 000c 0020     		movs	r0, #0
 1448 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 591:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1449              		.loc 1 591 0
 1450 0012 08E0     		b	.L67
 1451              	.L68:
 592:.\main.c      ****         if (adc_flag) {
 1452              		.loc 1 592 0
 1453 0014 084B     		ldr	r3, .L69
 1454 0016 1B68     		ldr	r3, [r3]
 1455 0018 002B     		cmp	r3, #0
 1456 001a 04D0     		beq	.L67
 593:.\main.c      ****             updateSensorValues();
 1457              		.loc 1 593 0
 1458 001c FFF7FEFF 		bl	updateSensorValues
 594:.\main.c      ****             adc_flag = FALSE;
 1459              		.loc 1 594 0
 1460 0020 054B     		ldr	r3, .L69
 1461 0022 0022     		movs	r2, #0
 1462 0024 1A60     		str	r2, [r3]
 1463              	.L67:
 591:.\main.c      ****         if (adc_flag) {
 1464              		.loc 1 591 0
 1465 0026 054B     		ldr	r3, .L69+4
 1466 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1467 002a 002B     		cmp	r3, #0
 1468 002c F2D0     		beq	.L68
 595:.\main.c      ****         }
 596:.\main.c      ****     }
 597:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1469              		.loc 1 597 0
 1470 002e 4FF4E170 		mov	r0, #450
 1471 0032 FFF7FEFF 		bl	PWM_2_WriteCompare
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 38


 598:.\main.c      **** }
 1472              		.loc 1 598 0
 1473 0036 80BD     		pop	{r7, pc}
 1474              	.L70:
 1475              		.align	2
 1476              	.L69:
 1477 0038 00000000 		.word	adc_flag
 1478 003c 00000000 		.word	sensor_readings
 1479              		.cfi_endproc
 1480              	.LFE76:
 1481              		.size	turnRight, .-turnRight
 1482              		.section	.rodata
 1483 006d 000000   		.align	2
 1484              	.LC7:
 1485 0070 202D2066 		.ascii	" - forward\000"
 1485      6F727761 
 1485      726400
 1486 007b 00       		.align	2
 1487              	.LC8:
 1488 007c 202D2074 		.ascii	" - turn 45\000"
 1488      75726E20 
 1488      343500
 1489 0087 00       		.align	2
 1490              	.LC9:
 1491 0088 202D2066 		.ascii	" - finish turn\000"
 1491      696E6973 
 1491      68207475 
 1491      726E00
 1492 0097 00       		.section	.text.sharpTurnLeft,"ax",%progbits
 1493              		.align	2
 1494              		.global	sharpTurnLeft
 1495              		.thumb
 1496              		.thumb_func
 1497              		.type	sharpTurnLeft, %function
 1498              	sharpTurnLeft:
 1499              	.LFB77:
 599:.\main.c      **** 
 600:.\main.c      **** void sharpTurnLeft() {
 1500              		.loc 1 600 0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 0
 1503              		@ frame_needed = 1, uses_anonymous_args = 0
 1504 0000 80B5     		push	{r7, lr}
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 00AF     		add	r7, sp, #0
 1509              		.cfi_def_cfa_register 7
 601:.\main.c      ****     usbPutString(" - forward");
 1510              		.loc 1 601 0
 1511 0004 1C48     		ldr	r0, .L76
 1512 0006 FFF7FEFF 		bl	usbPutString
 602:.\main.c      ****     // go until we reach the junction
 603:.\main.c      ****     while (!sensor_readings[BOTTOM_LEFT_SENSOR]) {
 1513              		.loc 1 603 0
 1514 000a 08E0     		b	.L72
 1515              	.L73:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 39


 604:.\main.c      ****         if (adc_flag) {
 1516              		.loc 1 604 0
 1517 000c 1B4B     		ldr	r3, .L76+4
 1518 000e 1B68     		ldr	r3, [r3]
 1519 0010 002B     		cmp	r3, #0
 1520 0012 04D0     		beq	.L72
 605:.\main.c      ****             updateSensorValues();
 1521              		.loc 1 605 0
 1522 0014 FFF7FEFF 		bl	updateSensorValues
 606:.\main.c      ****             adc_flag = FALSE;
 1523              		.loc 1 606 0
 1524 0018 184B     		ldr	r3, .L76+4
 1525 001a 0022     		movs	r2, #0
 1526 001c 1A60     		str	r2, [r3]
 1527              	.L72:
 603:.\main.c      ****         if (adc_flag) {
 1528              		.loc 1 603 0
 1529 001e 184B     		ldr	r3, .L76+8
 1530 0020 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1531 0022 002B     		cmp	r3, #0
 1532 0024 F2D0     		beq	.L73
 607:.\main.c      ****         }
 608:.\main.c      ****     }
 609:.\main.c      ****     
 610:.\main.c      ****     usbPutString(" - turn 45");
 1533              		.loc 1 610 0
 1534 0026 1748     		ldr	r0, .L76+12
 1535 0028 FFF7FEFF 		bl	usbPutString
 611:.\main.c      ****     
 612:.\main.c      ****     // make the turn
 613:.\main.c      ****     setWheelDirection(FALSE, TRUE);
 1536              		.loc 1 613 0
 1537 002c 0020     		movs	r0, #0
 1538 002e 0121     		movs	r1, #1
 1539 0030 FFF7FEFF 		bl	setWheelDirection
 614:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1540              		.loc 1 614 0
 1541 0034 4FF4E170 		mov	r0, #450
 1542 0038 FFF7FEFF 		bl	PWM_1_WriteCompare
 615:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1543              		.loc 1 615 0
 1544 003c 4FF4E170 		mov	r0, #450
 1545 0040 FFF7FEFF 		bl	PWM_2_WriteCompare
 616:.\main.c      ****     
 617:.\main.c      ****     turnForDegrees(45); // so that it doesn't stop if it's already on a line
 1546              		.loc 1 617 0
 1547 0044 2D20     		movs	r0, #45
 1548 0046 FFF7FEFF 		bl	turnForDegrees
 618:.\main.c      ****     
 619:.\main.c      ****     usbPutString(" - finish turn");
 1549              		.loc 1 619 0
 1550 004a 0F48     		ldr	r0, .L76+16
 1551 004c FFF7FEFF 		bl	usbPutString
 620:.\main.c      ****     
 621:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1552              		.loc 1 621 0
 1553 0050 08E0     		b	.L74
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 40


 1554              	.L75:
 622:.\main.c      ****         if (adc_flag) {
 1555              		.loc 1 622 0
 1556 0052 0A4B     		ldr	r3, .L76+4
 1557 0054 1B68     		ldr	r3, [r3]
 1558 0056 002B     		cmp	r3, #0
 1559 0058 04D0     		beq	.L74
 623:.\main.c      ****             updateSensorValues();
 1560              		.loc 1 623 0
 1561 005a FFF7FEFF 		bl	updateSensorValues
 624:.\main.c      ****             adc_flag = FALSE;
 1562              		.loc 1 624 0
 1563 005e 074B     		ldr	r3, .L76+4
 1564 0060 0022     		movs	r2, #0
 1565 0062 1A60     		str	r2, [r3]
 1566              	.L74:
 621:.\main.c      ****         if (adc_flag) {
 1567              		.loc 1 621 0
 1568 0064 064B     		ldr	r3, .L76+8
 1569 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1570 0068 002B     		cmp	r3, #0
 1571 006a F2D0     		beq	.L75
 625:.\main.c      ****         }
 626:.\main.c      ****     }
 627:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1572              		.loc 1 627 0
 1573 006c 0120     		movs	r0, #1
 1574 006e 0121     		movs	r1, #1
 1575 0070 FFF7FEFF 		bl	setWheelDirection
 628:.\main.c      **** }
 1576              		.loc 1 628 0
 1577 0074 80BD     		pop	{r7, pc}
 1578              	.L77:
 1579 0076 00BF     		.align	2
 1580              	.L76:
 1581 0078 70000000 		.word	.LC7
 1582 007c 00000000 		.word	adc_flag
 1583 0080 00000000 		.word	sensor_readings
 1584 0084 7C000000 		.word	.LC8
 1585 0088 88000000 		.word	.LC9
 1586              		.cfi_endproc
 1587              	.LFE77:
 1588              		.size	sharpTurnLeft, .-sharpTurnLeft
 1589              		.section	.text.sharpTurnRight,"ax",%progbits
 1590              		.align	2
 1591              		.global	sharpTurnRight
 1592              		.thumb
 1593              		.thumb_func
 1594              		.type	sharpTurnRight, %function
 1595              	sharpTurnRight:
 1596              	.LFB78:
 629:.\main.c      **** 
 630:.\main.c      **** void sharpTurnRight() {
 1597              		.loc 1 630 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 41


 1601 0000 80B5     		push	{r7, lr}
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 7, -8
 1604              		.cfi_offset 14, -4
 1605 0002 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 631:.\main.c      ****     usbPutString(" - forward");
 1607              		.loc 1 631 0
 1608 0004 1C48     		ldr	r0, .L83
 1609 0006 FFF7FEFF 		bl	usbPutString
 632:.\main.c      ****     
 633:.\main.c      ****     // go until we reach the line
 634:.\main.c      ****     while (!sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 1610              		.loc 1 634 0
 1611 000a 08E0     		b	.L79
 1612              	.L80:
 635:.\main.c      ****         if (adc_flag) {
 1613              		.loc 1 635 0
 1614 000c 1B4B     		ldr	r3, .L83+4
 1615 000e 1B68     		ldr	r3, [r3]
 1616 0010 002B     		cmp	r3, #0
 1617 0012 04D0     		beq	.L79
 636:.\main.c      ****             updateSensorValues();
 1618              		.loc 1 636 0
 1619 0014 FFF7FEFF 		bl	updateSensorValues
 637:.\main.c      ****             adc_flag = FALSE;
 1620              		.loc 1 637 0
 1621 0018 184B     		ldr	r3, .L83+4
 1622 001a 0022     		movs	r2, #0
 1623 001c 1A60     		str	r2, [r3]
 1624              	.L79:
 634:.\main.c      ****         if (adc_flag) {
 1625              		.loc 1 634 0
 1626 001e 184B     		ldr	r3, .L83+8
 1627 0020 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1628 0022 002B     		cmp	r3, #0
 1629 0024 F2D0     		beq	.L80
 638:.\main.c      ****         }
 639:.\main.c      ****     }
 640:.\main.c      ****     
 641:.\main.c      ****     usbPutString(" - turn 45");
 1630              		.loc 1 641 0
 1631 0026 1748     		ldr	r0, .L83+12
 1632 0028 FFF7FEFF 		bl	usbPutString
 642:.\main.c      ****     
 643:.\main.c      ****     // make the turn
 644:.\main.c      ****     setWheelDirection(TRUE, FALSE);
 1633              		.loc 1 644 0
 1634 002c 0120     		movs	r0, #1
 1635 002e 0021     		movs	r1, #0
 1636 0030 FFF7FEFF 		bl	setWheelDirection
 645:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1637              		.loc 1 645 0
 1638 0034 4FF4E170 		mov	r0, #450
 1639 0038 FFF7FEFF 		bl	PWM_1_WriteCompare
 646:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1640              		.loc 1 646 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 42


 1641 003c 4FF4E170 		mov	r0, #450
 1642 0040 FFF7FEFF 		bl	PWM_2_WriteCompare
 647:.\main.c      ****     
 648:.\main.c      ****     turnForDegrees(45); // so that it doesn't stop if it's already on a line
 1643              		.loc 1 648 0
 1644 0044 2D20     		movs	r0, #45
 1645 0046 FFF7FEFF 		bl	turnForDegrees
 649:.\main.c      ****     
 650:.\main.c      ****     usbPutString(" - finish turn");
 1646              		.loc 1 650 0
 1647 004a 0F48     		ldr	r0, .L83+16
 1648 004c FFF7FEFF 		bl	usbPutString
 651:.\main.c      ****     
 652:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1649              		.loc 1 652 0
 1650 0050 08E0     		b	.L81
 1651              	.L82:
 653:.\main.c      ****         if (adc_flag) {
 1652              		.loc 1 653 0
 1653 0052 0A4B     		ldr	r3, .L83+4
 1654 0054 1B68     		ldr	r3, [r3]
 1655 0056 002B     		cmp	r3, #0
 1656 0058 04D0     		beq	.L81
 654:.\main.c      ****             updateSensorValues();
 1657              		.loc 1 654 0
 1658 005a FFF7FEFF 		bl	updateSensorValues
 655:.\main.c      ****             adc_flag = FALSE;
 1659              		.loc 1 655 0
 1660 005e 074B     		ldr	r3, .L83+4
 1661 0060 0022     		movs	r2, #0
 1662 0062 1A60     		str	r2, [r3]
 1663              	.L81:
 652:.\main.c      ****         if (adc_flag) {
 1664              		.loc 1 652 0
 1665 0064 064B     		ldr	r3, .L83+8
 1666 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1667 0068 002B     		cmp	r3, #0
 1668 006a F2D0     		beq	.L82
 656:.\main.c      ****         }
 657:.\main.c      ****     }
 658:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1669              		.loc 1 658 0
 1670 006c 0120     		movs	r0, #1
 1671 006e 0121     		movs	r1, #1
 1672 0070 FFF7FEFF 		bl	setWheelDirection
 659:.\main.c      **** }
 1673              		.loc 1 659 0
 1674 0074 80BD     		pop	{r7, pc}
 1675              	.L84:
 1676 0076 00BF     		.align	2
 1677              	.L83:
 1678 0078 70000000 		.word	.LC7
 1679 007c 00000000 		.word	adc_flag
 1680 0080 00000000 		.word	sensor_readings
 1681 0084 7C000000 		.word	.LC8
 1682 0088 88000000 		.word	.LC9
 1683              		.cfi_endproc
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 43


 1684              	.LFE78:
 1685              		.size	sharpTurnRight, .-sharpTurnRight
 1686              		.section	.text.usbPutString,"ax",%progbits
 1687              		.align	2
 1688              		.global	usbPutString
 1689              		.thumb
 1690              		.thumb_func
 1691              		.type	usbPutString, %function
 1692              	usbPutString:
 1693              	.LFB79:
 660:.\main.c      **** //* ================== UNUSED FUNCTIONS ======================
 661:.\main.c      **** 
 662:.\main.c      **** /*
 663:.\main.c      **** * Function for performing a 90 degree turn
 664:.\main.c      **** * returns true once finished
 665:.\main.c      **** */
 666:.\main.c      **** //int8 performTurn(int isLeft){
 667:.\main.c      **** //    // Reset decoder measurements
 668:.\main.c      **** //    QuadDec_M1_SetCounter(0);
 669:.\main.c      **** //    QuadDec_M2_SetCounter(0);
 670:.\main.c      **** //    
 671:.\main.c      **** //    int M1_count, M2_count = 0;
 672:.\main.c      **** //    
 673:.\main.c      **** //    // Set PWMs to rotate
 674:.\main.c      **** //    PWM_1_WriteCompare(TURN_PWM_VAL);
 675:.\main.c      **** //    PWM_2_WriteCompare(TURN_PWM_VAL);
 676:.\main.c      **** //    
 677:.\main.c      **** //    // Set wheel direction for rotating on the spot
 678:.\main.c      **** //    if (isLeft){
 679:.\main.c      **** //        // left wheel moves backwarsd, right moves forwards
 680:.\main.c      **** //        setWheelDirection(FALSE, TRUE);}
 681:.\main.c      **** //    else {
 682:.\main.c      **** //        // right wheel moves forwards, left moves backwards
 683:.\main.c      **** //        setWheelDirection(TRUE, FALSE);
 684:.\main.c      **** //    }
 685:.\main.c      **** //    
 686:.\main.c      **** //    while (M1_count < TICKS_FOR_TURN || M2_count < TICKS_FOR_TURN) {
 687:.\main.c      **** //        M1_count = QuadDec_M1_GetCounter();
 688:.\main.c      **** //        M2_count = QuadDec_M2_GetCounter();
 689:.\main.c      **** //    }
 690:.\main.c      **** //    
 691:.\main.c      **** //    PWM_1_WriteCompare(0);
 692:.\main.c      **** //    PWM_2_WriteCompare(0);
 693:.\main.c      **** //    
 694:.\main.c      **** //    return TRUE;
 695:.\main.c      **** //}
 696:.\main.c      **** 
 697:.\main.c      **** 
 698:.\main.c      **** //* ========================================
 699:.\main.c      **** void usbPutString(char *s)
 700:.\main.c      **** {
 1694              		.loc 1 700 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 8
 1697              		@ frame_needed = 1, uses_anonymous_args = 0
 1698 0000 80B5     		push	{r7, lr}
 1699              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 44


 1700              		.cfi_offset 7, -8
 1701              		.cfi_offset 14, -4
 1702 0002 82B0     		sub	sp, sp, #8
 1703              		.cfi_def_cfa_offset 16
 1704 0004 00AF     		add	r7, sp, #0
 1705              		.cfi_def_cfa_register 7
 1706 0006 7860     		str	r0, [r7, #4]
 701:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
 702:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
 703:.\main.c      **** //  length to 62 char (63rd char is a '!')
 704:.\main.c      ****     
 705:.\main.c      **** #ifdef PUTTY
 706:.\main.c      ****     while (USBUART_CDCIsReady() == 0){ };
 1707              		.loc 1 706 0
 1708 0008 00BF     		nop
 1709              	.L86:
 1710              		.loc 1 706 0 is_stmt 0 discriminator 1
 1711 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 1712 000e 0346     		mov	r3, r0
 1713 0010 002B     		cmp	r3, #0
 1714 0012 FAD0     		beq	.L86
 707:.\main.c      ****     USBUART_PutData((uint8 *)s, strlen(s));
 1715              		.loc 1 707 0 is_stmt 1
 1716 0014 7868     		ldr	r0, [r7, #4]
 1717 0016 FFF7FEFF 		bl	strlen
 1718 001a 0346     		mov	r3, r0
 1719 001c 9BB2     		uxth	r3, r3
 1720 001e 7868     		ldr	r0, [r7, #4]
 1721 0020 1946     		mov	r1, r3
 1722 0022 FFF7FEFF 		bl	USBUART_PutData
 708:.\main.c      **** #endif
 709:.\main.c      ****     (void)s;
 710:.\main.c      ****     return;
 1723              		.loc 1 710 0
 1724 0026 00BF     		nop
 711:.\main.c      **** }
 1725              		.loc 1 711 0
 1726 0028 0837     		adds	r7, r7, #8
 1727              		.cfi_def_cfa_offset 8
 1728 002a BD46     		mov	sp, r7
 1729              		.cfi_def_cfa_register 13
 1730              		@ sp needed
 1731 002c 80BD     		pop	{r7, pc}
 1732              		.cfi_endproc
 1733              	.LFE79:
 1734              		.size	usbPutString, .-usbPutString
 1735 002e 00BF     		.text
 1736              	.Letext0:
 1737              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1738              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1739              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1740              		.file 5 ".\\vars.h"
 1741              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1742              		.section	.debug_info,"",%progbits
 1743              	.Ldebug_info0:
 1744 0000 FF070000 		.4byte	0x7ff
 1745 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 45


 1746 0006 00000000 		.4byte	.Ldebug_abbrev0
 1747 000a 04       		.byte	0x4
 1748 000b 01       		.uleb128 0x1
 1749 000c 8B020000 		.4byte	.LASF116
 1750 0010 01       		.byte	0x1
 1751 0011 69060000 		.4byte	.LASF117
 1752 0015 32040000 		.4byte	.LASF118
 1753 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1754 001d 00000000 		.4byte	0
 1755 0021 00000000 		.4byte	.Ldebug_line0
 1756 0025 02       		.uleb128 0x2
 1757 0026 01       		.byte	0x1
 1758 0027 06       		.byte	0x6
 1759 0028 E4050000 		.4byte	.LASF0
 1760 002c 02       		.uleb128 0x2
 1761 002d 01       		.byte	0x1
 1762 002e 08       		.byte	0x8
 1763 002f 61050000 		.4byte	.LASF1
 1764 0033 02       		.uleb128 0x2
 1765 0034 02       		.byte	0x2
 1766 0035 05       		.byte	0x5
 1767 0036 C6030000 		.4byte	.LASF2
 1768 003a 02       		.uleb128 0x2
 1769 003b 02       		.byte	0x2
 1770 003c 07       		.byte	0x7
 1771 003d F0050000 		.4byte	.LASF3
 1772 0041 03       		.uleb128 0x3
 1773 0042 5D000000 		.4byte	.LASF11
 1774 0046 02       		.byte	0x2
 1775 0047 3F       		.byte	0x3f
 1776 0048 4C000000 		.4byte	0x4c
 1777 004c 02       		.uleb128 0x2
 1778 004d 04       		.byte	0x4
 1779 004e 05       		.byte	0x5
 1780 004f EF030000 		.4byte	.LASF4
 1781 0053 02       		.uleb128 0x2
 1782 0054 04       		.byte	0x4
 1783 0055 07       		.byte	0x7
 1784 0056 10050000 		.4byte	.LASF5
 1785 005a 02       		.uleb128 0x2
 1786 005b 08       		.byte	0x8
 1787 005c 05       		.byte	0x5
 1788 005d 59020000 		.4byte	.LASF6
 1789 0061 02       		.uleb128 0x2
 1790 0062 08       		.byte	0x8
 1791 0063 07       		.byte	0x7
 1792 0064 5A010000 		.4byte	.LASF7
 1793 0068 04       		.uleb128 0x4
 1794 0069 04       		.byte	0x4
 1795 006a 05       		.byte	0x5
 1796 006b 696E7400 		.ascii	"int\000"
 1797 006f 02       		.uleb128 0x2
 1798 0070 04       		.byte	0x4
 1799 0071 07       		.byte	0x7
 1800 0072 42000000 		.4byte	.LASF8
 1801 0076 02       		.uleb128 0x2
 1802 0077 04       		.byte	0x4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 46


 1803 0078 07       		.byte	0x7
 1804 0079 FC040000 		.4byte	.LASF9
 1805 007d 05       		.uleb128 0x5
 1806 007e 04       		.byte	0x4
 1807 007f 83000000 		.4byte	0x83
 1808 0083 02       		.uleb128 0x2
 1809 0084 01       		.byte	0x1
 1810 0085 08       		.byte	0x8
 1811 0086 F7010000 		.4byte	.LASF10
 1812 008a 06       		.uleb128 0x6
 1813 008b 83000000 		.4byte	0x83
 1814 008f 9A000000 		.4byte	0x9a
 1815 0093 07       		.uleb128 0x7
 1816 0094 76000000 		.4byte	0x76
 1817 0098 07       		.byte	0x7
 1818 0099 00       		.byte	0
 1819 009a 03       		.uleb128 0x3
 1820 009b 3A050000 		.4byte	.LASF12
 1821 009f 03       		.byte	0x3
 1822 00a0 2C       		.byte	0x2c
 1823 00a1 41000000 		.4byte	0x41
 1824 00a5 08       		.uleb128 0x8
 1825 00a6 31060000 		.4byte	.LASF13
 1826 00aa 04       		.byte	0x4
 1827 00ab 9201     		.2byte	0x192
 1828 00ad 2C000000 		.4byte	0x2c
 1829 00b1 08       		.uleb128 0x8
 1830 00b2 0F020000 		.4byte	.LASF14
 1831 00b6 04       		.byte	0x4
 1832 00b7 9301     		.2byte	0x193
 1833 00b9 3A000000 		.4byte	0x3a
 1834 00bd 08       		.uleb128 0x8
 1835 00be 16020000 		.4byte	.LASF15
 1836 00c2 04       		.byte	0x4
 1837 00c3 9501     		.2byte	0x195
 1838 00c5 25000000 		.4byte	0x25
 1839 00c9 08       		.uleb128 0x8
 1840 00ca 67000000 		.4byte	.LASF16
 1841 00ce 04       		.byte	0x4
 1842 00cf 9601     		.2byte	0x196
 1843 00d1 33000000 		.4byte	0x33
 1844 00d5 08       		.uleb128 0x8
 1845 00d6 27010000 		.4byte	.LASF17
 1846 00da 04       		.byte	0x4
 1847 00db 9701     		.2byte	0x197
 1848 00dd 4C000000 		.4byte	0x4c
 1849 00e1 02       		.uleb128 0x2
 1850 00e2 04       		.byte	0x4
 1851 00e3 04       		.byte	0x4
 1852 00e4 0F010000 		.4byte	.LASF18
 1853 00e8 02       		.uleb128 0x2
 1854 00e9 08       		.byte	0x8
 1855 00ea 04       		.byte	0x4
 1856 00eb 37060000 		.4byte	.LASF19
 1857 00ef 09       		.uleb128 0x9
 1858 00f0 51030000 		.4byte	.LASF119
 1859 00f4 20       		.byte	0x20
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 47


 1860 00f5 05       		.byte	0x5
 1861 00f6 29       		.byte	0x29
 1862 00f7 C8010000 		.4byte	0x1c8
 1863 00fb 0A       		.uleb128 0xa
 1864 00fc 6C030000 		.4byte	.LASF20
 1865 0100 05       		.byte	0x5
 1866 0101 2A       		.byte	0x2a
 1867 0102 BD000000 		.4byte	0xbd
 1868 0106 00       		.byte	0
 1869 0107 0A       		.uleb128 0xa
 1870 0108 33010000 		.4byte	.LASF21
 1871 010c 05       		.byte	0x5
 1872 010d 2B       		.byte	0x2b
 1873 010e A5000000 		.4byte	0xa5
 1874 0112 01       		.byte	0x1
 1875 0113 0A       		.uleb128 0xa
 1876 0114 42050000 		.4byte	.LASF22
 1877 0118 05       		.byte	0x5
 1878 0119 2C       		.byte	0x2c
 1879 011a C9000000 		.4byte	0xc9
 1880 011e 02       		.byte	0x2
 1881 011f 0A       		.uleb128 0xa
 1882 0120 E1010000 		.4byte	.LASF23
 1883 0124 05       		.byte	0x5
 1884 0125 2D       		.byte	0x2d
 1885 0126 C9000000 		.4byte	0xc9
 1886 012a 04       		.byte	0x4
 1887 012b 0A       		.uleb128 0xa
 1888 012c 1A060000 		.4byte	.LASF24
 1889 0130 05       		.byte	0x5
 1890 0131 2E       		.byte	0x2e
 1891 0132 C9000000 		.4byte	0xc9
 1892 0136 06       		.byte	0x6
 1893 0137 0A       		.uleb128 0xa
 1894 0138 49060000 		.4byte	.LASF25
 1895 013c 05       		.byte	0x5
 1896 013d 2F       		.byte	0x2f
 1897 013e C9000000 		.4byte	0xc9
 1898 0142 08       		.byte	0x8
 1899 0143 0A       		.uleb128 0xa
 1900 0144 22030000 		.4byte	.LASF26
 1901 0148 05       		.byte	0x5
 1902 0149 30       		.byte	0x30
 1903 014a C9000000 		.4byte	0xc9
 1904 014e 0A       		.byte	0xa
 1905 014f 0A       		.uleb128 0xa
 1906 0150 06020000 		.4byte	.LASF27
 1907 0154 05       		.byte	0x5
 1908 0155 31       		.byte	0x31
 1909 0156 C9000000 		.4byte	0xc9
 1910 015a 0C       		.byte	0xc
 1911 015b 0A       		.uleb128 0xa
 1912 015c 71030000 		.4byte	.LASF28
 1913 0160 05       		.byte	0x5
 1914 0161 32       		.byte	0x32
 1915 0162 C9000000 		.4byte	0xc9
 1916 0166 0E       		.byte	0xe
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 48


 1917 0167 0A       		.uleb128 0xa
 1918 0168 72020000 		.4byte	.LASF29
 1919 016c 05       		.byte	0x5
 1920 016d 33       		.byte	0x33
 1921 016e C9000000 		.4byte	0xc9
 1922 0172 10       		.byte	0x10
 1923 0173 0A       		.uleb128 0xa
 1924 0174 DE040000 		.4byte	.LASF30
 1925 0178 05       		.byte	0x5
 1926 0179 34       		.byte	0x34
 1927 017a C9000000 		.4byte	0xc9
 1928 017e 12       		.byte	0x12
 1929 017f 0A       		.uleb128 0xa
 1930 0180 60060000 		.4byte	.LASF31
 1931 0184 05       		.byte	0x5
 1932 0185 35       		.byte	0x35
 1933 0186 C9000000 		.4byte	0xc9
 1934 018a 14       		.byte	0x14
 1935 018b 0A       		.uleb128 0xa
 1936 018c 1B020000 		.4byte	.LASF32
 1937 0190 05       		.byte	0x5
 1938 0191 36       		.byte	0x36
 1939 0192 C9000000 		.4byte	0xc9
 1940 0196 16       		.byte	0x16
 1941 0197 0A       		.uleb128 0xa
 1942 0198 90000000 		.4byte	.LASF33
 1943 019c 05       		.byte	0x5
 1944 019d 37       		.byte	0x37
 1945 019e C9000000 		.4byte	0xc9
 1946 01a2 18       		.byte	0x18
 1947 01a3 0A       		.uleb128 0xa
 1948 01a4 18040000 		.4byte	.LASF34
 1949 01a8 05       		.byte	0x5
 1950 01a9 38       		.byte	0x38
 1951 01aa C9000000 		.4byte	0xc9
 1952 01ae 1A       		.byte	0x1a
 1953 01af 0A       		.uleb128 0xa
 1954 01b0 19030000 		.4byte	.LASF35
 1955 01b4 05       		.byte	0x5
 1956 01b5 39       		.byte	0x39
 1957 01b6 C9000000 		.4byte	0xc9
 1958 01ba 1C       		.byte	0x1c
 1959 01bb 0A       		.uleb128 0xa
 1960 01bc 02010000 		.4byte	.LASF36
 1961 01c0 05       		.byte	0x5
 1962 01c1 3A       		.byte	0x3a
 1963 01c2 C9000000 		.4byte	0xc9
 1964 01c6 1E       		.byte	0x1e
 1965 01c7 00       		.byte	0
 1966 01c8 0B       		.uleb128 0xb
 1967 01c9 29000000 		.4byte	.LASF46
 1968 01cd 01       		.byte	0x1
 1969 01ce 01       		.byte	0x1
 1970 01cf 42       		.byte	0x42
 1971 01d0 0B020000 		.4byte	0x20b
 1972 01d4 0C       		.uleb128 0xc
 1973 01d5 52010000 		.4byte	.LASF37
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 49


 1974 01d9 00       		.sleb128 0
 1975 01da 0C       		.uleb128 0xc
 1976 01db 90010000 		.4byte	.LASF38
 1977 01df 01       		.sleb128 1
 1978 01e0 0C       		.uleb128 0xc
 1979 01e1 39030000 		.4byte	.LASF39
 1980 01e5 02       		.sleb128 2
 1981 01e6 0C       		.uleb128 0xc
 1982 01e7 DD000000 		.4byte	.LASF40
 1983 01eb 03       		.sleb128 3
 1984 01ec 0C       		.uleb128 0xc
 1985 01ed BC040000 		.4byte	.LASF41
 1986 01f1 04       		.sleb128 4
 1987 01f2 0C       		.uleb128 0xc
 1988 01f3 0F060000 		.4byte	.LASF42
 1989 01f7 05       		.sleb128 5
 1990 01f8 0C       		.uleb128 0xc
 1991 01f9 E6040000 		.4byte	.LASF43
 1992 01fd 06       		.sleb128 6
 1993 01fe 0C       		.uleb128 0xc
 1994 01ff B3050000 		.4byte	.LASF44
 1995 0203 07       		.sleb128 7
 1996 0204 0C       		.uleb128 0xc
 1997 0205 15000000 		.4byte	.LASF45
 1998 0209 08       		.sleb128 8
 1999 020a 00       		.byte	0
 2000 020b 03       		.uleb128 0x3
 2001 020c 29000000 		.4byte	.LASF46
 2002 0210 01       		.byte	0x1
 2003 0211 4C       		.byte	0x4c
 2004 0212 C8010000 		.4byte	0x1c8
 2005 0216 0D       		.uleb128 0xd
 2006 0217 D2040000 		.4byte	.LASF47
 2007 021b 01       		.byte	0x1
 2008 021c 70       		.byte	0x70
 2009 021d 00000000 		.4byte	.LFB63
 2010 0221 30000000 		.4byte	.LFE63-.LFB63
 2011 0225 01       		.uleb128 0x1
 2012 0226 9C       		.byte	0x9c
 2013 0227 0E       		.uleb128 0xe
 2014 0228 CE050000 		.4byte	.LASF48
 2015 022c 01       		.byte	0x1
 2016 022d 77       		.byte	0x77
 2017 022e 00000000 		.4byte	.LFB64
 2018 0232 18000000 		.4byte	.LFE64-.LFB64
 2019 0236 01       		.uleb128 0x1
 2020 0237 9C       		.byte	0x9c
 2021 0238 0F       		.uleb128 0xf
 2022 0239 2C060000 		.4byte	.LASF56
 2023 023d 01       		.byte	0x1
 2024 023e 8C       		.byte	0x8c
 2025 023f 68000000 		.4byte	0x68
 2026 0243 00000000 		.4byte	.LFB65
 2027 0247 34010000 		.4byte	.LFE65-.LFB65
 2028 024b 01       		.uleb128 0x1
 2029 024c 9C       		.byte	0x9c
 2030 024d C9020000 		.4byte	0x2c9
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 50


 2031 0251 10       		.uleb128 0x10
 2032 0252 20040000 		.4byte	.LASF49
 2033 0256 01       		.byte	0x1
 2034 0257 B2       		.byte	0xb2
 2035 0258 68000000 		.4byte	0x68
 2036 025c 02       		.uleb128 0x2
 2037 025d 91       		.byte	0x91
 2038 025e 64       		.sleb128 -28
 2039 025f 10       		.uleb128 0x10
 2040 0260 D0010000 		.4byte	.LASF50
 2041 0264 01       		.byte	0x1
 2042 0265 B3       		.byte	0xb3
 2043 0266 68000000 		.4byte	0x68
 2044 026a 02       		.uleb128 0x2
 2045 026b 91       		.byte	0x91
 2046 026c 60       		.sleb128 -32
 2047 026d 10       		.uleb128 0x10
 2048 026e 2C050000 		.4byte	.LASF51
 2049 0272 01       		.byte	0x1
 2050 0273 B4       		.byte	0xb4
 2051 0274 68000000 		.4byte	0x68
 2052 0278 02       		.uleb128 0x2
 2053 0279 91       		.byte	0x91
 2054 027a 70       		.sleb128 -16
 2055 027b 11       		.uleb128 0x11
 2056 027c C8050000 		.4byte	.LASF120
 2057 0280 01       		.byte	0x1
 2058 0281 B6       		.byte	0xb6
 2059 0282 0B020000 		.4byte	0x20b
 2060 0286 10       		.uleb128 0x10
 2061 0287 67020000 		.4byte	.LASF52
 2062 028b 01       		.byte	0x1
 2063 028c B7       		.byte	0xb7
 2064 028d 0B020000 		.4byte	0x20b
 2065 0291 02       		.uleb128 0x2
 2066 0292 91       		.byte	0x91
 2067 0293 6F       		.sleb128 -17
 2068 0294 10       		.uleb128 0x10
 2069 0295 F7000000 		.4byte	.LASF53
 2070 0299 01       		.byte	0x1
 2071 029a BA       		.byte	0xba
 2072 029b 8A000000 		.4byte	0x8a
 2073 029f 02       		.uleb128 0x2
 2074 02a0 91       		.byte	0x91
 2075 02a1 58       		.sleb128 -40
 2076 02a2 10       		.uleb128 0x10
 2077 02a3 9C050000 		.4byte	.LASF54
 2078 02a7 01       		.byte	0x1
 2079 02a8 BB       		.byte	0xbb
 2080 02a9 68000000 		.4byte	0x68
 2081 02ad 02       		.uleb128 0x2
 2082 02ae 91       		.byte	0x91
 2083 02af 74       		.sleb128 -12
 2084 02b0 12       		.uleb128 0x12
 2085 02b1 C0000000 		.4byte	.LBB2
 2086 02b5 32000000 		.4byte	.LBE2-.LBB2
 2087 02b9 10       		.uleb128 0x10
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 51


 2088 02ba 7E030000 		.4byte	.LASF55
 2089 02be 01       		.byte	0x1
 2090 02bf C6       		.byte	0xc6
 2091 02c0 68000000 		.4byte	0x68
 2092 02c4 02       		.uleb128 0x2
 2093 02c5 91       		.byte	0x91
 2094 02c6 68       		.sleb128 -24
 2095 02c7 00       		.byte	0
 2096 02c8 00       		.byte	0
 2097 02c9 13       		.uleb128 0x13
 2098 02ca 3E060000 		.4byte	.LASF57
 2099 02ce 01       		.byte	0x1
 2100 02cf 7F01     		.2byte	0x17f
 2101 02d1 00000000 		.4byte	.LFB66
 2102 02d5 08020000 		.4byte	.LFE66-.LFB66
 2103 02d9 01       		.uleb128 0x1
 2104 02da 9C       		.byte	0x9c
 2105 02db 2B030000 		.4byte	0x32b
 2106 02df 14       		.uleb128 0x14
 2107 02e0 31020000 		.4byte	.LASF58
 2108 02e4 01       		.byte	0x1
 2109 02e5 7F01     		.2byte	0x17f
 2110 02e7 68000000 		.4byte	0x68
 2111 02eb 02       		.uleb128 0x2
 2112 02ec 91       		.byte	0x91
 2113 02ed 4C       		.sleb128 -52
 2114 02ee 14       		.uleb128 0x14
 2115 02ef 20040000 		.4byte	.LASF49
 2116 02f3 01       		.byte	0x1
 2117 02f4 7F01     		.2byte	0x17f
 2118 02f6 2B030000 		.4byte	0x32b
 2119 02fa 02       		.uleb128 0x2
 2120 02fb 91       		.byte	0x91
 2121 02fc 48       		.sleb128 -56
 2122 02fd 14       		.uleb128 0x14
 2123 02fe D0010000 		.4byte	.LASF50
 2124 0302 01       		.byte	0x1
 2125 0303 7F01     		.2byte	0x17f
 2126 0305 2B030000 		.4byte	0x32b
 2127 0309 02       		.uleb128 0x2
 2128 030a 91       		.byte	0x91
 2129 030b 44       		.sleb128 -60
 2130 030c 15       		.uleb128 0x15
 2131 030d 62756600 		.ascii	"buf\000"
 2132 0311 01       		.byte	0x1
 2133 0312 8101     		.2byte	0x181
 2134 0314 31030000 		.4byte	0x331
 2135 0318 02       		.uleb128 0x2
 2136 0319 91       		.byte	0x91
 2137 031a 54       		.sleb128 -44
 2138 031b 16       		.uleb128 0x16
 2139 031c 0F040000 		.4byte	.LASF59
 2140 0320 01       		.byte	0x1
 2141 0321 8B01     		.2byte	0x18b
 2142 0323 E1000000 		.4byte	0xe1
 2143 0327 02       		.uleb128 0x2
 2144 0328 91       		.byte	0x91
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 52


 2145 0329 74       		.sleb128 -12
 2146 032a 00       		.byte	0
 2147 032b 05       		.uleb128 0x5
 2148 032c 04       		.byte	0x4
 2149 032d 68000000 		.4byte	0x68
 2150 0331 06       		.uleb128 0x6
 2151 0332 83000000 		.4byte	0x83
 2152 0336 41030000 		.4byte	0x341
 2153 033a 07       		.uleb128 0x7
 2154 033b 76000000 		.4byte	0x76
 2155 033f 1F       		.byte	0x1f
 2156 0340 00       		.byte	0
 2157 0341 17       		.uleb128 0x17
 2158 0342 F0040000 		.4byte	.LASF68
 2159 0346 01       		.byte	0x1
 2160 0347 CE01     		.2byte	0x1ce
 2161 0349 E1000000 		.4byte	0xe1
 2162 034d 00000000 		.4byte	.LFB67
 2163 0351 CC000000 		.4byte	.LFE67-.LFB67
 2164 0355 01       		.uleb128 0x1
 2165 0356 9C       		.byte	0x9c
 2166 0357 98030000 		.4byte	0x398
 2167 035b 14       		.uleb128 0x14
 2168 035c 89030000 		.4byte	.LASF60
 2169 0360 01       		.byte	0x1
 2170 0361 CE01     		.2byte	0x1ce
 2171 0363 68000000 		.4byte	0x68
 2172 0367 02       		.uleb128 0x2
 2173 0368 91       		.byte	0x91
 2174 0369 6C       		.sleb128 -20
 2175 036a 14       		.uleb128 0x14
 2176 036b 95030000 		.4byte	.LASF61
 2177 036f 01       		.byte	0x1
 2178 0370 CE01     		.2byte	0x1ce
 2179 0372 68000000 		.4byte	0x68
 2180 0376 02       		.uleb128 0x2
 2181 0377 91       		.byte	0x91
 2182 0378 68       		.sleb128 -24
 2183 0379 16       		.uleb128 0x16
 2184 037a 6F050000 		.4byte	.LASF62
 2185 037e 01       		.byte	0x1
 2186 037f CF01     		.2byte	0x1cf
 2187 0381 E1000000 		.4byte	0xe1
 2188 0385 02       		.uleb128 0x2
 2189 0386 91       		.byte	0x91
 2190 0387 74       		.sleb128 -12
 2191 0388 16       		.uleb128 0x16
 2192 0389 42020000 		.4byte	.LASF63
 2193 038d 01       		.byte	0x1
 2194 038e D001     		.2byte	0x1d0
 2195 0390 E1000000 		.4byte	0xe1
 2196 0394 02       		.uleb128 0x2
 2197 0395 91       		.byte	0x91
 2198 0396 70       		.sleb128 -16
 2199 0397 00       		.byte	0
 2200 0398 13       		.uleb128 0x13
 2201 0399 E0030000 		.4byte	.LASF64
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 53


 2202 039d 01       		.byte	0x1
 2203 039e D401     		.2byte	0x1d4
 2204 03a0 00000000 		.4byte	.LFB68
 2205 03a4 98000000 		.4byte	.LFE68-.LFB68
 2206 03a8 01       		.uleb128 0x1
 2207 03a9 9C       		.byte	0x9c
 2208 03aa DC030000 		.4byte	0x3dc
 2209 03ae 14       		.uleb128 0x14
 2210 03af 1A000000 		.4byte	.LASF65
 2211 03b3 01       		.byte	0x1
 2212 03b4 D401     		.2byte	0x1d4
 2213 03b6 68000000 		.4byte	0x68
 2214 03ba 02       		.uleb128 0x2
 2215 03bb 91       		.byte	0x91
 2216 03bc 6C       		.sleb128 -20
 2217 03bd 16       		.uleb128 0x16
 2218 03be 7A020000 		.4byte	.LASF66
 2219 03c2 01       		.byte	0x1
 2220 03c3 D501     		.2byte	0x1d5
 2221 03c5 E1000000 		.4byte	0xe1
 2222 03c9 02       		.uleb128 0x2
 2223 03ca 91       		.byte	0x91
 2224 03cb 70       		.sleb128 -16
 2225 03cc 16       		.uleb128 0x16
 2226 03cd A3000000 		.4byte	.LASF67
 2227 03d1 01       		.byte	0x1
 2228 03d2 D601     		.2byte	0x1d6
 2229 03d4 E1000000 		.4byte	0xe1
 2230 03d8 02       		.uleb128 0x2
 2231 03d9 91       		.byte	0x91
 2232 03da 74       		.sleb128 -12
 2233 03db 00       		.byte	0
 2234 03dc 17       		.uleb128 0x17
 2235 03dd 5B030000 		.4byte	.LASF69
 2236 03e1 01       		.byte	0x1
 2237 03e2 F001     		.2byte	0x1f0
 2238 03e4 D5000000 		.4byte	0xd5
 2239 03e8 00000000 		.4byte	.LFB69
 2240 03ec 24000000 		.4byte	.LFE69-.LFB69
 2241 03f0 01       		.uleb128 0x1
 2242 03f1 9C       		.byte	0x9c
 2243 03f2 04040000 		.4byte	0x404
 2244 03f6 18       		.uleb128 0x18
 2245 03f7 6E00     		.ascii	"n\000"
 2246 03f9 01       		.byte	0x1
 2247 03fa F001     		.2byte	0x1f0
 2248 03fc C9000000 		.4byte	0xc9
 2249 0400 02       		.uleb128 0x2
 2250 0401 91       		.byte	0x91
 2251 0402 76       		.sleb128 -10
 2252 0403 00       		.byte	0
 2253 0404 19       		.uleb128 0x19
 2254 0405 7D010000 		.4byte	.LASF121
 2255 0409 01       		.byte	0x1
 2256 040a F401     		.2byte	0x1f4
 2257 040c 00000000 		.4byte	.LFB70
 2258 0410 B4000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 54


 2259 0414 01       		.uleb128 0x1
 2260 0415 9C       		.byte	0x9c
 2261 0416 41040000 		.4byte	0x441
 2262 041a 15       		.uleb128 0x15
 2263 041b 6900     		.ascii	"i\000"
 2264 041d 01       		.byte	0x1
 2265 041e F601     		.2byte	0x1f6
 2266 0420 68000000 		.4byte	0x68
 2267 0424 02       		.uleb128 0x2
 2268 0425 91       		.byte	0x91
 2269 0426 74       		.sleb128 -12
 2270 0427 12       		.uleb128 0x12
 2271 0428 0C000000 		.4byte	.LBB3
 2272 042c 26000000 		.4byte	.LBE3-.LBB3
 2273 0430 16       		.uleb128 0x16
 2274 0431 00000000 		.4byte	.LASF70
 2275 0435 01       		.byte	0x1
 2276 0436 F801     		.2byte	0x1f8
 2277 0438 68000000 		.4byte	0x68
 2278 043c 02       		.uleb128 0x2
 2279 043d 91       		.byte	0x91
 2280 043e 70       		.sleb128 -16
 2281 043f 00       		.byte	0
 2282 0440 00       		.byte	0
 2283 0441 13       		.uleb128 0x13
 2284 0442 7C050000 		.4byte	.LASF71
 2285 0446 01       		.byte	0x1
 2286 0447 0B02     		.2byte	0x20b
 2287 0449 00000000 		.4byte	.LFB71
 2288 044d 2A000000 		.4byte	.LFE71-.LFB71
 2289 0451 01       		.uleb128 0x1
 2290 0452 9C       		.byte	0x9c
 2291 0453 76040000 		.4byte	0x476
 2292 0457 14       		.uleb128 0x14
 2293 0458 22000000 		.4byte	.LASF72
 2294 045c 01       		.byte	0x1
 2295 045d 0B02     		.2byte	0x20b
 2296 045f 68000000 		.4byte	0x68
 2297 0463 02       		.uleb128 0x2
 2298 0464 91       		.byte	0x91
 2299 0465 6C       		.sleb128 -20
 2300 0466 16       		.uleb128 0x16
 2301 0467 47030000 		.4byte	.LASF73
 2302 046b 01       		.byte	0x1
 2303 046c 0C02     		.2byte	0x20c
 2304 046e 68000000 		.4byte	0x68
 2305 0472 02       		.uleb128 0x2
 2306 0473 91       		.byte	0x91
 2307 0474 74       		.sleb128 -12
 2308 0475 00       		.byte	0
 2309 0476 13       		.uleb128 0x13
 2310 0477 7A000000 		.4byte	.LASF74
 2311 047b 01       		.byte	0x1
 2312 047c 1002     		.2byte	0x210
 2313 047e 00000000 		.4byte	.LFB72
 2314 0482 2A000000 		.4byte	.LFE72-.LFB72
 2315 0486 01       		.uleb128 0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 55


 2316 0487 9C       		.byte	0x9c
 2317 0488 AB040000 		.4byte	0x4ab
 2318 048c 14       		.uleb128 0x14
 2319 048d 22000000 		.4byte	.LASF72
 2320 0491 01       		.byte	0x1
 2321 0492 1002     		.2byte	0x210
 2322 0494 68000000 		.4byte	0x68
 2323 0498 02       		.uleb128 0x2
 2324 0499 91       		.byte	0x91
 2325 049a 6C       		.sleb128 -20
 2326 049b 16       		.uleb128 0x16
 2327 049c 47030000 		.4byte	.LASF73
 2328 04a0 01       		.byte	0x1
 2329 04a1 1102     		.2byte	0x211
 2330 04a3 68000000 		.4byte	0x68
 2331 04a7 02       		.uleb128 0x2
 2332 04a8 91       		.byte	0x91
 2333 04a9 74       		.sleb128 -12
 2334 04aa 00       		.byte	0
 2335 04ab 13       		.uleb128 0x13
 2336 04ac 08000000 		.4byte	.LASF75
 2337 04b0 01       		.byte	0x1
 2338 04b1 1902     		.2byte	0x219
 2339 04b3 00000000 		.4byte	.LFB73
 2340 04b7 52000000 		.4byte	.LFE73-.LFB73
 2341 04bb 01       		.uleb128 0x1
 2342 04bc 9C       		.byte	0x9c
 2343 04bd 30050000 		.4byte	0x530
 2344 04c1 14       		.uleb128 0x14
 2345 04c2 22050000 		.4byte	.LASF76
 2346 04c6 01       		.byte	0x1
 2347 04c7 1902     		.2byte	0x219
 2348 04c9 68000000 		.4byte	0x68
 2349 04cd 03       		.uleb128 0x3
 2350 04ce 91       		.byte	0x91
 2351 04cf AC7F     		.sleb128 -84
 2352 04d1 14       		.uleb128 0x14
 2353 04d2 2D010000 		.4byte	.LASF77
 2354 04d6 01       		.byte	0x1
 2355 04d7 1902     		.2byte	0x219
 2356 04d9 68000000 		.4byte	0x68
 2357 04dd 03       		.uleb128 0x3
 2358 04de 91       		.byte	0x91
 2359 04df A87F     		.sleb128 -88
 2360 04e1 14       		.uleb128 0x14
 2361 04e2 4F000000 		.4byte	.LASF78
 2362 04e6 01       		.byte	0x1
 2363 04e7 1902     		.2byte	0x219
 2364 04e9 68000000 		.4byte	0x68
 2365 04ed 03       		.uleb128 0x3
 2366 04ee 91       		.byte	0x91
 2367 04ef A47F     		.sleb128 -92
 2368 04f1 14       		.uleb128 0x14
 2369 04f2 03060000 		.4byte	.LASF79
 2370 04f6 01       		.byte	0x1
 2371 04f7 1902     		.2byte	0x219
 2372 04f9 68000000 		.4byte	0x68
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 56


 2373 04fd 03       		.uleb128 0x3
 2374 04fe 91       		.byte	0x91
 2375 04ff A07F     		.sleb128 -96
 2376 0501 16       		.uleb128 0x16
 2377 0502 05050000 		.4byte	.LASF80
 2378 0506 01       		.byte	0x1
 2379 0507 1E02     		.2byte	0x21e
 2380 0509 68000000 		.4byte	0x68
 2381 050d 02       		.uleb128 0x2
 2382 050e 91       		.byte	0x91
 2383 050f 74       		.sleb128 -12
 2384 0510 15       		.uleb128 0x15
 2385 0511 6D736700 		.ascii	"msg\000"
 2386 0515 01       		.byte	0x1
 2387 0516 2302     		.2byte	0x223
 2388 0518 30050000 		.4byte	0x530
 2389 051c 03       		.uleb128 0x3
 2390 051d 91       		.byte	0x91
 2391 051e B07F     		.sleb128 -80
 2392 0520 16       		.uleb128 0x16
 2393 0521 98000000 		.4byte	.LASF81
 2394 0525 01       		.byte	0x1
 2395 0526 2A02     		.2byte	0x22a
 2396 0528 68000000 		.4byte	0x68
 2397 052c 02       		.uleb128 0x2
 2398 052d 91       		.byte	0x91
 2399 052e 70       		.sleb128 -16
 2400 052f 00       		.byte	0
 2401 0530 06       		.uleb128 0x6
 2402 0531 83000000 		.4byte	0x83
 2403 0535 40050000 		.4byte	0x540
 2404 0539 07       		.uleb128 0x7
 2405 053a 76000000 		.4byte	0x76
 2406 053e 3F       		.byte	0x3f
 2407 053f 00       		.byte	0
 2408 0540 13       		.uleb128 0x13
 2409 0541 15010000 		.4byte	.LASF82
 2410 0545 01       		.byte	0x1
 2411 0546 3B02     		.2byte	0x23b
 2412 0548 00000000 		.4byte	.LFB74
 2413 054c 2C000000 		.4byte	.LFE74-.LFB74
 2414 0550 01       		.uleb128 0x1
 2415 0551 9C       		.byte	0x9c
 2416 0552 75050000 		.4byte	0x575
 2417 0556 14       		.uleb128 0x14
 2418 0557 53050000 		.4byte	.LASF83
 2419 055b 01       		.byte	0x1
 2420 055c 3B02     		.2byte	0x23b
 2421 055e 68000000 		.4byte	0x68
 2422 0562 02       		.uleb128 0x2
 2423 0563 91       		.byte	0x91
 2424 0564 74       		.sleb128 -12
 2425 0565 14       		.uleb128 0x14
 2426 0566 4A020000 		.4byte	.LASF84
 2427 056a 01       		.byte	0x1
 2428 056b 3B02     		.2byte	0x23b
 2429 056d 68000000 		.4byte	0x68
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 57


 2430 0571 02       		.uleb128 0x2
 2431 0572 91       		.byte	0x91
 2432 0573 70       		.sleb128 -16
 2433 0574 00       		.byte	0
 2434 0575 1A       		.uleb128 0x1a
 2435 0576 49010000 		.4byte	.LASF85
 2436 057a 01       		.byte	0x1
 2437 057b 4002     		.2byte	0x240
 2438 057d 00000000 		.4byte	.LFB75
 2439 0581 40000000 		.4byte	.LFE75-.LFB75
 2440 0585 01       		.uleb128 0x1
 2441 0586 9C       		.byte	0x9c
 2442 0587 1A       		.uleb128 0x1a
 2443 0588 C8040000 		.4byte	.LASF86
 2444 058c 01       		.byte	0x1
 2445 058d 4C02     		.2byte	0x24c
 2446 058f 00000000 		.4byte	.LFB76
 2447 0593 40000000 		.4byte	.LFE76-.LFB76
 2448 0597 01       		.uleb128 0x1
 2449 0598 9C       		.byte	0x9c
 2450 0599 1A       		.uleb128 0x1a
 2451 059a B3000000 		.4byte	.LASF87
 2452 059e 01       		.byte	0x1
 2453 059f 5802     		.2byte	0x258
 2454 05a1 00000000 		.4byte	.LFB77
 2455 05a5 8C000000 		.4byte	.LFE77-.LFB77
 2456 05a9 01       		.uleb128 0x1
 2457 05aa 9C       		.byte	0x9c
 2458 05ab 1A       		.uleb128 0x1a
 2459 05ac 2A030000 		.4byte	.LASF88
 2460 05b0 01       		.byte	0x1
 2461 05b1 7602     		.2byte	0x276
 2462 05b3 00000000 		.4byte	.LFB78
 2463 05b7 8C000000 		.4byte	.LFE78-.LFB78
 2464 05bb 01       		.uleb128 0x1
 2465 05bc 9C       		.byte	0x9c
 2466 05bd 13       		.uleb128 0x13
 2467 05be EA000000 		.4byte	.LASF89
 2468 05c2 01       		.byte	0x1
 2469 05c3 BB02     		.2byte	0x2bb
 2470 05c5 00000000 		.4byte	.LFB79
 2471 05c9 2E000000 		.4byte	.LFE79-.LFB79
 2472 05cd 01       		.uleb128 0x1
 2473 05ce 9C       		.byte	0x9c
 2474 05cf E1050000 		.4byte	0x5e1
 2475 05d3 18       		.uleb128 0x18
 2476 05d4 7300     		.ascii	"s\000"
 2477 05d6 01       		.byte	0x1
 2478 05d7 BB02     		.2byte	0x2bb
 2479 05d9 7D000000 		.4byte	0x7d
 2480 05dd 02       		.uleb128 0x2
 2481 05de 91       		.byte	0x91
 2482 05df 74       		.sleb128 -12
 2483 05e0 00       		.byte	0
 2484 05e1 1B       		.uleb128 0x1b
 2485 05e2 F8030000 		.4byte	.LASF90
 2486 05e6 06       		.byte	0x6
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 58


 2487 05e7 9606     		.2byte	0x696
 2488 05e9 ED050000 		.4byte	0x5ed
 2489 05ed 1C       		.uleb128 0x1c
 2490 05ee 9A000000 		.4byte	0x9a
 2491 05f2 1D       		.uleb128 0x1d
 2492 05f3 747300   		.ascii	"ts\000"
 2493 05f6 05       		.byte	0x5
 2494 05f7 10       		.byte	0x10
 2495 05f8 A5000000 		.4byte	0xa5
 2496 05fc 05       		.uleb128 0x5
 2497 05fd 03       		.byte	0x3
 2498 05fe 00000000 		.4byte	ts
 2499 0602 1E       		.uleb128 0x1e
 2500 0603 AC050000 		.4byte	.LASF91
 2501 0607 05       		.byte	0x5
 2502 0608 11       		.byte	0x11
 2503 0609 B1000000 		.4byte	0xb1
 2504 060d 05       		.uleb128 0x5
 2505 060e 03       		.byte	0x3
 2506 060f 00000000 		.4byte	ts_enc
 2507 0613 1E       		.uleb128 0x1e
 2508 0614 05040000 		.4byte	.LASF92
 2509 0618 05       		.byte	0x5
 2510 0619 12       		.byte	0x12
 2511 061a B1000000 		.4byte	0xb1
 2512 061e 05       		.uleb128 0x5
 2513 061f 03       		.byte	0x3
 2514 0620 00000000 		.4byte	ts_update
 2515 0624 1E       		.uleb128 0x1e
 2516 0625 C7010000 		.4byte	.LASF93
 2517 0629 05       		.byte	0x5
 2518 062a 13       		.byte	0x13
 2519 062b B1000000 		.4byte	0xb1
 2520 062f 05       		.uleb128 0x5
 2521 0630 03       		.byte	0x3
 2522 0631 00000000 		.4byte	ts_speed
 2523 0635 1E       		.uleb128 0x1e
 2524 0636 EC010000 		.4byte	.LASF94
 2525 063a 05       		.byte	0x5
 2526 063b 14       		.byte	0x14
 2527 063c B1000000 		.4byte	0xb1
 2528 0640 05       		.uleb128 0x5
 2529 0641 03       		.byte	0x3
 2530 0642 00000000 		.4byte	ts_display
 2531 0646 1E       		.uleb128 0x1e
 2532 0647 AE010000 		.4byte	.LASF95
 2533 064b 05       		.byte	0x5
 2534 064c 16       		.byte	0x16
 2535 064d A5000000 		.4byte	0xa5
 2536 0651 05       		.uleb128 0x5
 2537 0652 03       		.byte	0x3
 2538 0653 00000000 		.4byte	flag_ts_enc
 2539 0657 1E       		.uleb128 0x1e
 2540 0658 9F010000 		.4byte	.LASF96
 2541 065c 05       		.byte	0x5
 2542 065d 17       		.byte	0x17
 2543 065e A5000000 		.4byte	0xa5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 59


 2544 0662 05       		.uleb128 0x5
 2545 0663 03       		.byte	0x3
 2546 0664 00000000 		.4byte	flag_ts_update
 2547 0668 1E       		.uleb128 0x1e
 2548 0669 A1030000 		.4byte	.LASF97
 2549 066d 05       		.byte	0x5
 2550 066e 18       		.byte	0x18
 2551 066f A5000000 		.4byte	0xa5
 2552 0673 05       		.uleb128 0x5
 2553 0674 03       		.byte	0x3
 2554 0675 00000000 		.4byte	flag_ts_speed
 2555 0679 1E       		.uleb128 0x1e
 2556 067a B8050000 		.4byte	.LASF98
 2557 067e 05       		.byte	0x5
 2558 067f 19       		.byte	0x19
 2559 0680 A5000000 		.4byte	0xa5
 2560 0684 05       		.uleb128 0x5
 2561 0685 03       		.byte	0x3
 2562 0686 00000000 		.4byte	flag_ts_display
 2563 068a 1E       		.uleb128 0x1e
 2564 068b BE030000 		.4byte	.LASF99
 2565 068f 05       		.byte	0x5
 2566 0690 1C       		.byte	0x1c
 2567 0691 A5000000 		.4byte	0xa5
 2568 0695 05       		.uleb128 0x5
 2569 0696 03       		.byte	0x3
 2570 0697 00000000 		.4byte	flag_rx
 2571 069b 1E       		.uleb128 0x1e
 2572 069c 71010000 		.4byte	.LASF100
 2573 06a0 05       		.byte	0x5
 2574 06a1 1D       		.byte	0x1d
 2575 06a2 A5000000 		.4byte	0xa5
 2576 06a6 05       		.uleb128 0x5
 2577 06a7 03       		.byte	0x3
 2578 06a8 00000000 		.4byte	flag_packet
 2579 06ac 1E       		.uleb128 0x1e
 2580 06ad 51060000 		.4byte	.LASF101
 2581 06b1 05       		.byte	0x5
 2582 06b2 1E       		.byte	0x1e
 2583 06b3 A5000000 		.4byte	0xa5
 2584 06b7 05       		.uleb128 0x5
 2585 06b8 03       		.byte	0x3
 2586 06b9 00000000 		.4byte	flag_KB_string
 2587 06bd 1E       		.uleb128 0x1e
 2588 06be AF030000 		.4byte	.LASF102
 2589 06c2 05       		.byte	0x5
 2590 06c3 20       		.byte	0x20
 2591 06c4 A5000000 		.4byte	0xa5
 2592 06c8 05       		.uleb128 0x5
 2593 06c9 03       		.byte	0x3
 2594 06ca 00000000 		.4byte	dataready_flag
 2595 06ce 1E       		.uleb128 0x1e
 2596 06cf C1000000 		.4byte	.LASF103
 2597 06d3 05       		.byte	0x5
 2598 06d4 22       		.byte	0x22
 2599 06d5 A5000000 		.4byte	0xa5
 2600 06d9 05       		.uleb128 0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 60


 2601 06da 03       		.byte	0x3
 2602 06db 00000000 		.4byte	flag_rf_transmission_active
 2603 06df 1E       		.uleb128 0x1e
 2604 06e0 D6050000 		.4byte	.LASF104
 2605 06e4 05       		.byte	0x5
 2606 06e5 25       		.byte	0x25
 2607 06e6 30050000 		.4byte	0x530
 2608 06ea 05       		.uleb128 0x5
 2609 06eb 03       		.byte	0x3
 2610 06ec 00000000 		.4byte	displaystring
 2611 06f0 1E       		.uleb128 0x1e
 2612 06f1 77050000 		.4byte	.LASF105
 2613 06f5 05       		.byte	0x5
 2614 06f6 26       		.byte	0x26
 2615 06f7 30050000 		.4byte	0x530
 2616 06fb 05       		.uleb128 0x5
 2617 06fc 03       		.byte	0x3
 2618 06fd 00000000 		.4byte	line
 2619 0701 1E       		.uleb128 0x1e
 2620 0702 4D050000 		.4byte	.LASF106
 2621 0706 05       		.byte	0x5
 2622 0707 26       		.byte	0x26
 2623 0708 30050000 		.4byte	0x530
 2624 070c 05       		.uleb128 0x5
 2625 070d 03       		.byte	0x3
 2626 070e 00000000 		.4byte	entry
 2627 0712 06       		.uleb128 0x6
 2628 0713 A5000000 		.4byte	0xa5
 2629 0717 22070000 		.4byte	0x722
 2630 071b 07       		.uleb128 0x7
 2631 071c 76000000 		.4byte	0x76
 2632 0720 3F       		.byte	0x3f
 2633 0721 00       		.byte	0
 2634 0722 1E       		.uleb128 0x1e
 2635 0723 FC010000 		.4byte	.LASF107
 2636 0727 05       		.byte	0x5
 2637 0728 27       		.byte	0x27
 2638 0729 12070000 		.4byte	0x712
 2639 072d 05       		.uleb128 0x5
 2640 072e 03       		.byte	0x3
 2641 072f 00000000 		.4byte	usbBuffer
 2642 0733 1E       		.uleb128 0x1e
 2643 0734 6D000000 		.4byte	.LASF108
 2644 0738 05       		.byte	0x5
 2645 0739 3C       		.byte	0x3c
 2646 073a EF000000 		.4byte	0xef
 2647 073e 05       		.uleb128 0x5
 2648 073f 03       		.byte	0x3
 2649 0740 00000000 		.4byte	system_state
 2650 0744 06       		.uleb128 0x6
 2651 0745 BD000000 		.4byte	0xbd
 2652 0749 54070000 		.4byte	0x754
 2653 074d 07       		.uleb128 0x7
 2654 074e 76000000 		.4byte	0x76
 2655 0752 05       		.byte	0x5
 2656 0753 00       		.byte	0
 2657 0754 1E       		.uleb128 0x1e
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 61


 2658 0755 39010000 		.4byte	.LASF109
 2659 0759 01       		.byte	0x1
 2660 075a 65       		.byte	0x65
 2661 075b 44070000 		.4byte	0x744
 2662 075f 05       		.uleb128 0x5
 2663 0760 03       		.byte	0x3
 2664 0761 00000000 		.4byte	sensor_readings
 2665 0765 1E       		.uleb128 0x1e
 2666 0766 28020000 		.4byte	.LASF110
 2667 076a 01       		.byte	0x1
 2668 076b 66       		.byte	0x66
 2669 076c 76070000 		.4byte	0x776
 2670 0770 05       		.uleb128 0x5
 2671 0771 03       		.byte	0x3
 2672 0772 00000000 		.4byte	adc_flag
 2673 0776 1C       		.uleb128 0x1c
 2674 0777 68000000 		.4byte	0x68
 2675 077b 06       		.uleb128 0x6
 2676 077c 68000000 		.4byte	0x68
 2677 0780 8B070000 		.4byte	0x78b
 2678 0784 07       		.uleb128 0x7
 2679 0785 76000000 		.4byte	0x76
 2680 0789 05       		.byte	0x5
 2681 078a 00       		.byte	0
 2682 078b 1E       		.uleb128 0x1e
 2683 078c BA010000 		.4byte	.LASF111
 2684 0790 01       		.byte	0x1
 2685 0791 67       		.byte	0x67
 2686 0792 7B070000 		.4byte	0x77b
 2687 0796 05       		.uleb128 0x5
 2688 0797 03       		.byte	0x3
 2689 0798 00000000 		.4byte	adc_readings
 2690 079c 1E       		.uleb128 0x1e
 2691 079d 35000000 		.4byte	.LASF112
 2692 07a1 01       		.byte	0x1
 2693 07a2 68       		.byte	0x68
 2694 07a3 68000000 		.4byte	0x68
 2695 07a7 05       		.uleb128 0x5
 2696 07a8 03       		.byte	0x3
 2697 07a9 00000000 		.4byte	sample_count
 2698 07ad 1E       		.uleb128 0x1e
 2699 07ae D0030000 		.4byte	.LASF113
 2700 07b2 01       		.byte	0x1
 2701 07b3 6A       		.byte	0x6a
 2702 07b4 76070000 		.4byte	0x776
 2703 07b8 05       		.uleb128 0x5
 2704 07b9 03       		.byte	0x3
 2705 07ba 00000000 		.4byte	countM1
 2706 07be 1E       		.uleb128 0x1e
 2707 07bf D8030000 		.4byte	.LASF114
 2708 07c3 01       		.byte	0x1
 2709 07c4 6B       		.byte	0x6b
 2710 07c5 76070000 		.4byte	0x776
 2711 07c9 05       		.uleb128 0x5
 2712 07ca 03       		.byte	0x3
 2713 07cb 00000000 		.4byte	countM2
 2714 07cf 1E       		.uleb128 0x1e
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 62


 2715 07d0 89030000 		.4byte	.LASF60
 2716 07d4 01       		.byte	0x1
 2717 07d5 6C       		.byte	0x6c
 2718 07d6 68000000 		.4byte	0x68
 2719 07da 05       		.uleb128 0x5
 2720 07db 03       		.byte	0x3
 2721 07dc 00000000 		.4byte	prevCountM1
 2722 07e0 1E       		.uleb128 0x1e
 2723 07e1 95030000 		.4byte	.LASF61
 2724 07e5 01       		.byte	0x1
 2725 07e6 6D       		.byte	0x6d
 2726 07e7 68000000 		.4byte	0x68
 2727 07eb 05       		.uleb128 0x5
 2728 07ec 03       		.byte	0x3
 2729 07ed 00000000 		.4byte	prevCountM2
 2730 07f1 1E       		.uleb128 0x1e
 2731 07f2 91050000 		.4byte	.LASF115
 2732 07f6 01       		.byte	0x1
 2733 07f7 6E       		.byte	0x6e
 2734 07f8 76070000 		.4byte	0x776
 2735 07fc 05       		.uleb128 0x5
 2736 07fd 03       		.byte	0x3
 2737 07fe 00000000 		.4byte	timer_flag
 2738 0802 00       		.byte	0
 2739              		.section	.debug_abbrev,"",%progbits
 2740              	.Ldebug_abbrev0:
 2741 0000 01       		.uleb128 0x1
 2742 0001 11       		.uleb128 0x11
 2743 0002 01       		.byte	0x1
 2744 0003 25       		.uleb128 0x25
 2745 0004 0E       		.uleb128 0xe
 2746 0005 13       		.uleb128 0x13
 2747 0006 0B       		.uleb128 0xb
 2748 0007 03       		.uleb128 0x3
 2749 0008 0E       		.uleb128 0xe
 2750 0009 1B       		.uleb128 0x1b
 2751 000a 0E       		.uleb128 0xe
 2752 000b 55       		.uleb128 0x55
 2753 000c 17       		.uleb128 0x17
 2754 000d 11       		.uleb128 0x11
 2755 000e 01       		.uleb128 0x1
 2756 000f 10       		.uleb128 0x10
 2757 0010 17       		.uleb128 0x17
 2758 0011 00       		.byte	0
 2759 0012 00       		.byte	0
 2760 0013 02       		.uleb128 0x2
 2761 0014 24       		.uleb128 0x24
 2762 0015 00       		.byte	0
 2763 0016 0B       		.uleb128 0xb
 2764 0017 0B       		.uleb128 0xb
 2765 0018 3E       		.uleb128 0x3e
 2766 0019 0B       		.uleb128 0xb
 2767 001a 03       		.uleb128 0x3
 2768 001b 0E       		.uleb128 0xe
 2769 001c 00       		.byte	0
 2770 001d 00       		.byte	0
 2771 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 63


 2772 001f 16       		.uleb128 0x16
 2773 0020 00       		.byte	0
 2774 0021 03       		.uleb128 0x3
 2775 0022 0E       		.uleb128 0xe
 2776 0023 3A       		.uleb128 0x3a
 2777 0024 0B       		.uleb128 0xb
 2778 0025 3B       		.uleb128 0x3b
 2779 0026 0B       		.uleb128 0xb
 2780 0027 49       		.uleb128 0x49
 2781 0028 13       		.uleb128 0x13
 2782 0029 00       		.byte	0
 2783 002a 00       		.byte	0
 2784 002b 04       		.uleb128 0x4
 2785 002c 24       		.uleb128 0x24
 2786 002d 00       		.byte	0
 2787 002e 0B       		.uleb128 0xb
 2788 002f 0B       		.uleb128 0xb
 2789 0030 3E       		.uleb128 0x3e
 2790 0031 0B       		.uleb128 0xb
 2791 0032 03       		.uleb128 0x3
 2792 0033 08       		.uleb128 0x8
 2793 0034 00       		.byte	0
 2794 0035 00       		.byte	0
 2795 0036 05       		.uleb128 0x5
 2796 0037 0F       		.uleb128 0xf
 2797 0038 00       		.byte	0
 2798 0039 0B       		.uleb128 0xb
 2799 003a 0B       		.uleb128 0xb
 2800 003b 49       		.uleb128 0x49
 2801 003c 13       		.uleb128 0x13
 2802 003d 00       		.byte	0
 2803 003e 00       		.byte	0
 2804 003f 06       		.uleb128 0x6
 2805 0040 01       		.uleb128 0x1
 2806 0041 01       		.byte	0x1
 2807 0042 49       		.uleb128 0x49
 2808 0043 13       		.uleb128 0x13
 2809 0044 01       		.uleb128 0x1
 2810 0045 13       		.uleb128 0x13
 2811 0046 00       		.byte	0
 2812 0047 00       		.byte	0
 2813 0048 07       		.uleb128 0x7
 2814 0049 21       		.uleb128 0x21
 2815 004a 00       		.byte	0
 2816 004b 49       		.uleb128 0x49
 2817 004c 13       		.uleb128 0x13
 2818 004d 2F       		.uleb128 0x2f
 2819 004e 0B       		.uleb128 0xb
 2820 004f 00       		.byte	0
 2821 0050 00       		.byte	0
 2822 0051 08       		.uleb128 0x8
 2823 0052 16       		.uleb128 0x16
 2824 0053 00       		.byte	0
 2825 0054 03       		.uleb128 0x3
 2826 0055 0E       		.uleb128 0xe
 2827 0056 3A       		.uleb128 0x3a
 2828 0057 0B       		.uleb128 0xb
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 64


 2829 0058 3B       		.uleb128 0x3b
 2830 0059 05       		.uleb128 0x5
 2831 005a 49       		.uleb128 0x49
 2832 005b 13       		.uleb128 0x13
 2833 005c 00       		.byte	0
 2834 005d 00       		.byte	0
 2835 005e 09       		.uleb128 0x9
 2836 005f 13       		.uleb128 0x13
 2837 0060 01       		.byte	0x1
 2838 0061 03       		.uleb128 0x3
 2839 0062 0E       		.uleb128 0xe
 2840 0063 0B       		.uleb128 0xb
 2841 0064 0B       		.uleb128 0xb
 2842 0065 3A       		.uleb128 0x3a
 2843 0066 0B       		.uleb128 0xb
 2844 0067 3B       		.uleb128 0x3b
 2845 0068 0B       		.uleb128 0xb
 2846 0069 01       		.uleb128 0x1
 2847 006a 13       		.uleb128 0x13
 2848 006b 00       		.byte	0
 2849 006c 00       		.byte	0
 2850 006d 0A       		.uleb128 0xa
 2851 006e 0D       		.uleb128 0xd
 2852 006f 00       		.byte	0
 2853 0070 03       		.uleb128 0x3
 2854 0071 0E       		.uleb128 0xe
 2855 0072 3A       		.uleb128 0x3a
 2856 0073 0B       		.uleb128 0xb
 2857 0074 3B       		.uleb128 0x3b
 2858 0075 0B       		.uleb128 0xb
 2859 0076 49       		.uleb128 0x49
 2860 0077 13       		.uleb128 0x13
 2861 0078 38       		.uleb128 0x38
 2862 0079 0B       		.uleb128 0xb
 2863 007a 00       		.byte	0
 2864 007b 00       		.byte	0
 2865 007c 0B       		.uleb128 0xb
 2866 007d 04       		.uleb128 0x4
 2867 007e 01       		.byte	0x1
 2868 007f 03       		.uleb128 0x3
 2869 0080 0E       		.uleb128 0xe
 2870 0081 0B       		.uleb128 0xb
 2871 0082 0B       		.uleb128 0xb
 2872 0083 3A       		.uleb128 0x3a
 2873 0084 0B       		.uleb128 0xb
 2874 0085 3B       		.uleb128 0x3b
 2875 0086 0B       		.uleb128 0xb
 2876 0087 01       		.uleb128 0x1
 2877 0088 13       		.uleb128 0x13
 2878 0089 00       		.byte	0
 2879 008a 00       		.byte	0
 2880 008b 0C       		.uleb128 0xc
 2881 008c 28       		.uleb128 0x28
 2882 008d 00       		.byte	0
 2883 008e 03       		.uleb128 0x3
 2884 008f 0E       		.uleb128 0xe
 2885 0090 1C       		.uleb128 0x1c
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 65


 2886 0091 0D       		.uleb128 0xd
 2887 0092 00       		.byte	0
 2888 0093 00       		.byte	0
 2889 0094 0D       		.uleb128 0xd
 2890 0095 2E       		.uleb128 0x2e
 2891 0096 00       		.byte	0
 2892 0097 3F       		.uleb128 0x3f
 2893 0098 19       		.uleb128 0x19
 2894 0099 03       		.uleb128 0x3
 2895 009a 0E       		.uleb128 0xe
 2896 009b 3A       		.uleb128 0x3a
 2897 009c 0B       		.uleb128 0xb
 2898 009d 3B       		.uleb128 0x3b
 2899 009e 0B       		.uleb128 0xb
 2900 009f 27       		.uleb128 0x27
 2901 00a0 19       		.uleb128 0x19
 2902 00a1 11       		.uleb128 0x11
 2903 00a2 01       		.uleb128 0x1
 2904 00a3 12       		.uleb128 0x12
 2905 00a4 06       		.uleb128 0x6
 2906 00a5 40       		.uleb128 0x40
 2907 00a6 18       		.uleb128 0x18
 2908 00a7 9642     		.uleb128 0x2116
 2909 00a9 19       		.uleb128 0x19
 2910 00aa 00       		.byte	0
 2911 00ab 00       		.byte	0
 2912 00ac 0E       		.uleb128 0xe
 2913 00ad 2E       		.uleb128 0x2e
 2914 00ae 00       		.byte	0
 2915 00af 3F       		.uleb128 0x3f
 2916 00b0 19       		.uleb128 0x19
 2917 00b1 03       		.uleb128 0x3
 2918 00b2 0E       		.uleb128 0xe
 2919 00b3 3A       		.uleb128 0x3a
 2920 00b4 0B       		.uleb128 0xb
 2921 00b5 3B       		.uleb128 0x3b
 2922 00b6 0B       		.uleb128 0xb
 2923 00b7 27       		.uleb128 0x27
 2924 00b8 19       		.uleb128 0x19
 2925 00b9 11       		.uleb128 0x11
 2926 00ba 01       		.uleb128 0x1
 2927 00bb 12       		.uleb128 0x12
 2928 00bc 06       		.uleb128 0x6
 2929 00bd 40       		.uleb128 0x40
 2930 00be 18       		.uleb128 0x18
 2931 00bf 9742     		.uleb128 0x2117
 2932 00c1 19       		.uleb128 0x19
 2933 00c2 00       		.byte	0
 2934 00c3 00       		.byte	0
 2935 00c4 0F       		.uleb128 0xf
 2936 00c5 2E       		.uleb128 0x2e
 2937 00c6 01       		.byte	0x1
 2938 00c7 3F       		.uleb128 0x3f
 2939 00c8 19       		.uleb128 0x19
 2940 00c9 03       		.uleb128 0x3
 2941 00ca 0E       		.uleb128 0xe
 2942 00cb 3A       		.uleb128 0x3a
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 66


 2943 00cc 0B       		.uleb128 0xb
 2944 00cd 3B       		.uleb128 0x3b
 2945 00ce 0B       		.uleb128 0xb
 2946 00cf 49       		.uleb128 0x49
 2947 00d0 13       		.uleb128 0x13
 2948 00d1 11       		.uleb128 0x11
 2949 00d2 01       		.uleb128 0x1
 2950 00d3 12       		.uleb128 0x12
 2951 00d4 06       		.uleb128 0x6
 2952 00d5 40       		.uleb128 0x40
 2953 00d6 18       		.uleb128 0x18
 2954 00d7 9642     		.uleb128 0x2116
 2955 00d9 19       		.uleb128 0x19
 2956 00da 01       		.uleb128 0x1
 2957 00db 13       		.uleb128 0x13
 2958 00dc 00       		.byte	0
 2959 00dd 00       		.byte	0
 2960 00de 10       		.uleb128 0x10
 2961 00df 34       		.uleb128 0x34
 2962 00e0 00       		.byte	0
 2963 00e1 03       		.uleb128 0x3
 2964 00e2 0E       		.uleb128 0xe
 2965 00e3 3A       		.uleb128 0x3a
 2966 00e4 0B       		.uleb128 0xb
 2967 00e5 3B       		.uleb128 0x3b
 2968 00e6 0B       		.uleb128 0xb
 2969 00e7 49       		.uleb128 0x49
 2970 00e8 13       		.uleb128 0x13
 2971 00e9 02       		.uleb128 0x2
 2972 00ea 18       		.uleb128 0x18
 2973 00eb 00       		.byte	0
 2974 00ec 00       		.byte	0
 2975 00ed 11       		.uleb128 0x11
 2976 00ee 34       		.uleb128 0x34
 2977 00ef 00       		.byte	0
 2978 00f0 03       		.uleb128 0x3
 2979 00f1 0E       		.uleb128 0xe
 2980 00f2 3A       		.uleb128 0x3a
 2981 00f3 0B       		.uleb128 0xb
 2982 00f4 3B       		.uleb128 0x3b
 2983 00f5 0B       		.uleb128 0xb
 2984 00f6 49       		.uleb128 0x49
 2985 00f7 13       		.uleb128 0x13
 2986 00f8 00       		.byte	0
 2987 00f9 00       		.byte	0
 2988 00fa 12       		.uleb128 0x12
 2989 00fb 0B       		.uleb128 0xb
 2990 00fc 01       		.byte	0x1
 2991 00fd 11       		.uleb128 0x11
 2992 00fe 01       		.uleb128 0x1
 2993 00ff 12       		.uleb128 0x12
 2994 0100 06       		.uleb128 0x6
 2995 0101 00       		.byte	0
 2996 0102 00       		.byte	0
 2997 0103 13       		.uleb128 0x13
 2998 0104 2E       		.uleb128 0x2e
 2999 0105 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 67


 3000 0106 3F       		.uleb128 0x3f
 3001 0107 19       		.uleb128 0x19
 3002 0108 03       		.uleb128 0x3
 3003 0109 0E       		.uleb128 0xe
 3004 010a 3A       		.uleb128 0x3a
 3005 010b 0B       		.uleb128 0xb
 3006 010c 3B       		.uleb128 0x3b
 3007 010d 05       		.uleb128 0x5
 3008 010e 27       		.uleb128 0x27
 3009 010f 19       		.uleb128 0x19
 3010 0110 11       		.uleb128 0x11
 3011 0111 01       		.uleb128 0x1
 3012 0112 12       		.uleb128 0x12
 3013 0113 06       		.uleb128 0x6
 3014 0114 40       		.uleb128 0x40
 3015 0115 18       		.uleb128 0x18
 3016 0116 9642     		.uleb128 0x2116
 3017 0118 19       		.uleb128 0x19
 3018 0119 01       		.uleb128 0x1
 3019 011a 13       		.uleb128 0x13
 3020 011b 00       		.byte	0
 3021 011c 00       		.byte	0
 3022 011d 14       		.uleb128 0x14
 3023 011e 05       		.uleb128 0x5
 3024 011f 00       		.byte	0
 3025 0120 03       		.uleb128 0x3
 3026 0121 0E       		.uleb128 0xe
 3027 0122 3A       		.uleb128 0x3a
 3028 0123 0B       		.uleb128 0xb
 3029 0124 3B       		.uleb128 0x3b
 3030 0125 05       		.uleb128 0x5
 3031 0126 49       		.uleb128 0x49
 3032 0127 13       		.uleb128 0x13
 3033 0128 02       		.uleb128 0x2
 3034 0129 18       		.uleb128 0x18
 3035 012a 00       		.byte	0
 3036 012b 00       		.byte	0
 3037 012c 15       		.uleb128 0x15
 3038 012d 34       		.uleb128 0x34
 3039 012e 00       		.byte	0
 3040 012f 03       		.uleb128 0x3
 3041 0130 08       		.uleb128 0x8
 3042 0131 3A       		.uleb128 0x3a
 3043 0132 0B       		.uleb128 0xb
 3044 0133 3B       		.uleb128 0x3b
 3045 0134 05       		.uleb128 0x5
 3046 0135 49       		.uleb128 0x49
 3047 0136 13       		.uleb128 0x13
 3048 0137 02       		.uleb128 0x2
 3049 0138 18       		.uleb128 0x18
 3050 0139 00       		.byte	0
 3051 013a 00       		.byte	0
 3052 013b 16       		.uleb128 0x16
 3053 013c 34       		.uleb128 0x34
 3054 013d 00       		.byte	0
 3055 013e 03       		.uleb128 0x3
 3056 013f 0E       		.uleb128 0xe
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 68


 3057 0140 3A       		.uleb128 0x3a
 3058 0141 0B       		.uleb128 0xb
 3059 0142 3B       		.uleb128 0x3b
 3060 0143 05       		.uleb128 0x5
 3061 0144 49       		.uleb128 0x49
 3062 0145 13       		.uleb128 0x13
 3063 0146 02       		.uleb128 0x2
 3064 0147 18       		.uleb128 0x18
 3065 0148 00       		.byte	0
 3066 0149 00       		.byte	0
 3067 014a 17       		.uleb128 0x17
 3068 014b 2E       		.uleb128 0x2e
 3069 014c 01       		.byte	0x1
 3070 014d 3F       		.uleb128 0x3f
 3071 014e 19       		.uleb128 0x19
 3072 014f 03       		.uleb128 0x3
 3073 0150 0E       		.uleb128 0xe
 3074 0151 3A       		.uleb128 0x3a
 3075 0152 0B       		.uleb128 0xb
 3076 0153 3B       		.uleb128 0x3b
 3077 0154 05       		.uleb128 0x5
 3078 0155 27       		.uleb128 0x27
 3079 0156 19       		.uleb128 0x19
 3080 0157 49       		.uleb128 0x49
 3081 0158 13       		.uleb128 0x13
 3082 0159 11       		.uleb128 0x11
 3083 015a 01       		.uleb128 0x1
 3084 015b 12       		.uleb128 0x12
 3085 015c 06       		.uleb128 0x6
 3086 015d 40       		.uleb128 0x40
 3087 015e 18       		.uleb128 0x18
 3088 015f 9642     		.uleb128 0x2116
 3089 0161 19       		.uleb128 0x19
 3090 0162 01       		.uleb128 0x1
 3091 0163 13       		.uleb128 0x13
 3092 0164 00       		.byte	0
 3093 0165 00       		.byte	0
 3094 0166 18       		.uleb128 0x18
 3095 0167 05       		.uleb128 0x5
 3096 0168 00       		.byte	0
 3097 0169 03       		.uleb128 0x3
 3098 016a 08       		.uleb128 0x8
 3099 016b 3A       		.uleb128 0x3a
 3100 016c 0B       		.uleb128 0xb
 3101 016d 3B       		.uleb128 0x3b
 3102 016e 05       		.uleb128 0x5
 3103 016f 49       		.uleb128 0x49
 3104 0170 13       		.uleb128 0x13
 3105 0171 02       		.uleb128 0x2
 3106 0172 18       		.uleb128 0x18
 3107 0173 00       		.byte	0
 3108 0174 00       		.byte	0
 3109 0175 19       		.uleb128 0x19
 3110 0176 2E       		.uleb128 0x2e
 3111 0177 01       		.byte	0x1
 3112 0178 3F       		.uleb128 0x3f
 3113 0179 19       		.uleb128 0x19
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 69


 3114 017a 03       		.uleb128 0x3
 3115 017b 0E       		.uleb128 0xe
 3116 017c 3A       		.uleb128 0x3a
 3117 017d 0B       		.uleb128 0xb
 3118 017e 3B       		.uleb128 0x3b
 3119 017f 05       		.uleb128 0x5
 3120 0180 11       		.uleb128 0x11
 3121 0181 01       		.uleb128 0x1
 3122 0182 12       		.uleb128 0x12
 3123 0183 06       		.uleb128 0x6
 3124 0184 40       		.uleb128 0x40
 3125 0185 18       		.uleb128 0x18
 3126 0186 9642     		.uleb128 0x2116
 3127 0188 19       		.uleb128 0x19
 3128 0189 01       		.uleb128 0x1
 3129 018a 13       		.uleb128 0x13
 3130 018b 00       		.byte	0
 3131 018c 00       		.byte	0
 3132 018d 1A       		.uleb128 0x1a
 3133 018e 2E       		.uleb128 0x2e
 3134 018f 00       		.byte	0
 3135 0190 3F       		.uleb128 0x3f
 3136 0191 19       		.uleb128 0x19
 3137 0192 03       		.uleb128 0x3
 3138 0193 0E       		.uleb128 0xe
 3139 0194 3A       		.uleb128 0x3a
 3140 0195 0B       		.uleb128 0xb
 3141 0196 3B       		.uleb128 0x3b
 3142 0197 05       		.uleb128 0x5
 3143 0198 11       		.uleb128 0x11
 3144 0199 01       		.uleb128 0x1
 3145 019a 12       		.uleb128 0x12
 3146 019b 06       		.uleb128 0x6
 3147 019c 40       		.uleb128 0x40
 3148 019d 18       		.uleb128 0x18
 3149 019e 9642     		.uleb128 0x2116
 3150 01a0 19       		.uleb128 0x19
 3151 01a1 00       		.byte	0
 3152 01a2 00       		.byte	0
 3153 01a3 1B       		.uleb128 0x1b
 3154 01a4 34       		.uleb128 0x34
 3155 01a5 00       		.byte	0
 3156 01a6 03       		.uleb128 0x3
 3157 01a7 0E       		.uleb128 0xe
 3158 01a8 3A       		.uleb128 0x3a
 3159 01a9 0B       		.uleb128 0xb
 3160 01aa 3B       		.uleb128 0x3b
 3161 01ab 05       		.uleb128 0x5
 3162 01ac 49       		.uleb128 0x49
 3163 01ad 13       		.uleb128 0x13
 3164 01ae 3F       		.uleb128 0x3f
 3165 01af 19       		.uleb128 0x19
 3166 01b0 3C       		.uleb128 0x3c
 3167 01b1 19       		.uleb128 0x19
 3168 01b2 00       		.byte	0
 3169 01b3 00       		.byte	0
 3170 01b4 1C       		.uleb128 0x1c
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 70


 3171 01b5 35       		.uleb128 0x35
 3172 01b6 00       		.byte	0
 3173 01b7 49       		.uleb128 0x49
 3174 01b8 13       		.uleb128 0x13
 3175 01b9 00       		.byte	0
 3176 01ba 00       		.byte	0
 3177 01bb 1D       		.uleb128 0x1d
 3178 01bc 34       		.uleb128 0x34
 3179 01bd 00       		.byte	0
 3180 01be 03       		.uleb128 0x3
 3181 01bf 08       		.uleb128 0x8
 3182 01c0 3A       		.uleb128 0x3a
 3183 01c1 0B       		.uleb128 0xb
 3184 01c2 3B       		.uleb128 0x3b
 3185 01c3 0B       		.uleb128 0xb
 3186 01c4 49       		.uleb128 0x49
 3187 01c5 13       		.uleb128 0x13
 3188 01c6 3F       		.uleb128 0x3f
 3189 01c7 19       		.uleb128 0x19
 3190 01c8 02       		.uleb128 0x2
 3191 01c9 18       		.uleb128 0x18
 3192 01ca 00       		.byte	0
 3193 01cb 00       		.byte	0
 3194 01cc 1E       		.uleb128 0x1e
 3195 01cd 34       		.uleb128 0x34
 3196 01ce 00       		.byte	0
 3197 01cf 03       		.uleb128 0x3
 3198 01d0 0E       		.uleb128 0xe
 3199 01d1 3A       		.uleb128 0x3a
 3200 01d2 0B       		.uleb128 0xb
 3201 01d3 3B       		.uleb128 0x3b
 3202 01d4 0B       		.uleb128 0xb
 3203 01d5 49       		.uleb128 0x49
 3204 01d6 13       		.uleb128 0x13
 3205 01d7 3F       		.uleb128 0x3f
 3206 01d8 19       		.uleb128 0x19
 3207 01d9 02       		.uleb128 0x2
 3208 01da 18       		.uleb128 0x18
 3209 01db 00       		.byte	0
 3210 01dc 00       		.byte	0
 3211 01dd 00       		.byte	0
 3212              		.section	.debug_aranges,"",%progbits
 3213 0000 9C000000 		.4byte	0x9c
 3214 0004 0200     		.2byte	0x2
 3215 0006 00000000 		.4byte	.Ldebug_info0
 3216 000a 04       		.byte	0x4
 3217 000b 00       		.byte	0
 3218 000c 0000     		.2byte	0
 3219 000e 0000     		.2byte	0
 3220 0010 00000000 		.4byte	.LFB63
 3221 0014 30000000 		.4byte	.LFE63-.LFB63
 3222 0018 00000000 		.4byte	.LFB64
 3223 001c 18000000 		.4byte	.LFE64-.LFB64
 3224 0020 00000000 		.4byte	.LFB65
 3225 0024 34010000 		.4byte	.LFE65-.LFB65
 3226 0028 00000000 		.4byte	.LFB66
 3227 002c 08020000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 71


 3228 0030 00000000 		.4byte	.LFB67
 3229 0034 CC000000 		.4byte	.LFE67-.LFB67
 3230 0038 00000000 		.4byte	.LFB68
 3231 003c 98000000 		.4byte	.LFE68-.LFB68
 3232 0040 00000000 		.4byte	.LFB69
 3233 0044 24000000 		.4byte	.LFE69-.LFB69
 3234 0048 00000000 		.4byte	.LFB70
 3235 004c B4000000 		.4byte	.LFE70-.LFB70
 3236 0050 00000000 		.4byte	.LFB71
 3237 0054 2A000000 		.4byte	.LFE71-.LFB71
 3238 0058 00000000 		.4byte	.LFB72
 3239 005c 2A000000 		.4byte	.LFE72-.LFB72
 3240 0060 00000000 		.4byte	.LFB73
 3241 0064 52000000 		.4byte	.LFE73-.LFB73
 3242 0068 00000000 		.4byte	.LFB74
 3243 006c 2C000000 		.4byte	.LFE74-.LFB74
 3244 0070 00000000 		.4byte	.LFB75
 3245 0074 40000000 		.4byte	.LFE75-.LFB75
 3246 0078 00000000 		.4byte	.LFB76
 3247 007c 40000000 		.4byte	.LFE76-.LFB76
 3248 0080 00000000 		.4byte	.LFB77
 3249 0084 8C000000 		.4byte	.LFE77-.LFB77
 3250 0088 00000000 		.4byte	.LFB78
 3251 008c 8C000000 		.4byte	.LFE78-.LFB78
 3252 0090 00000000 		.4byte	.LFB79
 3253 0094 2E000000 		.4byte	.LFE79-.LFB79
 3254 0098 00000000 		.4byte	0
 3255 009c 00000000 		.4byte	0
 3256              		.section	.debug_ranges,"",%progbits
 3257              	.Ldebug_ranges0:
 3258 0000 00000000 		.4byte	.LFB63
 3259 0004 30000000 		.4byte	.LFE63
 3260 0008 00000000 		.4byte	.LFB64
 3261 000c 18000000 		.4byte	.LFE64
 3262 0010 00000000 		.4byte	.LFB65
 3263 0014 34010000 		.4byte	.LFE65
 3264 0018 00000000 		.4byte	.LFB66
 3265 001c 08020000 		.4byte	.LFE66
 3266 0020 00000000 		.4byte	.LFB67
 3267 0024 CC000000 		.4byte	.LFE67
 3268 0028 00000000 		.4byte	.LFB68
 3269 002c 98000000 		.4byte	.LFE68
 3270 0030 00000000 		.4byte	.LFB69
 3271 0034 24000000 		.4byte	.LFE69
 3272 0038 00000000 		.4byte	.LFB70
 3273 003c B4000000 		.4byte	.LFE70
 3274 0040 00000000 		.4byte	.LFB71
 3275 0044 2A000000 		.4byte	.LFE71
 3276 0048 00000000 		.4byte	.LFB72
 3277 004c 2A000000 		.4byte	.LFE72
 3278 0050 00000000 		.4byte	.LFB73
 3279 0054 52000000 		.4byte	.LFE73
 3280 0058 00000000 		.4byte	.LFB74
 3281 005c 2C000000 		.4byte	.LFE74
 3282 0060 00000000 		.4byte	.LFB75
 3283 0064 40000000 		.4byte	.LFE75
 3284 0068 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 72


 3285 006c 40000000 		.4byte	.LFE76
 3286 0070 00000000 		.4byte	.LFB77
 3287 0074 8C000000 		.4byte	.LFE77
 3288 0078 00000000 		.4byte	.LFB78
 3289 007c 8C000000 		.4byte	.LFE78
 3290 0080 00000000 		.4byte	.LFB79
 3291 0084 2E000000 		.4byte	.LFE79
 3292 0088 00000000 		.4byte	0
 3293 008c 00000000 		.4byte	0
 3294              		.section	.debug_line,"",%progbits
 3295              	.Ldebug_line0:
 3296 0000 98030000 		.section	.debug_str,"MS",%progbits,1
 3296      02005501 
 3296      00000201 
 3296      FB0E0D00 
 3296      01010101 
 3297              	.LASF70:
 3298 0000 72656164 		.ascii	"reading\000"
 3298      696E6700 
 3299              	.LASF75:
 3300 0008 636F7272 		.ascii	"correctSpeed\000"
 3300      65637453 
 3300      70656564 
 3300      00
 3301              	.LASF45:
 3302 0015 50415353 		.ascii	"PASS\000"
 3302      00
 3303              	.LASF65:
 3304 001a 64656772 		.ascii	"degrees\000"
 3304      65657300 
 3305              	.LASF72:
 3306 0022 616D6F75 		.ascii	"amount\000"
 3306      6E7400
 3307              	.LASF46:
 3308 0029 726F626F 		.ascii	"robot_state\000"
 3308      745F7374 
 3308      61746500 
 3309              	.LASF112:
 3310 0035 73616D70 		.ascii	"sample_count\000"
 3310      6C655F63 
 3310      6F756E74 
 3310      00
 3311              	.LASF8:
 3312 0042 756E7369 		.ascii	"unsigned int\000"
 3312      676E6564 
 3312      20696E74 
 3312      00
 3313              	.LASF78:
 3314 004f 64657369 		.ascii	"desired_count\000"
 3314      7265645F 
 3314      636F756E 
 3314      7400
 3315              	.LASF11:
 3316 005d 5F5F696E 		.ascii	"__int32_t\000"
 3316      7433325F 
 3316      7400
 3317              	.LASF16:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 73


 3318 0067 696E7431 		.ascii	"int16\000"
 3318      3600
 3319              	.LASF108:
 3320 006d 73797374 		.ascii	"system_state\000"
 3320      656D5F73 
 3320      74617465 
 3320      00
 3321              	.LASF74:
 3322 007a 6368616E 		.ascii	"changeRightWheelSpeed\000"
 3322      67655269 
 3322      67687457 
 3322      6865656C 
 3322      53706565 
 3323              	.LASF33:
 3324 0090 67325F78 		.ascii	"g2_xpos\000"
 3324      706F7300 
 3325              	.LASF81:
 3326 0098 636F7272 		.ascii	"correction\000"
 3326      65637469 
 3326      6F6E00
 3327              	.LASF67:
 3328 00a3 64697374 		.ascii	"distance_turned\000"
 3328      616E6365 
 3328      5F747572 
 3328      6E656400 
 3329              	.LASF87:
 3330 00b3 73686172 		.ascii	"sharpTurnLeft\000"
 3330      70547572 
 3330      6E4C6566 
 3330      7400
 3331              	.LASF103:
 3332 00c1 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3332      5F72665F 
 3332      7472616E 
 3332      736D6973 
 3332      73696F6E 
 3333              	.LASF40:
 3334 00dd 4D454449 		.ascii	"MEDIUM_RIGHT\000"
 3334      554D5F52 
 3334      49474854 
 3334      00
 3335              	.LASF89:
 3336 00ea 75736250 		.ascii	"usbPutString\000"
 3336      75745374 
 3336      72696E67 
 3336      00
 3337              	.LASF53:
 3338 00f7 64697265 		.ascii	"directions\000"
 3338      6374696F 
 3338      6E7300
 3339              	.LASF36:
 3340 0102 67325F64 		.ascii	"g2_direction\000"
 3340      69726563 
 3340      74696F6E 
 3340      00
 3341              	.LASF18:
 3342 010f 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 74


 3342      7400
 3343              	.LASF82:
 3344 0115 73657457 		.ascii	"setWheelDirection\000"
 3344      6865656C 
 3344      44697265 
 3344      6374696F 
 3344      6E00
 3345              	.LASF17:
 3346 0127 696E7433 		.ascii	"int32\000"
 3346      3200
 3347              	.LASF77:
 3348 012d 636F756E 		.ascii	"count\000"
 3348      7400
 3349              	.LASF21:
 3350 0133 696E6465 		.ascii	"index\000"
 3350      7800
 3351              	.LASF109:
 3352 0139 73656E73 		.ascii	"sensor_readings\000"
 3352      6F725F72 
 3352      65616469 
 3352      6E677300 
 3353              	.LASF85:
 3354 0149 7475726E 		.ascii	"turnLeft\000"
 3354      4C656674 
 3354      00
 3355              	.LASF37:
 3356 0152 434F5252 		.ascii	"CORRECT\000"
 3356      45435400 
 3357              	.LASF7:
 3358 015a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3358      206C6F6E 
 3358      6720756E 
 3358      7369676E 
 3358      65642069 
 3359              	.LASF100:
 3360 0171 666C6167 		.ascii	"flag_packet\000"
 3360      5F706163 
 3360      6B657400 
 3361              	.LASF121:
 3362 017d 75706461 		.ascii	"updateSensorValues\000"
 3362      74655365 
 3362      6E736F72 
 3362      56616C75 
 3362      657300
 3363              	.LASF38:
 3364 0190 534C4947 		.ascii	"SLIGHTLY_RIGHT\000"
 3364      48544C59 
 3364      5F524947 
 3364      485400
 3365              	.LASF96:
 3366 019f 666C6167 		.ascii	"flag_ts_update\000"
 3366      5F74735F 
 3366      75706461 
 3366      746500
 3367              	.LASF95:
 3368 01ae 666C6167 		.ascii	"flag_ts_enc\000"
 3368      5F74735F 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 75


 3368      656E6300 
 3369              	.LASF111:
 3370 01ba 6164635F 		.ascii	"adc_readings\000"
 3370      72656164 
 3370      696E6773 
 3370      00
 3371              	.LASF93:
 3372 01c7 74735F73 		.ascii	"ts_speed\000"
 3372      70656564 
 3372      00
 3373              	.LASF50:
 3374 01d0 6C656674 		.ascii	"left_wheel_count\000"
 3374      5F776865 
 3374      656C5F63 
 3374      6F756E74 
 3374      00
 3375              	.LASF23:
 3376 01e1 726F626F 		.ascii	"robot_ypos\000"
 3376      745F7970 
 3376      6F7300
 3377              	.LASF94:
 3378 01ec 74735F64 		.ascii	"ts_display\000"
 3378      6973706C 
 3378      617900
 3379              	.LASF10:
 3380 01f7 63686172 		.ascii	"char\000"
 3380      00
 3381              	.LASF107:
 3382 01fc 75736242 		.ascii	"usbBuffer\000"
 3382      75666665 
 3382      7200
 3383              	.LASF27:
 3384 0206 67305F73 		.ascii	"g0_speed\000"
 3384      70656564 
 3384      00
 3385              	.LASF14:
 3386 020f 75696E74 		.ascii	"uint16\000"
 3386      313600
 3387              	.LASF15:
 3388 0216 696E7438 		.ascii	"int8\000"
 3388      00
 3389              	.LASF32:
 3390 021b 67315F64 		.ascii	"g1_direction\000"
 3390      69726563 
 3390      74696F6E 
 3390      00
 3391              	.LASF110:
 3392 0228 6164635F 		.ascii	"adc_flag\000"
 3392      666C6167 
 3392      00
 3393              	.LASF58:
 3394 0231 64657369 		.ascii	"desired_distance\000"
 3394      7265645F 
 3394      64697374 
 3394      616E6365 
 3394      00
 3395              	.LASF63:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 76


 3396 0242 6D325F64 		.ascii	"m2_dist\000"
 3396      69737400 
 3397              	.LASF84:
 3398 024a 72696768 		.ascii	"rightIsForward\000"
 3398      74497346 
 3398      6F727761 
 3398      726400
 3399              	.LASF6:
 3400 0259 6C6F6E67 		.ascii	"long long int\000"
 3400      206C6F6E 
 3400      6720696E 
 3400      7400
 3401              	.LASF52:
 3402 0267 70726576 		.ascii	"prev_state\000"
 3402      5F737461 
 3402      746500
 3403              	.LASF29:
 3404 0272 67315F78 		.ascii	"g1_xpos\000"
 3404      706F7300 
 3405              	.LASF66:
 3406 027a 64697374 		.ascii	"distance_to_turn\000"
 3406      616E6365 
 3406      5F746F5F 
 3406      7475726E 
 3406      00
 3407              	.LASF116:
 3408 028b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3408      4320342E 
 3408      392E3320 
 3408      32303135 
 3408      30333033 
 3409 02be 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3409      20726576 
 3409      6973696F 
 3409      6E203232 
 3409      31323230 
 3410 02f1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3410      66756E63 
 3410      74696F6E 
 3410      2D736563 
 3410      74696F6E 
 3411              	.LASF35:
 3412 0319 67325F73 		.ascii	"g2_speed\000"
 3412      70656564 
 3412      00
 3413              	.LASF26:
 3414 0322 67305F79 		.ascii	"g0_ypos\000"
 3414      706F7300 
 3415              	.LASF88:
 3416 032a 73686172 		.ascii	"sharpTurnRight\000"
 3416      70547572 
 3416      6E526967 
 3416      687400
 3417              	.LASF39:
 3418 0339 534C4947 		.ascii	"SLIGHTLY_LEFT\000"
 3418      48544C59 
 3418      5F4C4546 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 77


 3418      5400
 3419              	.LASF73:
 3420 0347 6E65775F 		.ascii	"new_value\000"
 3420      76616C75 
 3420      6500
 3421              	.LASF119:
 3422 0351 64617461 		.ascii	"data_main\000"
 3422      5F6D6169 
 3422      6E00
 3423              	.LASF69:
 3424 035b 67657456 		.ascii	"getValForChannel\000"
 3424      616C466F 
 3424      72436861 
 3424      6E6E656C 
 3424      00
 3425              	.LASF20:
 3426 036c 72737369 		.ascii	"rssi\000"
 3426      00
 3427              	.LASF28:
 3428 0371 67305F64 		.ascii	"g0_direction\000"
 3428      69726563 
 3428      74696F6E 
 3428      00
 3429              	.LASF55:
 3430 037e 6E756D5F 		.ascii	"num_coords\000"
 3430      636F6F72 
 3430      647300
 3431              	.LASF60:
 3432 0389 70726576 		.ascii	"prevCountM1\000"
 3432      436F756E 
 3432      744D3100 
 3433              	.LASF61:
 3434 0395 70726576 		.ascii	"prevCountM2\000"
 3434      436F756E 
 3434      744D3200 
 3435              	.LASF97:
 3436 03a1 666C6167 		.ascii	"flag_ts_speed\000"
 3436      5F74735F 
 3436      73706565 
 3436      6400
 3437              	.LASF102:
 3438 03af 64617461 		.ascii	"dataready_flag\000"
 3438      72656164 
 3438      795F666C 
 3438      616700
 3439              	.LASF99:
 3440 03be 666C6167 		.ascii	"flag_rx\000"
 3440      5F727800 
 3441              	.LASF2:
 3442 03c6 73686F72 		.ascii	"short int\000"
 3442      7420696E 
 3442      7400
 3443              	.LASF113:
 3444 03d0 636F756E 		.ascii	"countM1\000"
 3444      744D3100 
 3445              	.LASF114:
 3446 03d8 636F756E 		.ascii	"countM2\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 78


 3446      744D3200 
 3447              	.LASF64:
 3448 03e0 7475726E 		.ascii	"turnForDegrees\000"
 3448      466F7244 
 3448      65677265 
 3448      657300
 3449              	.LASF4:
 3450 03ef 6C6F6E67 		.ascii	"long int\000"
 3450      20696E74 
 3450      00
 3451              	.LASF90:
 3452 03f8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3452      52784275 
 3452      66666572 
 3452      00
 3453              	.LASF92:
 3454 0405 74735F75 		.ascii	"ts_update\000"
 3454      70646174 
 3454      6500
 3455              	.LASF59:
 3456 040f 64697374 		.ascii	"distance\000"
 3456      616E6365 
 3456      00
 3457              	.LASF34:
 3458 0418 67325F79 		.ascii	"g2_ypos\000"
 3458      706F7300 
 3459              	.LASF49:
 3460 0420 72696768 		.ascii	"right_wheel_count\000"
 3460      745F7768 
 3460      65656C5F 
 3460      636F756E 
 3460      7400
 3461              	.LASF118:
 3462 0432 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Desktop\\Flik\\CS"
 3462      6C65732E 
 3462      6175636B 
 3462      6C616E64 
 3462      2E61632E 
 3463 045f 3330315F 		.ascii	"301_Class.cyprj.Archive01-20190825T234813Z-001\\CS3"
 3463      436C6173 
 3463      732E6379 
 3463      70726A2E 
 3463      41726368 
 3464 0491 30315F43 		.ascii	"01_Class.cyprj.Archive01\\CS301_Class.cydsn\000"
 3464      6C617373 
 3464      2E637970 
 3464      726A2E41 
 3464      72636869 
 3465              	.LASF41:
 3466 04bc 4D454449 		.ascii	"MEDIUM_LEFT\000"
 3466      554D5F4C 
 3466      45465400 
 3467              	.LASF86:
 3468 04c8 7475726E 		.ascii	"turnRight\000"
 3468      52696768 
 3468      7400
 3469              	.LASF47:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 79


 3470 04d2 454E434F 		.ascii	"ENCODER_ISR\000"
 3470      4445525F 
 3470      49535200 
 3471              	.LASF30:
 3472 04de 67315F79 		.ascii	"g1_ypos\000"
 3472      706F7300 
 3473              	.LASF43:
 3474 04e6 5455524E 		.ascii	"TURN_LEFT\000"
 3474      5F4C4546 
 3474      5400
 3475              	.LASF68:
 3476 04f0 67657444 		.ascii	"getDistance\000"
 3476      69737461 
 3476      6E636500 
 3477              	.LASF9:
 3478 04fc 73697A65 		.ascii	"sizetype\000"
 3478      74797065 
 3478      00
 3479              	.LASF80:
 3480 0505 64696666 		.ascii	"diff_count\000"
 3480      5F636F75 
 3480      6E7400
 3481              	.LASF5:
 3482 0510 6C6F6E67 		.ascii	"long unsigned int\000"
 3482      20756E73 
 3482      69676E65 
 3482      6420696E 
 3482      7400
 3483              	.LASF76:
 3484 0522 70726576 		.ascii	"prevCount\000"
 3484      436F756E 
 3484      7400
 3485              	.LASF51:
 3486 052c 706F6C6C 		.ascii	"polling_count\000"
 3486      696E675F 
 3486      636F756E 
 3486      7400
 3487              	.LASF12:
 3488 053a 696E7433 		.ascii	"int32_t\000"
 3488      325F7400 
 3489              	.LASF22:
 3490 0542 726F626F 		.ascii	"robot_xpos\000"
 3490      745F7870 
 3490      6F7300
 3491              	.LASF106:
 3492 054d 656E7472 		.ascii	"entry\000"
 3492      7900
 3493              	.LASF83:
 3494 0553 6C656674 		.ascii	"leftIsForward\000"
 3494      4973466F 
 3494      72776172 
 3494      6400
 3495              	.LASF1:
 3496 0561 756E7369 		.ascii	"unsigned char\000"
 3496      676E6564 
 3496      20636861 
 3496      7200
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 80


 3497              	.LASF62:
 3498 056f 6D315F64 		.ascii	"m1_dist\000"
 3498      69737400 
 3499              	.LASF105:
 3500 0577 6C696E65 		.ascii	"line\000"
 3500      00
 3501              	.LASF71:
 3502 057c 6368616E 		.ascii	"changeLeftWheelSpeed\000"
 3502      67654C65 
 3502      66745768 
 3502      65656C53 
 3502      70656564 
 3503              	.LASF115:
 3504 0591 74696D65 		.ascii	"timer_flag\000"
 3504      725F666C 
 3504      616700
 3505              	.LASF54:
 3506 059c 64697265 		.ascii	"direction_index\000"
 3506      6374696F 
 3506      6E5F696E 
 3506      64657800 
 3507              	.LASF91:
 3508 05ac 74735F65 		.ascii	"ts_enc\000"
 3508      6E6300
 3509              	.LASF44:
 3510 05b3 534C4F57 		.ascii	"SLOW\000"
 3510      00
 3511              	.LASF98:
 3512 05b8 666C6167 		.ascii	"flag_ts_display\000"
 3512      5F74735F 
 3512      64697370 
 3512      6C617900 
 3513              	.LASF120:
 3514 05c8 73746174 		.ascii	"state\000"
 3514      6500
 3515              	.LASF48:
 3516 05ce 4144435F 		.ascii	"ADC_ISR\000"
 3516      49535200 
 3517              	.LASF104:
 3518 05d6 64697370 		.ascii	"displaystring\000"
 3518      6C617973 
 3518      7472696E 
 3518      6700
 3519              	.LASF0:
 3520 05e4 7369676E 		.ascii	"signed char\000"
 3520      65642063 
 3520      68617200 
 3521              	.LASF3:
 3522 05f0 73686F72 		.ascii	"short unsigned int\000"
 3522      7420756E 
 3522      7369676E 
 3522      65642069 
 3522      6E7400
 3523              	.LASF79:
 3524 0603 69734C65 		.ascii	"isLeftWheel\000"
 3524      66745768 
 3524      65656C00 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cccUw77g.s 			page 81


 3525              	.LASF42:
 3526 060f 5455524E 		.ascii	"TURN_RIGHT\000"
 3526      5F524947 
 3526      485400
 3527              	.LASF24:
 3528 061a 726F626F 		.ascii	"robot_orientation\000"
 3528      745F6F72 
 3528      69656E74 
 3528      6174696F 
 3528      6E00
 3529              	.LASF56:
 3530 062c 6D61696E 		.ascii	"main\000"
 3530      00
 3531              	.LASF13:
 3532 0631 75696E74 		.ascii	"uint8\000"
 3532      3800
 3533              	.LASF19:
 3534 0637 646F7562 		.ascii	"double\000"
 3534      6C6500
 3535              	.LASF57:
 3536 063e 676F5374 		.ascii	"goStraight\000"
 3536      72616967 
 3536      687400
 3537              	.LASF25:
 3538 0649 67305F78 		.ascii	"g0_xpos\000"
 3538      706F7300 
 3539              	.LASF101:
 3540 0651 666C6167 		.ascii	"flag_KB_string\000"
 3540      5F4B425F 
 3540      73747269 
 3540      6E6700
 3541              	.LASF31:
 3542 0660 67315F73 		.ascii	"g1_speed\000"
 3542      70656564 
 3542      00
 3543              	.LASF117:
 3544 0669 2E5C6D61 		.ascii	".\\main.c\000"
 3544      696E2E63 
 3544      00
 3545              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
