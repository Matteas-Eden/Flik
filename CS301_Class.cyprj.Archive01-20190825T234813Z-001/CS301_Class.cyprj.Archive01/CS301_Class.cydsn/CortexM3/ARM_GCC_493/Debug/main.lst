ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	displaystring
  95 0001 000000   		.align	2
  96              		.type	displaystring, %object
  97              		.size	displaystring, 64
  98              	displaystring:
  99 0004 43533330 		.ascii	"CS301 2020\012\000"
  99      31203230 
  99      32300A00 
 100 0010 00000000 		.space	52
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.comm	line,64,4
 102              		.comm	entry,64,4
 103              		.comm	usbBuffer,64,4
 104              		.comm	system_state,32,4
 105              		.global	sensor_readings
 106              		.bss
 107 0012 0000     		.align	2
 108              		.type	sensor_readings, %object
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 3


 109              		.size	sensor_readings, 6
 110              	sensor_readings:
 111 0014 00000000 		.space	6
 111      0000
 112              		.global	adc_flag
 113 001a 0000     		.align	2
 114              		.type	adc_flag, %object
 115              		.size	adc_flag, 4
 116              	adc_flag:
 117 001c 00000000 		.space	4
 118              		.global	adc_readings
 119              		.align	2
 120              		.type	adc_readings, %object
 121              		.size	adc_readings, 24
 122              	adc_readings:
 123 0020 00000000 		.space	24
 123      00000000 
 123      00000000 
 123      00000000 
 123      00000000 
 124              		.global	sample_count
 125              		.align	2
 126              		.type	sample_count, %object
 127              		.size	sample_count, 4
 128              	sample_count:
 129 0038 00000000 		.space	4
 130              		.global	countM1
 131              		.align	2
 132              		.type	countM1, %object
 133              		.size	countM1, 4
 134              	countM1:
 135 003c 00000000 		.space	4
 136              		.global	countM2
 137              		.align	2
 138              		.type	countM2, %object
 139              		.size	countM2, 4
 140              	countM2:
 141 0040 00000000 		.space	4
 142              		.global	timer_flag
 143              		.align	2
 144              		.type	timer_flag, %object
 145              		.size	timer_flag, 4
 146              	timer_flag:
 147 0044 00000000 		.space	4
 148              		.section	.text.ENCODER_ISR,"ax",%progbits
 149              		.align	2
 150              		.global	ENCODER_ISR
 151              		.thumb
 152              		.thumb_func
 153              		.type	ENCODER_ISR, %function
 154              	ENCODER_ISR:
 155              	.LFB63:
 156              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  * Copyright Univ of Auckland, 2016
   3:.\main.c      ****  * All Rights Reserved
   4:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 4


   5:.\main.c      ****  *
   6:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   7:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   8:.\main.c      ****  *
   9:.\main.c      ****  * ================== INCLUDE ======================
  10:.\main.c      **** */
  11:.\main.c      **** #include <stdio.h>
  12:.\main.c      **** #include <string.h>
  13:.\main.c      **** #include <stdlib.h>
  14:.\main.c      **** #include <project.h>
  15:.\main.c      **** 
  16:.\main.c      **** #include "defines.h"
  17:.\main.c      **** #include "vars.h"
  18:.\main.c      **** //* =================== MACROS =====================
  19:.\main.c      **** // SENSOR MAPPINGS
  20:.\main.c      **** #define TOP_LEFT_SENSOR 0
  21:.\main.c      **** #define TOP_MID_SENSOR 1
  22:.\main.c      **** #define TOP_RIGHT_SENSOR 2
  23:.\main.c      **** #define BOTTOM_LEFT_SENSOR 3
  24:.\main.c      **** #define BOTTOM_MID_SENSOR 4
  25:.\main.c      **** #define BOTTOM_RIGHT_SENSOR 5
  26:.\main.c      **** 
  27:.\main.c      **** // LIGHT SENSORS
  28:.\main.c      **** #define NUM_SENSORS 6
  29:.\main.c      **** #define LIGHT_LEVEL 300
  30:.\main.c      **** 
  31:.\main.c      **** // ADC stuff
  32:.\main.c      **** #define ADC_READINGS_SIZE 90
  33:.\main.c      **** 
  34:.\main.c      **** // Speed calculations
  35:.\main.c      **** #define LINEAR_DISTANCE_PER_REV 20.42035225
  36:.\main.c      **** #define TICKS_PER_REV 228
  37:.\main.c      **** #define TIMER_PERIOD 0.03
  38:.\main.c      **** 
  39:.\main.c      **** // Speed control
  40:.\main.c      **** #define DESIRED_COUNT 8
  41:.\main.c      **** #define TURN_SPEED 450
  42:.\main.c      **** #define MIN_PWM_VAL 250
  43:.\main.c      **** 
  44:.\main.c      **** // Straight line test
  45:.\main.c      **** #define CM_BETWEEN_COORDS 24
  46:.\main.c      **** 
  47:.\main.c      **** // 90 degree turn - TODO: Calculate true values
  48:.\main.c      **** #define TICKS_FOR_TURN 190
  49:.\main.c      **** #define TURN_PWM_VAL 225
  50:.\main.c      **** 
  51:.\main.c      **** // Line following macros - require calibration
  52:.\main.c      **** #define ADJUST_SPEED_LARGE 3
  53:.\main.c      **** #define ADJUST_SPEED_SMALL 1
  54:.\main.c      **** #define MAX_SPEED 9
  55:.\main.c      **** #define MIN_SPEED 4
  56:.\main.c      **** #define SLOW_DOWN_SPEED 1
  57:.\main.c      **** 
  58:.\main.c      **** // Debug flag - uncomment when debugging
  59:.\main.c      **** //#define PUTTY
  60:.\main.c      **** #define PRINT_RATE 0x8000
  61:.\main.c      **** //* ================= TPYE DEF =======================
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 5


  62:.\main.c      **** //typedef struct wheel_speed{
  63:.\main.c      **** //    float m1;
  64:.\main.c      **** //    float m2;
  65:.\main.c      **** //} speed;
  66:.\main.c      **** typedef enum robot_state{
  67:.\main.c      ****     CORRECT,
  68:.\main.c      ****     SLIGHTLY_RIGHT,
  69:.\main.c      ****     SLIGHTLY_LEFT,
  70:.\main.c      ****     MEDIUM_RIGHT,
  71:.\main.c      ****     MEDIUM_LEFT,
  72:.\main.c      ****     TURN_RIGHT,
  73:.\main.c      ****     TURN_LEFT,
  74:.\main.c      ****     SLOW,
  75:.\main.c      ****     PASS
  76:.\main.c      **** } robot_state;
  77:.\main.c      **** //* ================= FUNCTIONS =======================
  78:.\main.c      **** void usbPutString(char *s);
  79:.\main.c      **** int getMax(int * readings);
  80:.\main.c      **** 
  81:.\main.c      **** int32 getValForChannel(int16 n);
  82:.\main.c      **** void updateSensorValues();
  83:.\main.c      **** 
  84:.\main.c      **** //speed getSpeed();
  85:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2);
  86:.\main.c      **** void turnRight();
  87:.\main.c      **** void turnLeft();
  88:.\main.c      **** void sharpTurnRight(int *right_wheel_count, int *left_wheel_count);
  89:.\main.c      **** void sharpTurnLeft(int *right_wheel_count, int *left_wheel_count);
  90:.\main.c      **** void turnForDegrees(int degrees);
  91:.\main.c      **** int8 performTurn(int isLeft);
  92:.\main.c      **** 
  93:.\main.c      **** void goStraight(int desired_distance, int *right_speed_count, int *left_wheel_count);
  94:.\main.c      **** void changeRightWheelSpeed(int amount);
  95:.\main.c      **** void changeLeftWheelSpeed(int amount);
  96:.\main.c      **** void invertWheels();
  97:.\main.c      **** void setWheelDirection(int isLeftForward, int isRightForward);
  98:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel);
  99:.\main.c      **** 
 100:.\main.c      **** float resetDecoderCount(float sum);
 101:.\main.c      **** //* ================= GLOBAL VARIABLES =======================
 102:.\main.c      **** // ADC
 103:.\main.c      **** int8 sensor_readings[NUM_SENSORS] = { 0 };
 104:.\main.c      **** volatile int adc_flag = FALSE;
 105:.\main.c      **** int adc_readings[NUM_SENSORS] = { 0 };
 106:.\main.c      **** int sample_count = 0;
 107:.\main.c      **** // Encoder
 108:.\main.c      **** volatile int countM1 = 0;
 109:.\main.c      **** volatile int countM2 = 0;
 110:.\main.c      **** volatile int timer_flag = FALSE;
 111:.\main.c      **** //* ================== ISR ======================
 112:.\main.c      **** CY_ISR(ENCODER_ISR) {
 157              		.loc 1 112 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 6


 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 00AF     		add	r7, sp, #0
 166              		.cfi_def_cfa_register 7
 113:.\main.c      ****     countM1 = QuadDec_M1_GetCounter();
 167              		.loc 1 113 0
 168 0004 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 169 0008 0346     		mov	r3, r0
 170 000a 1A46     		mov	r2, r3
 171 000c 054B     		ldr	r3, .L2
 172 000e 1A60     		str	r2, [r3]
 114:.\main.c      ****     countM2 = QuadDec_M2_GetCounter();
 173              		.loc 1 114 0
 174 0010 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 175 0014 0346     		mov	r3, r0
 176 0016 1A46     		mov	r2, r3
 177 0018 034B     		ldr	r3, .L2+4
 178 001a 1A60     		str	r2, [r3]
 115:.\main.c      ****     timer_flag = TRUE;
 179              		.loc 1 115 0
 180 001c 034B     		ldr	r3, .L2+8
 181 001e 0122     		movs	r2, #1
 182 0020 1A60     		str	r2, [r3]
 116:.\main.c      **** }
 183              		.loc 1 116 0
 184 0022 80BD     		pop	{r7, pc}
 185              	.L3:
 186              		.align	2
 187              	.L2:
 188 0024 00000000 		.word	countM1
 189 0028 00000000 		.word	countM2
 190 002c 00000000 		.word	timer_flag
 191              		.cfi_endproc
 192              	.LFE63:
 193              		.size	ENCODER_ISR, .-ENCODER_ISR
 194              		.section	.text.ADC_ISR,"ax",%progbits
 195              		.align	2
 196              		.global	ADC_ISR
 197              		.thumb
 198              		.thumb_func
 199              		.type	ADC_ISR, %function
 200              	ADC_ISR:
 201              	.LFB64:
 117:.\main.c      **** 
 118:.\main.c      **** /* ### Retrieve and Store Measurements ### */
 119:.\main.c      **** CY_ISR(ADC_ISR) {
 202              		.loc 1 119 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207 0000 80B4     		push	{r7}
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 120:.\main.c      ****     adc_flag = TRUE;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 7


 212              		.loc 1 120 0
 213 0004 034B     		ldr	r3, .L5
 214 0006 0122     		movs	r2, #1
 215 0008 1A60     		str	r2, [r3]
 121:.\main.c      **** }
 216              		.loc 1 121 0
 217 000a BD46     		mov	sp, r7
 218              		.cfi_def_cfa_register 13
 219              		@ sp needed
 220 000c 5DF8047B 		ldr	r7, [sp], #4
 221              		.cfi_restore 7
 222              		.cfi_def_cfa_offset 0
 223 0010 7047     		bx	lr
 224              	.L6:
 225 0012 00BF     		.align	2
 226              	.L5:
 227 0014 00000000 		.word	adc_flag
 228              		.cfi_endproc
 229              	.LFE64:
 230              		.size	ADC_ISR, .-ADC_ISR
 231              		.section	.text.main,"ax",%progbits
 232              		.align	2
 233              		.global	main
 234              		.thumb
 235              		.thumb_func
 236              		.type	main, %function
 237              	main:
 238              	.LFB65:
 122:.\main.c      **** 
 123:.\main.c      **** /** ## Notes
 124:.\main.c      ****     
 125:.\main.c      ****     Ratio of linear distance to quad decoder ticks
 126:.\main.c      ****     One revolution gives a linear distance (in cm)
 127:.\main.c      ****     Each revolution is 57 ticks (228 for 4x mode)
 128:.\main.c      ****     Centimetres per tick = linear distance / countM(1|2)
 129:.\main.c      ****     
 130:.\main.c      ****     Decoder use a 4x count, so each revolution gives 4 counts
 131:.\main.c      ****     Sampling rate is determined by our 100ms timer (might be a little slow)
 132:.\main.c      ****     
 133:.\main.c      ****     ## Algorithm Control Flow
 134:.\main.c      ****     - Get ADC value for each channel
 135:.\main.c      ****     - Get decoder val for M1 & M2
 136:.\main.c      ****     - Use these values to drive the movement of the robot
 137:.\main.c      ****     
 138:.\main.c      **** */
 139:.\main.c      **** 
 140:.\main.c      **** int main()
 141:.\main.c      **** {
 239              		.loc 1 141 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 24
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 247 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 8


 248              		.cfi_def_cfa_offset 32
 249 0004 00AF     		add	r7, sp, #0
 250              		.cfi_def_cfa_register 7
 142:.\main.c      ****     // delay
 143:.\main.c      ****     CyDelay(2000);
 251              		.loc 1 143 0
 252 0006 4FF4FA60 		mov	r0, #2000
 253 000a FFF7FEFF 		bl	CyDelay
 144:.\main.c      ****     
 145:.\main.c      ****     // --------------------------------
 146:.\main.c      ****     // ----- INITIALIZATIONS ----------
 147:.\main.c      ****     // ========================================
 148:.\main.c      ****     CYGlobalIntEnable;
 254              		.loc 1 148 0
 255              	@ 148 ".\main.c" 1
 256 000e 62B6     		CPSIE   i
 257              	@ 0 "" 2
 149:.\main.c      ****     
 150:.\main.c      ****     // PWMs
 151:.\main.c      ****     PWM_1_Start();
 258              		.loc 1 151 0
 259              		.thumb
 260 0010 FFF7FEFF 		bl	PWM_1_Start
 152:.\main.c      ****     PWM_2_Start();
 261              		.loc 1 152 0
 262 0014 FFF7FEFF 		bl	PWM_2_Start
 153:.\main.c      ****     
 154:.\main.c      ****     // Timer for encoder
 155:.\main.c      ****     Timer_TS_Start();
 263              		.loc 1 155 0
 264 0018 FFF7FEFF 		bl	Timer_TS_Start
 156:.\main.c      ****     isr_TS_Start(); // Timer interrupts need to be started independently
 265              		.loc 1 156 0
 266 001c FFF7FEFF 		bl	isr_TS_Start
 157:.\main.c      ****     isr_TS_StartEx(ENCODER_ISR);
 267              		.loc 1 157 0
 268 0020 1948     		ldr	r0, .L8
 269 0022 FFF7FEFF 		bl	isr_TS_StartEx
 158:.\main.c      ****     
 159:.\main.c      ****     // Quad Decoders
 160:.\main.c      ****     QuadDec_M1_Start();
 270              		.loc 1 160 0
 271 0026 FFF7FEFF 		bl	QuadDec_M1_Start
 161:.\main.c      ****     QuadDec_M2_Start();
 272              		.loc 1 161 0
 273 002a FFF7FEFF 		bl	QuadDec_M2_Start
 162:.\main.c      ****     
 163:.\main.c      ****     // ADC
 164:.\main.c      ****     ADC_Start(); // Start ADC
 274              		.loc 1 164 0
 275 002e FFF7FEFF 		bl	ADC_Start
 165:.\main.c      ****     ADC_IRQ_Enable(); // Enable ADC interrupts
 276              		.loc 1 165 0
 277 0032 FFF7FEFF 		bl	ADC_IRQ_Enable
 166:.\main.c      ****     ADC_StartConvert(); // Start conversions
 278              		.loc 1 166 0
 279 0036 FFF7FEFF 		bl	ADC_StartConvert
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 9


 167:.\main.c      ****     isr_eoc_StartEx(ADC_ISR); // link interrupt for ADC
 280              		.loc 1 167 0
 281 003a 1448     		ldr	r0, .L8+4
 282 003c FFF7FEFF 		bl	isr_eoc_StartEx
 168:.\main.c      **** 
 169:.\main.c      ****     // ---------- USB SETUP ------------    
 170:.\main.c      ****     #ifdef USE_USB    
 171:.\main.c      ****         USBUART_Start(0, USBUART_5V_OPERATION);
 283              		.loc 1 171 0
 284 0040 0020     		movs	r0, #0
 285 0042 0121     		movs	r1, #1
 286 0044 FFF7FEFF 		bl	USBUART_Start
 172:.\main.c      ****     #endif            
 173:.\main.c      ****     
 174:.\main.c      ****     // To make sure wheels rotate in the same direction i.e. forward
 175:.\main.c      ****     INV2_Write(1);
 287              		.loc 1 175 0
 288 0048 0120     		movs	r0, #1
 289 004a FFF7FEFF 		bl	INV2_Write
 176:.\main.c      ****     
 177:.\main.c      ****     // Storing count values
 178:.\main.c      ****     int prevCountM1 = 0;
 290              		.loc 1 178 0
 291 004e 0023     		movs	r3, #0
 292 0050 7B61     		str	r3, [r7, #20]
 179:.\main.c      ****     int prevCountM2 = 0;
 293              		.loc 1 179 0
 294 0052 0023     		movs	r3, #0
 295 0054 3B61     		str	r3, [r7, #16]
 180:.\main.c      ****     int right_wheel_count = DESIRED_COUNT;
 296              		.loc 1 180 0
 297 0056 0823     		movs	r3, #8
 298 0058 7B60     		str	r3, [r7, #4]
 181:.\main.c      ****     int left_wheel_count = DESIRED_COUNT;
 299              		.loc 1 181 0
 300 005a 0823     		movs	r3, #8
 301 005c 3B60     		str	r3, [r7]
 182:.\main.c      ****     int polling_count = 0;
 302              		.loc 1 182 0
 303 005e 0023     		movs	r3, #0
 304 0060 FB60     		str	r3, [r7, #12]
 183:.\main.c      ****     
 184:.\main.c      ****     robot_state state;
 185:.\main.c      ****     robot_state prev_state = CORRECT;
 305              		.loc 1 185 0
 306 0062 0023     		movs	r3, #0
 307 0064 FB72     		strb	r3, [r7, #11]
 186:.\main.c      ****     
 187:.\main.c      ****     //goStraight(CM_BETWEEN_COORDS, &right_wheel_count, &left_wheel_count);
 188:.\main.c      ****     sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 308              		.loc 1 188 0
 309 0066 3A1D     		adds	r2, r7, #4
 310 0068 3B46     		mov	r3, r7
 311 006a 1046     		mov	r0, r2
 312 006c 1946     		mov	r1, r3
 313 006e FFF7FEFF 		bl	sharpTurnLeft
 189:.\main.c      ****     
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 10


 190:.\main.c      ****     PWM_1_WriteCompare(0);
 314              		.loc 1 190 0
 315 0072 0020     		movs	r0, #0
 316 0074 FFF7FEFF 		bl	PWM_1_WriteCompare
 191:.\main.c      ****     PWM_2_WriteCompare(0);
 317              		.loc 1 191 0
 318 0078 0020     		movs	r0, #0
 319 007a FFF7FEFF 		bl	PWM_2_WriteCompare
 192:.\main.c      ****     
 193:.\main.c      **** //    while(1) { // Begin main control
 194:.\main.c      **** //        polling_count++;
 195:.\main.c      **** //        
 196:.\main.c      **** //        if (adc_flag) {
 197:.\main.c      **** //            updateSensorValues();
 198:.\main.c      **** //            adc_flag = FALSE;
 199:.\main.c      **** //        }
 200:.\main.c      **** //        
 201:.\main.c      **** //         // New count values from encoder are ready
 202:.\main.c      **** //        if (timer_flag){
 203:.\main.c      **** //            isr_TS_Disable();
 204:.\main.c      **** //            
 205:.\main.c      **** //            // Correct speed
 206:.\main.c      **** //            correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 207:.\main.c      **** //            correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 208:.\main.c      **** //            
 209:.\main.c      **** //            // Update previous values
 210:.\main.c      **** //            prevCountM1 = countM1;
 211:.\main.c      **** //            prevCountM2 = countM2;
 212:.\main.c      **** //            
 213:.\main.c      **** //            // Reset flag
 214:.\main.c      **** //            timer_flag = FALSE;
 215:.\main.c      **** //            
 216:.\main.c      **** //            isr_TS_Enable();
 217:.\main.c      **** //        }
 218:.\main.c      **** //        
 219:.\main.c      **** //       // follow a line algorithm
 220:.\main.c      **** //        if (sensor_readings[TOP_MID_SENSOR]) { // on line
 221:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 222:.\main.c      **** //                state = SLIGHTLY_RIGHT;
 223:.\main.c      **** //                right_wheel_count -= ADJUST_SPEED_SMALL;
 224:.\main.c      **** //                left_wheel_count += ADJUST_SPEED_SMALL;
 225:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { 
 226:.\main.c      **** //                state = SLIGHTLY_LEFT;
 227:.\main.c      **** //                right_wheel_count += ADJUST_SPEED_SMALL;
 228:.\main.c      **** //                left_wheel_count -= ADJUST_SPEED_SMALL;
 229:.\main.c      **** //            } else { // Correct speed
 230:.\main.c      **** //                state = CORRECT;
 231:.\main.c      **** //            }
 232:.\main.c      **** //        } else { // moved off
 233:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 234:.\main.c      **** //                state = MEDIUM_RIGHT;
 235:.\main.c      **** //                turnRight();
 236:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {/
 237:.\main.c      **** //                state = MEDIUM_LEFT;
 238:.\main.c      **** //				turnLeft();
 239:.\main.c      **** //            // for corners
 240:.\main.c      **** //            } else if (!sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 11


 241:.\main.c      **** //                if (sensor_readings[BOTTOM_LEFT_SENSOR]) {
 242:.\main.c      **** //                    state = TURN_LEFT;
 243:.\main.c      **** //                    sharpTurnLeft();
 244:.\main.c      **** //                } else if (sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 245:.\main.c      **** //                    state = TURN_RIGHT;
 246:.\main.c      **** //                    sharpTurnRight();
 247:.\main.c      **** //                 // slow down in preperation for a sharp turn
 248:.\main.c      **** //                } else if (left_wheel_count > MIN_SPEED && right_wheel_count > MIN_SPEED) {
 249:.\main.c      **** //                    state = SLOW;
 250:.\main.c      **** //                    right_wheel_count -= SLOW_DOWN_SPEED;
 251:.\main.c      **** //                    left_wheel_count -= SLOW_DOWN_SPEED;
 252:.\main.c      **** //                } else {
 253:.\main.c      **** //                    state = PASS;
 254:.\main.c      **** //                }
 255:.\main.c      **** //            }
 256:.\main.c      **** //        }
 257:.\main.c      **** //        
 258:.\main.c      **** //        if (right_wheel_count > MAX_SPEED) {
 259:.\main.c      **** //            right_wheel_count = MAX_SPEED;
 260:.\main.c      **** //        }
 261:.\main.c      **** //        if (left_wheel_count > MAX_SPEED) {
 262:.\main.c      **** //            left_wheel_count = MAX_SPEED;
 263:.\main.c      **** //        }
 264:.\main.c      **** //        if (right_wheel_count < MIN_SPEED) {
 265:.\main.c      **** //            right_wheel_count = MIN_SPEED;
 266:.\main.c      **** //        }
 267:.\main.c      **** //        if (left_wheel_count < MIN_SPEED) {
 268:.\main.c      **** //            left_wheel_count = MIN_SPEED;
 269:.\main.c      **** //        }
 270:.\main.c      **** //        
 271:.\main.c      **** ////        if (polling_count == PRINT_RATE) {
 272:.\main.c      **** //        if (prev_state != state) {
 273:.\main.c      **** //            if (state == SLIGHTLY_LEFT) {
 274:.\main.c      **** //                usbPutString("SLIGHTLY_LEFT\r\n");
 275:.\main.c      **** //            } else if (state == SLIGHTLY_RIGHT) {
 276:.\main.c      **** //                usbPutString("SLIGHTLY_RIGHT\r\n");
 277:.\main.c      **** //            } else if (state == MEDIUM_LEFT) {
 278:.\main.c      **** //                usbPutString("MEDIUM_LEFT\r\n");
 279:.\main.c      **** //            } else if (state == MEDIUM_RIGHT) {
 280:.\main.c      **** //                usbPutString("MEDIUM_RIGHT\r\n");
 281:.\main.c      **** //            } else if (state == TURN_LEFT) {
 282:.\main.c      **** //                usbPutString("TURN_LEFT\r\n");
 283:.\main.c      **** //            } else if (state == TURN_RIGHT) {
 284:.\main.c      **** //                usbPutString("TURN_RIGHT\r\n");
 285:.\main.c      **** //            } else if (state == SLOW) {
 286:.\main.c      **** //                usbPutString("SLOW\r\n");
 287:.\main.c      **** //            } else if (state == PASS) {
 288:.\main.c      **** //                usbPutString("PASS\r\n");
 289:.\main.c      **** //            } else if (state == CORRECT) {
 290:.\main.c      **** //                usbPutString("CORRECT\r\n");
 291:.\main.c      **** //            }
 292:.\main.c      **** //            prev_state = state;
 293:.\main.c      **** //        }
 294:.\main.c      **** //                
 295:.\main.c      **** //                
 296:.\main.c      **** //        if (polling_count == PRINT_RATE) polling_count = 0;
 297:.\main.c      **** //    }
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 12


 298:.\main.c      **** }
 320              		.loc 1 298 0
 321 007e 1846     		mov	r0, r3
 322 0080 1837     		adds	r7, r7, #24
 323              		.cfi_def_cfa_offset 8
 324 0082 BD46     		mov	sp, r7
 325              		.cfi_def_cfa_register 13
 326              		@ sp needed
 327 0084 80BD     		pop	{r7, pc}
 328              	.L9:
 329 0086 00BF     		.align	2
 330              	.L8:
 331 0088 00000000 		.word	ENCODER_ISR
 332 008c 00000000 		.word	ADC_ISR
 333              		.cfi_endproc
 334              	.LFE65:
 335              		.size	main, .-main
 336              		.global	__aeabi_fadd
 337              		.global	__aeabi_i2f
 338              		.global	__aeabi_fcmpgt
 339              		.section	.text.goStraight,"ax",%progbits
 340              		.align	2
 341              		.global	goStraight
 342              		.thumb
 343              		.thumb_func
 344              		.type	goStraight, %function
 345              	goStraight:
 346              	.LFB66:
 299:.\main.c      **** 
 300:.\main.c      **** 
 301:.\main.c      **** /* Template code */
 302:.\main.c      **** /*
 303:.\main.c      ****     while(TRUE){
 304:.\main.c      ****         
 305:.\main.c      ****         // Update sensor values from ADC
 306:.\main.c      ****         if (adc_flag){
 307:.\main.c      ****             updateSensorValues();
 308:.\main.c      ****             adc_flag = FALSE;
 309:.\main.c      ****         }
 310:.\main.c      ****         // Update distance and speed of robot
 311:.\main.c      ****         if (timer_flag){
 312:.\main.c      ****             isr_TS_Disable();
 313:.\main.c      ****             
 314:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 315:.\main.c      ****             
 316:.\main.c      ****             // Correct speed
 317:.\main.c      ****             correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 318:.\main.c      ****             correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 319:.\main.c      ****             
 320:.\main.c      ****             // Update previous values
 321:.\main.c      ****             prevCountM1 = countM1;
 322:.\main.c      ****             prevCountM2 = countM2;
 323:.\main.c      ****             
 324:.\main.c      ****             // Reset flag
 325:.\main.c      ****             timer_flag = FALSE;
 326:.\main.c      ****             
 327:.\main.c      ****             isr_TS_Enable();
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 13


 328:.\main.c      ****         }
 329:.\main.c      **** 
 330:.\main.c      ****         // Execute next instruction in queue after reaching a certain distance
 331:.\main.c      ****         if (distance == NODE_DISTANCE){
 332:.\main.c      ****             // Execute the next instruction (uses function pointers)
 333:.\main.c      ****             instructions[instruction_count]();
 334:.\main.c      ****             instruction_count++;
 335:.\main.c      ****             distance = 0;
 336:.\main.c      ****         }
 337:.\main.c      ****     }
 338:.\main.c      **** */
 339:.\main.c      **** 
 340:.\main.c      **** void goStraight(int desired_distance, int *right_wheel_count, int *left_wheel_count) {
 347              		.loc 1 340 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 32
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 0000 80B5     		push	{r7, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 88B0     		sub	sp, sp, #32
 356              		.cfi_def_cfa_offset 40
 357 0004 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 359 0006 F860     		str	r0, [r7, #12]
 360 0008 B960     		str	r1, [r7, #8]
 361 000a 7A60     		str	r2, [r7, #4]
 341:.\main.c      ****     // Storing count values
 342:.\main.c      ****     int prevCountM1 = 0;
 362              		.loc 1 342 0
 363 000c 0023     		movs	r3, #0
 364 000e FB61     		str	r3, [r7, #28]
 343:.\main.c      ****     int prevCountM2 = 0;
 365              		.loc 1 343 0
 366 0010 0023     		movs	r3, #0
 367 0012 BB61     		str	r3, [r7, #24]
 344:.\main.c      **** //    int right_wheel_count = DESIRED_COUNT;
 345:.\main.c      **** //    int left_wheel_count = DESIRED_COUNT;
 346:.\main.c      ****     float distance = 0;
 368              		.loc 1 346 0
 369 0014 4FF00003 		mov	r3, #0
 370 0018 7B61     		str	r3, [r7, #20]	@ float
 347:.\main.c      ****         
 348:.\main.c      ****     while (distance < desired_distance) {
 371              		.loc 1 348 0
 372 001a 93E0     		b	.L11
 373              	.L22:
 349:.\main.c      ****         if (adc_flag) {
 374              		.loc 1 349 0
 375 001c 514B     		ldr	r3, .L23
 376 001e 1B68     		ldr	r3, [r3]
 377 0020 002B     		cmp	r3, #0
 378 0022 04D0     		beq	.L12
 350:.\main.c      ****             updateSensorValues();
 379              		.loc 1 350 0
 380 0024 FFF7FEFF 		bl	updateSensorValues
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 14


 351:.\main.c      ****             adc_flag = FALSE;
 381              		.loc 1 351 0
 382 0028 4E4B     		ldr	r3, .L23
 383 002a 0022     		movs	r2, #0
 384 002c 1A60     		str	r2, [r3]
 385              	.L12:
 352:.\main.c      ****         }
 353:.\main.c      ****         
 354:.\main.c      ****          // New count values from encoder are ready
 355:.\main.c      ****         if (timer_flag){
 386              		.loc 1 355 0
 387 002e 4E4B     		ldr	r3, .L23+4
 388 0030 1B68     		ldr	r3, [r3]
 389 0032 002B     		cmp	r3, #0
 390 0034 2BD0     		beq	.L13
 356:.\main.c      ****             isr_TS_Disable();
 391              		.loc 1 356 0
 392 0036 FFF7FEFF 		bl	isr_TS_Disable
 357:.\main.c      ****             
 358:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 393              		.loc 1 358 0
 394 003a F869     		ldr	r0, [r7, #28]
 395 003c B969     		ldr	r1, [r7, #24]
 396 003e FFF7FEFF 		bl	getDistance
 397 0042 0346     		mov	r3, r0
 398 0044 7869     		ldr	r0, [r7, #20]	@ float
 399 0046 1946     		mov	r1, r3
 400 0048 FFF7FEFF 		bl	__aeabi_fadd
 401 004c 0346     		mov	r3, r0
 402 004e 7B61     		str	r3, [r7, #20]	@ float
 359:.\main.c      ****             
 360:.\main.c      ****             // Correct speed
 361:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 403              		.loc 1 361 0
 404 0050 464B     		ldr	r3, .L23+8
 405 0052 1A68     		ldr	r2, [r3]
 406 0054 7B68     		ldr	r3, [r7, #4]
 407 0056 1B68     		ldr	r3, [r3]
 408 0058 F869     		ldr	r0, [r7, #28]
 409 005a 1146     		mov	r1, r2
 410 005c 1A46     		mov	r2, r3
 411 005e 0123     		movs	r3, #1
 412 0060 FFF7FEFF 		bl	correctSpeed
 362:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 413              		.loc 1 362 0
 414 0064 424B     		ldr	r3, .L23+12
 415 0066 1A68     		ldr	r2, [r3]
 416 0068 BB68     		ldr	r3, [r7, #8]
 417 006a 1B68     		ldr	r3, [r3]
 418 006c B869     		ldr	r0, [r7, #24]
 419 006e 1146     		mov	r1, r2
 420 0070 1A46     		mov	r2, r3
 421 0072 0023     		movs	r3, #0
 422 0074 FFF7FEFF 		bl	correctSpeed
 363:.\main.c      ****             
 364:.\main.c      ****             // Update previous values
 365:.\main.c      ****             prevCountM1 = countM1;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 15


 423              		.loc 1 365 0
 424 0078 3C4B     		ldr	r3, .L23+8
 425 007a 1B68     		ldr	r3, [r3]
 426 007c FB61     		str	r3, [r7, #28]
 366:.\main.c      ****             prevCountM2 = countM2;
 427              		.loc 1 366 0
 428 007e 3C4B     		ldr	r3, .L23+12
 429 0080 1B68     		ldr	r3, [r3]
 430 0082 BB61     		str	r3, [r7, #24]
 367:.\main.c      ****             
 368:.\main.c      ****             // Reset flag
 369:.\main.c      ****             timer_flag = FALSE;
 431              		.loc 1 369 0
 432 0084 384B     		ldr	r3, .L23+4
 433 0086 0022     		movs	r2, #0
 434 0088 1A60     		str	r2, [r3]
 370:.\main.c      ****             
 371:.\main.c      ****             isr_TS_Enable();
 435              		.loc 1 371 0
 436 008a FFF7FEFF 		bl	isr_TS_Enable
 437              	.L13:
 372:.\main.c      ****         }
 373:.\main.c      ****         
 374:.\main.c      ****         // follow a line algorithm
 375:.\main.c      ****         if (sensor_readings[TOP_MID_SENSOR]) { // on line
 438              		.loc 1 375 0
 439 008e 394B     		ldr	r3, .L23+16
 440 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 441 0092 002B     		cmp	r3, #0
 442 0094 25D0     		beq	.L14
 376:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 443              		.loc 1 376 0
 444 0096 374B     		ldr	r3, .L23+16
 445 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 446 009a 002B     		cmp	r3, #0
 447 009c 0ED1     		bne	.L15
 448              		.loc 1 376 0 is_stmt 0 discriminator 1
 449 009e 354B     		ldr	r3, .L23+16
 450 00a0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 451 00a2 002B     		cmp	r3, #0
 452 00a4 0AD0     		beq	.L15
 377:.\main.c      ****                 *right_wheel_count -= ADJUST_SPEED_SMALL;
 453              		.loc 1 377 0 is_stmt 1
 454 00a6 BB68     		ldr	r3, [r7, #8]
 455 00a8 1B68     		ldr	r3, [r3]
 456 00aa 5A1E     		subs	r2, r3, #1
 457 00ac BB68     		ldr	r3, [r7, #8]
 458 00ae 1A60     		str	r2, [r3]
 378:.\main.c      ****                 *left_wheel_count += ADJUST_SPEED_SMALL;
 459              		.loc 1 378 0
 460 00b0 7B68     		ldr	r3, [r7, #4]
 461 00b2 1B68     		ldr	r3, [r3]
 462 00b4 5A1C     		adds	r2, r3, #1
 463 00b6 7B68     		ldr	r3, [r7, #4]
 464 00b8 1A60     		str	r2, [r3]
 465 00ba 27E0     		b	.L17
 466              	.L15:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 16


 379:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { //
 467              		.loc 1 379 0
 468 00bc 2D4B     		ldr	r3, .L23+16
 469 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 470 00c0 002B     		cmp	r3, #0
 471 00c2 23D0     		beq	.L17
 472              		.loc 1 379 0 is_stmt 0 discriminator 1
 473 00c4 2B4B     		ldr	r3, .L23+16
 474 00c6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 475 00c8 002B     		cmp	r3, #0
 476 00ca 1FD1     		bne	.L17
 380:.\main.c      ****                 *right_wheel_count += ADJUST_SPEED_SMALL;
 477              		.loc 1 380 0 is_stmt 1
 478 00cc BB68     		ldr	r3, [r7, #8]
 479 00ce 1B68     		ldr	r3, [r3]
 480 00d0 5A1C     		adds	r2, r3, #1
 481 00d2 BB68     		ldr	r3, [r7, #8]
 482 00d4 1A60     		str	r2, [r3]
 381:.\main.c      ****                 *left_wheel_count -= ADJUST_SPEED_SMALL;
 483              		.loc 1 381 0
 484 00d6 7B68     		ldr	r3, [r7, #4]
 485 00d8 1B68     		ldr	r3, [r3]
 486 00da 5A1E     		subs	r2, r3, #1
 487 00dc 7B68     		ldr	r3, [r7, #4]
 488 00de 1A60     		str	r2, [r3]
 489 00e0 14E0     		b	.L17
 490              	.L14:
 382:.\main.c      ****             } else { // Correct speed
 383:.\main.c      ****             }
 384:.\main.c      ****         } else { // moved off
 385:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 491              		.loc 1 385 0
 492 00e2 244B     		ldr	r3, .L23+16
 493 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494 00e6 002B     		cmp	r3, #0
 495 00e8 06D1     		bne	.L18
 496              		.loc 1 385 0 is_stmt 0 discriminator 1
 497 00ea 224B     		ldr	r3, .L23+16
 498 00ec 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 499 00ee 002B     		cmp	r3, #0
 500 00f0 02D0     		beq	.L18
 386:.\main.c      ****                 turnRight();
 501              		.loc 1 386 0 is_stmt 1
 502 00f2 FFF7FEFF 		bl	turnRight
 503 00f6 09E0     		b	.L17
 504              	.L18:
 387:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {// 
 505              		.loc 1 387 0
 506 00f8 1E4B     		ldr	r3, .L23+16
 507 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 508 00fc 002B     		cmp	r3, #0
 509 00fe 05D0     		beq	.L17
 510              		.loc 1 387 0 is_stmt 0 discriminator 1
 511 0100 1C4B     		ldr	r3, .L23+16
 512 0102 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 513 0104 002B     		cmp	r3, #0
 514 0106 01D1     		bne	.L17
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 17


 388:.\main.c      **** 				turnLeft();
 515              		.loc 1 388 0 is_stmt 1
 516 0108 FFF7FEFF 		bl	turnLeft
 517              	.L17:
 389:.\main.c      ****             }
 390:.\main.c      ****         }
 391:.\main.c      ****         
 392:.\main.c      ****         if (*right_wheel_count > MAX_SPEED) {
 518              		.loc 1 392 0
 519 010c BB68     		ldr	r3, [r7, #8]
 520 010e 1B68     		ldr	r3, [r3]
 521 0110 092B     		cmp	r3, #9
 522 0112 02DD     		ble	.L19
 393:.\main.c      ****             *right_wheel_count = MAX_SPEED;
 523              		.loc 1 393 0
 524 0114 BB68     		ldr	r3, [r7, #8]
 525 0116 0922     		movs	r2, #9
 526 0118 1A60     		str	r2, [r3]
 527              	.L19:
 394:.\main.c      ****         }
 395:.\main.c      ****         if (*left_wheel_count > MAX_SPEED) {
 528              		.loc 1 395 0
 529 011a 7B68     		ldr	r3, [r7, #4]
 530 011c 1B68     		ldr	r3, [r3]
 531 011e 092B     		cmp	r3, #9
 532 0120 02DD     		ble	.L20
 396:.\main.c      ****             *left_wheel_count = MAX_SPEED;
 533              		.loc 1 396 0
 534 0122 7B68     		ldr	r3, [r7, #4]
 535 0124 0922     		movs	r2, #9
 536 0126 1A60     		str	r2, [r3]
 537              	.L20:
 397:.\main.c      ****         }
 398:.\main.c      ****         if (*right_wheel_count < MIN_SPEED) {
 538              		.loc 1 398 0
 539 0128 BB68     		ldr	r3, [r7, #8]
 540 012a 1B68     		ldr	r3, [r3]
 541 012c 032B     		cmp	r3, #3
 542 012e 02DC     		bgt	.L21
 399:.\main.c      ****             *right_wheel_count = MIN_SPEED;
 543              		.loc 1 399 0
 544 0130 BB68     		ldr	r3, [r7, #8]
 545 0132 0422     		movs	r2, #4
 546 0134 1A60     		str	r2, [r3]
 547              	.L21:
 400:.\main.c      ****         }
 401:.\main.c      ****         if (*left_wheel_count < MIN_SPEED) {
 548              		.loc 1 401 0
 549 0136 7B68     		ldr	r3, [r7, #4]
 550 0138 1B68     		ldr	r3, [r3]
 551 013a 032B     		cmp	r3, #3
 552 013c 02DC     		bgt	.L11
 402:.\main.c      ****             *left_wheel_count = MIN_SPEED;
 553              		.loc 1 402 0
 554 013e 7B68     		ldr	r3, [r7, #4]
 555 0140 0422     		movs	r2, #4
 556 0142 1A60     		str	r2, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 18


 557              	.L11:
 348:.\main.c      ****         if (adc_flag) {
 558              		.loc 1 348 0
 559 0144 F868     		ldr	r0, [r7, #12]
 560 0146 FFF7FEFF 		bl	__aeabi_i2f
 561 014a 0346     		mov	r3, r0
 562 014c 1846     		mov	r0, r3
 563 014e 7969     		ldr	r1, [r7, #20]	@ float
 564 0150 FFF7FEFF 		bl	__aeabi_fcmpgt
 565 0154 0346     		mov	r3, r0
 566 0156 002B     		cmp	r3, #0
 567 0158 7FF460AF 		bne	.L22
 403:.\main.c      ****         }
 404:.\main.c      ****     }
 405:.\main.c      **** }
 568              		.loc 1 405 0
 569 015c 2037     		adds	r7, r7, #32
 570              		.cfi_def_cfa_offset 8
 571 015e BD46     		mov	sp, r7
 572              		.cfi_def_cfa_register 13
 573              		@ sp needed
 574 0160 80BD     		pop	{r7, pc}
 575              	.L24:
 576 0162 00BF     		.align	2
 577              	.L23:
 578 0164 00000000 		.word	adc_flag
 579 0168 00000000 		.word	timer_flag
 580 016c 00000000 		.word	countM1
 581 0170 00000000 		.word	countM2
 582 0174 00000000 		.word	sensor_readings
 583              		.cfi_endproc
 584              	.LFE66:
 585              		.size	goStraight, .-goStraight
 586              		.global	__aeabi_fdiv
 587              		.global	__aeabi_f2d
 588              		.global	__aeabi_dmul
 589              		.global	__aeabi_d2f
 590              		.section	.text.getDistance,"ax",%progbits
 591              		.align	2
 592              		.global	getDistance
 593              		.thumb
 594              		.thumb_func
 595              		.type	getDistance, %function
 596              	getDistance:
 597              	.LFB67:
 406:.\main.c      **** 
 407:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2){
 598              		.loc 1 407 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 16
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 0000 80B5     		push	{r7, lr}
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 7, -8
 605              		.cfi_offset 14, -4
 606 0002 84B0     		sub	sp, sp, #16
 607              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 19


 608 0004 00AF     		add	r7, sp, #0
 609              		.cfi_def_cfa_register 7
 610 0006 7860     		str	r0, [r7, #4]
 611 0008 3960     		str	r1, [r7]
 408:.\main.c      ****     float m1_dist = ((float)abs(countM1 - prevCountM1) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 612              		.loc 1 408 0
 613 000a 2D4B     		ldr	r3, .L27+8
 614 000c 1A68     		ldr	r2, [r3]
 615 000e 7B68     		ldr	r3, [r7, #4]
 616 0010 D31A     		subs	r3, r2, r3
 617 0012 002B     		cmp	r3, #0
 618 0014 B8BF     		it	lt
 619 0016 5B42     		rsblt	r3, r3, #0
 620 0018 1846     		mov	r0, r3
 621 001a FFF7FEFF 		bl	__aeabi_i2f
 622 001e 0346     		mov	r3, r0
 623 0020 1846     		mov	r0, r3
 624 0022 2849     		ldr	r1, .L27+12
 625 0024 FFF7FEFF 		bl	__aeabi_fdiv
 626 0028 0346     		mov	r3, r0
 627 002a 1846     		mov	r0, r3
 628 002c FFF7FEFF 		bl	__aeabi_f2d
 629 0030 0246     		mov	r2, r0
 630 0032 0B46     		mov	r3, r1
 631 0034 1046     		mov	r0, r2
 632 0036 1946     		mov	r1, r3
 633 0038 1FA3     		adr	r3, .L27
 634 003a D3E90023 		ldrd	r2, [r3]
 635 003e FFF7FEFF 		bl	__aeabi_dmul
 636 0042 0246     		mov	r2, r0
 637 0044 0B46     		mov	r3, r1
 638 0046 1046     		mov	r0, r2
 639 0048 1946     		mov	r1, r3
 640 004a FFF7FEFF 		bl	__aeabi_d2f
 641 004e 0346     		mov	r3, r0
 642 0050 FB60     		str	r3, [r7, #12]	@ float
 409:.\main.c      ****     float m2_dist = ((float)abs(countM2 - prevCountM2) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 643              		.loc 1 409 0
 644 0052 1D4B     		ldr	r3, .L27+16
 645 0054 1A68     		ldr	r2, [r3]
 646 0056 3B68     		ldr	r3, [r7]
 647 0058 D31A     		subs	r3, r2, r3
 648 005a 002B     		cmp	r3, #0
 649 005c B8BF     		it	lt
 650 005e 5B42     		rsblt	r3, r3, #0
 651 0060 1846     		mov	r0, r3
 652 0062 FFF7FEFF 		bl	__aeabi_i2f
 653 0066 0346     		mov	r3, r0
 654 0068 1846     		mov	r0, r3
 655 006a 1649     		ldr	r1, .L27+12
 656 006c FFF7FEFF 		bl	__aeabi_fdiv
 657 0070 0346     		mov	r3, r0
 658 0072 1846     		mov	r0, r3
 659 0074 FFF7FEFF 		bl	__aeabi_f2d
 660 0078 0246     		mov	r2, r0
 661 007a 0B46     		mov	r3, r1
 662 007c 1046     		mov	r0, r2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 20


 663 007e 1946     		mov	r1, r3
 664 0080 0DA3     		adr	r3, .L27
 665 0082 D3E90023 		ldrd	r2, [r3]
 666 0086 FFF7FEFF 		bl	__aeabi_dmul
 667 008a 0246     		mov	r2, r0
 668 008c 0B46     		mov	r3, r1
 669 008e 1046     		mov	r0, r2
 670 0090 1946     		mov	r1, r3
 671 0092 FFF7FEFF 		bl	__aeabi_d2f
 672 0096 0346     		mov	r3, r0
 673 0098 BB60     		str	r3, [r7, #8]	@ float
 410:.\main.c      ****     return (m1_dist + m2_dist) / 2;
 674              		.loc 1 410 0
 675 009a F868     		ldr	r0, [r7, #12]	@ float
 676 009c B968     		ldr	r1, [r7, #8]	@ float
 677 009e FFF7FEFF 		bl	__aeabi_fadd
 678 00a2 0346     		mov	r3, r0
 679 00a4 1846     		mov	r0, r3
 680 00a6 4FF08041 		mov	r1, #1073741824
 681 00aa FFF7FEFF 		bl	__aeabi_fdiv
 682 00ae 0346     		mov	r3, r0
 411:.\main.c      **** };
 683              		.loc 1 411 0
 684 00b0 1846     		mov	r0, r3
 685 00b2 1037     		adds	r7, r7, #16
 686              		.cfi_def_cfa_offset 8
 687 00b4 BD46     		mov	sp, r7
 688              		.cfi_def_cfa_register 13
 689              		@ sp needed
 690 00b6 80BD     		pop	{r7, pc}
 691              	.L28:
 692              		.align	3
 693              	.L27:
 694 00b8 CE8C7E34 		.word	880708814
 695 00bc 9C6B3440 		.word	1077177244
 696 00c0 00000000 		.word	countM1
 697 00c4 00006443 		.word	1130627072
 698 00c8 00000000 		.word	countM2
 699              		.cfi_endproc
 700              	.LFE67:
 701              		.size	getDistance, .-getDistance
 702              		.global	__aeabi_fcmplt
 703 00cc AFF30080 		.section	.text.turnForDegrees,"ax",%progbits
 704              		.align	2
 705              		.global	turnForDegrees
 706              		.thumb
 707              		.thumb_func
 708              		.type	turnForDegrees, %function
 709              	turnForDegrees:
 710              	.LFB68:
 412:.\main.c      **** 
 413:.\main.c      **** void turnForDegrees(int degrees) {
 711              		.loc 1 413 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 24
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 21


 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 86B0     		sub	sp, sp, #24
 720              		.cfi_def_cfa_offset 32
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 723 0006 7860     		str	r0, [r7, #4]
 414:.\main.c      ****     float distance_to_turn = degrees / 13;
 724              		.loc 1 414 0
 725 0008 7B68     		ldr	r3, [r7, #4]
 726 000a 1C4A     		ldr	r2, .L32
 727 000c 82FB0312 		smull	r1, r2, r2, r3
 728 0010 9210     		asrs	r2, r2, #2
 729 0012 DB17     		asrs	r3, r3, #31
 730 0014 D31A     		subs	r3, r2, r3
 731 0016 1846     		mov	r0, r3
 732 0018 FFF7FEFF 		bl	__aeabi_i2f
 733 001c 0346     		mov	r3, r0
 734 001e BB60     		str	r3, [r7, #8]	@ float
 415:.\main.c      ****     float distance_turned = 0;
 735              		.loc 1 415 0
 736 0020 4FF00003 		mov	r3, #0
 737 0024 7B61     		str	r3, [r7, #20]	@ float
 416:.\main.c      ****     // Storing count values
 417:.\main.c      ****     int prevCountM1 = 0;
 738              		.loc 1 417 0
 739 0026 0023     		movs	r3, #0
 740 0028 3B61     		str	r3, [r7, #16]
 418:.\main.c      ****     int prevCountM2 = 0;
 741              		.loc 1 418 0
 742 002a 0023     		movs	r3, #0
 743 002c FB60     		str	r3, [r7, #12]
 419:.\main.c      ****     
 420:.\main.c      ****     while (distance_turned < distance_to_turn) {
 744              		.loc 1 420 0
 745 002e 1BE0     		b	.L30
 746              	.L31:
 421:.\main.c      ****          // New count values from encoder are ready
 422:.\main.c      ****         if (timer_flag){
 747              		.loc 1 422 0
 748 0030 134B     		ldr	r3, .L32+4
 749 0032 1B68     		ldr	r3, [r3]
 750 0034 002B     		cmp	r3, #0
 751 0036 17D0     		beq	.L30
 423:.\main.c      ****             isr_TS_Disable();
 752              		.loc 1 423 0
 753 0038 FFF7FEFF 		bl	isr_TS_Disable
 424:.\main.c      ****             
 425:.\main.c      ****             distance_turned += getDistance(prevCountM1, prevCountM2);
 754              		.loc 1 425 0
 755 003c 3869     		ldr	r0, [r7, #16]
 756 003e F968     		ldr	r1, [r7, #12]
 757 0040 FFF7FEFF 		bl	getDistance
 758 0044 0346     		mov	r3, r0
 759 0046 7869     		ldr	r0, [r7, #20]	@ float
 760 0048 1946     		mov	r1, r3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 22


 761 004a FFF7FEFF 		bl	__aeabi_fadd
 762 004e 0346     		mov	r3, r0
 763 0050 7B61     		str	r3, [r7, #20]	@ float
 426:.\main.c      ****             
 427:.\main.c      ****             // Update previous values
 428:.\main.c      ****             prevCountM1 = countM1;
 764              		.loc 1 428 0
 765 0052 0C4B     		ldr	r3, .L32+8
 766 0054 1B68     		ldr	r3, [r3]
 767 0056 3B61     		str	r3, [r7, #16]
 429:.\main.c      ****             prevCountM2 = countM2;
 768              		.loc 1 429 0
 769 0058 0B4B     		ldr	r3, .L32+12
 770 005a 1B68     		ldr	r3, [r3]
 771 005c FB60     		str	r3, [r7, #12]
 430:.\main.c      ****             
 431:.\main.c      ****             // Reset flag
 432:.\main.c      ****             timer_flag = FALSE;
 772              		.loc 1 432 0
 773 005e 084B     		ldr	r3, .L32+4
 774 0060 0022     		movs	r2, #0
 775 0062 1A60     		str	r2, [r3]
 433:.\main.c      ****             
 434:.\main.c      ****             isr_TS_Enable();
 776              		.loc 1 434 0
 777 0064 FFF7FEFF 		bl	isr_TS_Enable
 778              	.L30:
 420:.\main.c      ****          // New count values from encoder are ready
 779              		.loc 1 420 0
 780 0068 7869     		ldr	r0, [r7, #20]	@ float
 781 006a B968     		ldr	r1, [r7, #8]	@ float
 782 006c FFF7FEFF 		bl	__aeabi_fcmplt
 783 0070 0346     		mov	r3, r0
 784 0072 002B     		cmp	r3, #0
 785 0074 DCD1     		bne	.L31
 435:.\main.c      ****         }
 436:.\main.c      ****     }
 437:.\main.c      **** }
 786              		.loc 1 437 0
 787 0076 1837     		adds	r7, r7, #24
 788              		.cfi_def_cfa_offset 8
 789 0078 BD46     		mov	sp, r7
 790              		.cfi_def_cfa_register 13
 791              		@ sp needed
 792 007a 80BD     		pop	{r7, pc}
 793              	.L33:
 794              		.align	2
 795              	.L32:
 796 007c 4FECC44E 		.word	1321528399
 797 0080 00000000 		.word	timer_flag
 798 0084 00000000 		.word	countM1
 799 0088 00000000 		.word	countM2
 800              		.cfi_endproc
 801              	.LFE68:
 802              		.size	turnForDegrees, .-turnForDegrees
 803              		.section	.text.getValForChannel,"ax",%progbits
 804              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 23


 805              		.global	getValForChannel
 806              		.thumb
 807              		.thumb_func
 808              		.type	getValForChannel, %function
 809              	getValForChannel:
 810              	.LFB69:
 438:.\main.c      ****     
 439:.\main.c      **** 
 440:.\main.c      **** // Simple ADC conversion
 441:.\main.c      **** int32 getValForChannel(int16 n){
 811              		.loc 1 441 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 8
 814              		@ frame_needed = 1, uses_anonymous_args = 0
 815 0000 80B5     		push	{r7, lr}
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 7, -8
 818              		.cfi_offset 14, -4
 819 0002 82B0     		sub	sp, sp, #8
 820              		.cfi_def_cfa_offset 16
 821 0004 00AF     		add	r7, sp, #0
 822              		.cfi_def_cfa_register 7
 823 0006 0346     		mov	r3, r0
 824 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 442:.\main.c      ****     return ADC_CountsTo_mVolts(ADC_GetResult16(n));
 825              		.loc 1 442 0
 826 000a FB88     		ldrh	r3, [r7, #6]
 827 000c 1846     		mov	r0, r3
 828 000e FFF7FEFF 		bl	ADC_GetResult16
 829 0012 0346     		mov	r3, r0
 830 0014 1846     		mov	r0, r3
 831 0016 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 832 001a 0346     		mov	r3, r0
 443:.\main.c      **** }
 833              		.loc 1 443 0
 834 001c 1846     		mov	r0, r3
 835 001e 0837     		adds	r7, r7, #8
 836              		.cfi_def_cfa_offset 8
 837 0020 BD46     		mov	sp, r7
 838              		.cfi_def_cfa_register 13
 839              		@ sp needed
 840 0022 80BD     		pop	{r7, pc}
 841              		.cfi_endproc
 842              	.LFE69:
 843              		.size	getValForChannel, .-getValForChannel
 844              		.section	.text.updateSensorValues,"ax",%progbits
 845              		.align	2
 846              		.global	updateSensorValues
 847              		.thumb
 848              		.thumb_func
 849              		.type	updateSensorValues, %function
 850              	updateSensorValues:
 851              	.LFB70:
 444:.\main.c      **** 
 445:.\main.c      **** void updateSensorValues(){
 852              		.loc 1 445 0
 853              		.cfi_startproc
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 24


 854              		@ args = 0, pretend = 0, frame = 8
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856 0000 80B5     		push	{r7, lr}
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 7, -8
 859              		.cfi_offset 14, -4
 860 0002 82B0     		sub	sp, sp, #8
 861              		.cfi_def_cfa_offset 16
 862 0004 00AF     		add	r7, sp, #0
 863              		.cfi_def_cfa_register 7
 446:.\main.c      ****     // update each sensor with the maximum reading so far
 447:.\main.c      ****     int i;
 448:.\main.c      ****     for (i = 0; i < NUM_SENSORS; i++){
 864              		.loc 1 448 0
 865 0006 0023     		movs	r3, #0
 866 0008 7B60     		str	r3, [r7, #4]
 867 000a 15E0     		b	.L37
 868              	.L39:
 869              	.LBB2:
 449:.\main.c      ****         int reading = getValForChannel(i);
 870              		.loc 1 449 0
 871 000c 7B68     		ldr	r3, [r7, #4]
 872 000e 9BB2     		uxth	r3, r3
 873 0010 1BB2     		sxth	r3, r3
 874 0012 1846     		mov	r0, r3
 875 0014 FFF7FEFF 		bl	getValForChannel
 876 0018 3860     		str	r0, [r7]
 450:.\main.c      ****         if (reading > adc_readings[i]) {
 877              		.loc 1 450 0
 878 001a 234A     		ldr	r2, .L44
 879 001c 7B68     		ldr	r3, [r7, #4]
 880 001e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 881 0022 3B68     		ldr	r3, [r7]
 882 0024 9A42     		cmp	r2, r3
 883 0026 04DA     		bge	.L38
 451:.\main.c      ****             adc_readings[i] = reading;
 884              		.loc 1 451 0
 885 0028 1F49     		ldr	r1, .L44
 886 002a 7B68     		ldr	r3, [r7, #4]
 887 002c 3A68     		ldr	r2, [r7]
 888 002e 41F82320 		str	r2, [r1, r3, lsl #2]
 889              	.L38:
 890              	.LBE2:
 448:.\main.c      ****         int reading = getValForChannel(i);
 891              		.loc 1 448 0 discriminator 2
 892 0032 7B68     		ldr	r3, [r7, #4]
 893 0034 0133     		adds	r3, r3, #1
 894 0036 7B60     		str	r3, [r7, #4]
 895              	.L37:
 448:.\main.c      ****         int reading = getValForChannel(i);
 896              		.loc 1 448 0 is_stmt 0 discriminator 1
 897 0038 7B68     		ldr	r3, [r7, #4]
 898 003a 052B     		cmp	r3, #5
 899 003c E6DD     		ble	.L39
 452:.\main.c      ****         }
 453:.\main.c      ****     }
 454:.\main.c      **** 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 25


 455:.\main.c      ****     sample_count++;
 900              		.loc 1 455 0 is_stmt 1
 901 003e 1B4B     		ldr	r3, .L44+4
 902 0040 1B68     		ldr	r3, [r3]
 903 0042 0133     		adds	r3, r3, #1
 904 0044 194A     		ldr	r2, .L44+4
 905 0046 1360     		str	r3, [r2]
 456:.\main.c      ****     if (sample_count == ADC_READINGS_SIZE){
 906              		.loc 1 456 0
 907 0048 184B     		ldr	r3, .L44+4
 908 004a 1B68     		ldr	r3, [r3]
 909 004c 5A2B     		cmp	r3, #90
 910 004e 25D1     		bne	.L40
 457:.\main.c      ****         // Black = 1 (high voltage level)
 458:.\main.c      ****         for (i = 0; i < NUM_SENSORS; i++){
 911              		.loc 1 458 0
 912 0050 0023     		movs	r3, #0
 913 0052 7B60     		str	r3, [r7, #4]
 914 0054 18E0     		b	.L41
 915              	.L42:
 459:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 916              		.loc 1 459 0 discriminator 3
 917 0056 144A     		ldr	r2, .L44
 918 0058 7B68     		ldr	r3, [r7, #4]
 919 005a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 920 005e 40F22B12 		movw	r2, #299
 921 0062 9342     		cmp	r3, r2
 922 0064 D4BF     		ite	le
 923 0066 0123     		movle	r3, #1
 924 0068 0023     		movgt	r3, #0
 925 006a DBB2     		uxtb	r3, r3
 926 006c D9B2     		uxtb	r1, r3
 927 006e 104A     		ldr	r2, .L44+8
 928 0070 7B68     		ldr	r3, [r7, #4]
 929 0072 1344     		add	r3, r3, r2
 930 0074 0A46     		mov	r2, r1
 931 0076 1A70     		strb	r2, [r3]
 460:.\main.c      ****             adc_readings[i] = 0; // Reset max value from samples
 932              		.loc 1 460 0 discriminator 3
 933 0078 0B4A     		ldr	r2, .L44
 934 007a 7B68     		ldr	r3, [r7, #4]
 935 007c 0021     		movs	r1, #0
 936 007e 42F82310 		str	r1, [r2, r3, lsl #2]
 458:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 937              		.loc 1 458 0 discriminator 3
 938 0082 7B68     		ldr	r3, [r7, #4]
 939 0084 0133     		adds	r3, r3, #1
 940 0086 7B60     		str	r3, [r7, #4]
 941              	.L41:
 458:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 942              		.loc 1 458 0 is_stmt 0 discriminator 1
 943 0088 7B68     		ldr	r3, [r7, #4]
 944 008a 052B     		cmp	r3, #5
 945 008c E3DD     		ble	.L42
 461:.\main.c      ****         }
 462:.\main.c      ****         ADC_DEBUG_Write(1);
 946              		.loc 1 462 0 is_stmt 1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 26


 947 008e 0120     		movs	r0, #1
 948 0090 FFF7FEFF 		bl	ADC_DEBUG_Write
 463:.\main.c      ****         sample_count = 0;
 949              		.loc 1 463 0
 950 0094 054B     		ldr	r3, .L44+4
 951 0096 0022     		movs	r2, #0
 952 0098 1A60     		str	r2, [r3]
 953 009a 02E0     		b	.L36
 954              	.L40:
 464:.\main.c      ****     }
 465:.\main.c      ****     else ADC_DEBUG_Write(0);
 955              		.loc 1 465 0
 956 009c 0020     		movs	r0, #0
 957 009e FFF7FEFF 		bl	ADC_DEBUG_Write
 958              	.L36:
 466:.\main.c      **** }
 959              		.loc 1 466 0
 960 00a2 0837     		adds	r7, r7, #8
 961              		.cfi_def_cfa_offset 8
 962 00a4 BD46     		mov	sp, r7
 963              		.cfi_def_cfa_register 13
 964              		@ sp needed
 965 00a6 80BD     		pop	{r7, pc}
 966              	.L45:
 967              		.align	2
 968              	.L44:
 969 00a8 00000000 		.word	adc_readings
 970 00ac 00000000 		.word	sample_count
 971 00b0 00000000 		.word	sensor_readings
 972              		.cfi_endproc
 973              	.LFE70:
 974              		.size	updateSensorValues, .-updateSensorValues
 975              		.section	.text.changeLeftWheelSpeed,"ax",%progbits
 976              		.align	2
 977              		.global	changeLeftWheelSpeed
 978              		.thumb
 979              		.thumb_func
 980              		.type	changeLeftWheelSpeed, %function
 981              	changeLeftWheelSpeed:
 982              	.LFB71:
 467:.\main.c      **** 
 468:.\main.c      **** void changeLeftWheelSpeed(int amount) {
 983              		.loc 1 468 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987 0000 80B5     		push	{r7, lr}
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 84B0     		sub	sp, sp, #16
 992              		.cfi_def_cfa_offset 24
 993 0004 00AF     		add	r7, sp, #0
 994              		.cfi_def_cfa_register 7
 995 0006 7860     		str	r0, [r7, #4]
 469:.\main.c      ****     int new_value = PWM_1_ReadCompare() + amount;
 996              		.loc 1 469 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 27


 997 0008 FFF7FEFF 		bl	PWM_1_ReadCompare
 998 000c 0346     		mov	r3, r0
 999 000e 1A46     		mov	r2, r3
 1000 0010 7B68     		ldr	r3, [r7, #4]
 1001 0012 1344     		add	r3, r3, r2
 1002 0014 FB60     		str	r3, [r7, #12]
 470:.\main.c      ****     PWM_1_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1003              		.loc 1 470 0
 1004 0016 FB68     		ldr	r3, [r7, #12]
 1005 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1006 001c 9BB2     		uxth	r3, r3
 1007 001e 1846     		mov	r0, r3
 1008 0020 FFF7FEFF 		bl	PWM_1_WriteCompare
 471:.\main.c      **** }
 1009              		.loc 1 471 0
 1010 0024 1037     		adds	r7, r7, #16
 1011              		.cfi_def_cfa_offset 8
 1012 0026 BD46     		mov	sp, r7
 1013              		.cfi_def_cfa_register 13
 1014              		@ sp needed
 1015 0028 80BD     		pop	{r7, pc}
 1016              		.cfi_endproc
 1017              	.LFE71:
 1018              		.size	changeLeftWheelSpeed, .-changeLeftWheelSpeed
 1019 002a 00BF     		.section	.text.changeRightWheelSpeed,"ax",%progbits
 1020              		.align	2
 1021              		.global	changeRightWheelSpeed
 1022              		.thumb
 1023              		.thumb_func
 1024              		.type	changeRightWheelSpeed, %function
 1025              	changeRightWheelSpeed:
 1026              	.LFB72:
 472:.\main.c      **** 
 473:.\main.c      **** void changeRightWheelSpeed(int amount){
 1027              		.loc 1 473 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 16
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 80B5     		push	{r7, lr}
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 84B0     		sub	sp, sp, #16
 1036              		.cfi_def_cfa_offset 24
 1037 0004 00AF     		add	r7, sp, #0
 1038              		.cfi_def_cfa_register 7
 1039 0006 7860     		str	r0, [r7, #4]
 474:.\main.c      ****     int new_value = PWM_2_ReadCompare() + amount;
 1040              		.loc 1 474 0
 1041 0008 FFF7FEFF 		bl	PWM_2_ReadCompare
 1042 000c 0346     		mov	r3, r0
 1043 000e 1A46     		mov	r2, r3
 1044 0010 7B68     		ldr	r3, [r7, #4]
 1045 0012 1344     		add	r3, r3, r2
 1046 0014 FB60     		str	r3, [r7, #12]
 475:.\main.c      ****     PWM_2_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1047              		.loc 1 475 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 28


 1048 0016 FB68     		ldr	r3, [r7, #12]
 1049 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1050 001c 9BB2     		uxth	r3, r3
 1051 001e 1846     		mov	r0, r3
 1052 0020 FFF7FEFF 		bl	PWM_2_WriteCompare
 476:.\main.c      **** }
 1053              		.loc 1 476 0
 1054 0024 1037     		adds	r7, r7, #16
 1055              		.cfi_def_cfa_offset 8
 1056 0026 BD46     		mov	sp, r7
 1057              		.cfi_def_cfa_register 13
 1058              		@ sp needed
 1059 0028 80BD     		pop	{r7, pc}
 1060              		.cfi_endproc
 1061              	.LFE72:
 1062              		.size	changeRightWheelSpeed, .-changeRightWheelSpeed
 1063 002a 00BF     		.section	.text.correctSpeed,"ax",%progbits
 1064              		.align	2
 1065              		.global	correctSpeed
 1066              		.thumb
 1067              		.thumb_func
 1068              		.type	correctSpeed, %function
 1069              	correctSpeed:
 1070              	.LFB73:
 477:.\main.c      **** 
 478:.\main.c      **** /* ## SPEED CONTROL ## 
 479:.\main.c      **** * Algorithm: Get difference between counts, compare to
 480:.\main.c      **** * the difference we expect. Add the correction to the PWM.
 481:.\main.c      **** */
 482:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel){    
 1071              		.loc 1 482 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 88
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
 1076              		.cfi_def_cfa_offset 8
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 1079 0002 96B0     		sub	sp, sp, #88
 1080              		.cfi_def_cfa_offset 96
 1081 0004 00AF     		add	r7, sp, #0
 1082              		.cfi_def_cfa_register 7
 1083 0006 F860     		str	r0, [r7, #12]
 1084 0008 B960     		str	r1, [r7, #8]
 1085 000a 7A60     		str	r2, [r7, #4]
 1086 000c 3B60     		str	r3, [r7]
 483:.\main.c      ****     
 484:.\main.c      ****     // Account for overflow edge or other unknown error
 485:.\main.c      ****     if (prevCount > count) return;
 1087              		.loc 1 485 0
 1088 000e FA68     		ldr	r2, [r7, #12]
 1089 0010 BB68     		ldr	r3, [r7, #8]
 1090 0012 9A42     		cmp	r2, r3
 1091 0014 00DD     		ble	.L49
 1092 0016 19E0     		b	.L48
 1093              	.L49:
 486:.\main.c      ****     
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 29


 487:.\main.c      ****     int diff_count = abs(count - prevCount);
 1094              		.loc 1 487 0
 1095 0018 BA68     		ldr	r2, [r7, #8]
 1096 001a FB68     		ldr	r3, [r7, #12]
 1097 001c D31A     		subs	r3, r2, r3
 1098 001e 002B     		cmp	r3, #0
 1099 0020 B8BF     		it	lt
 1100 0022 5B42     		rsblt	r3, r3, #0
 1101 0024 7B65     		str	r3, [r7, #84]
 488:.\main.c      ****     
 489:.\main.c      ****     // Account for a situation where PSoc is powered but wheels aren't moving
 490:.\main.c      ****     if (diff_count == 0) return;
 1102              		.loc 1 490 0
 1103 0026 7B6D     		ldr	r3, [r7, #84]
 1104 0028 002B     		cmp	r3, #0
 1105 002a 00D1     		bne	.L51
 1106              		.loc 1 490 0 is_stmt 0 discriminator 2
 1107 002c 0EE0     		b	.L48
 1108              	.L51:
 491:.\main.c      ****     
 492:.\main.c      ****     char msg[64];
 493:.\main.c      ****         
 494:.\main.c      ****     /* Determine correction that must be applied to the wheel
 495:.\main.c      ****     * desired_count > diff_count :-> wheel is slow; increase PWM
 496:.\main.c      ****     * desired_count < diff_count :-> wheel is fast; decrease PWM
 497:.\main.c      ****     * desired_count == diff_count :-> wheel is stable; do nothing
 498:.\main.c      ****     */
 499:.\main.c      ****     int correction = desired_count-diff_count;
 1109              		.loc 1 499 0 is_stmt 1
 1110 002e 7A68     		ldr	r2, [r7, #4]
 1111 0030 7B6D     		ldr	r3, [r7, #84]
 1112 0032 D31A     		subs	r3, r2, r3
 1113 0034 3B65     		str	r3, [r7, #80]
 500:.\main.c      ****     
 501:.\main.c      ****     // Apply the speed correction to the appropriate wheel          
 502:.\main.c      ****     if (isLeftWheel){
 1114              		.loc 1 502 0
 1115 0036 3B68     		ldr	r3, [r7]
 1116 0038 002B     		cmp	r3, #0
 1117 003a 03D0     		beq	.L52
 503:.\main.c      ****         changeLeftWheelSpeed(correction);
 1118              		.loc 1 503 0
 1119 003c 386D     		ldr	r0, [r7, #80]
 1120 003e FFF7FEFF 		bl	changeLeftWheelSpeed
 1121 0042 02E0     		b	.L53
 1122              	.L52:
 504:.\main.c      ****     }
 505:.\main.c      ****     else{
 506:.\main.c      ****         changeRightWheelSpeed(correction);
 1123              		.loc 1 506 0
 1124 0044 386D     		ldr	r0, [r7, #80]
 1125 0046 FFF7FEFF 		bl	changeRightWheelSpeed
 1126              	.L53:
 507:.\main.c      ****     }
 508:.\main.c      ****     
 509:.\main.c      ****     return;
 1127              		.loc 1 509 0 discriminator 3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 30


 1128 004a 00BF     		nop
 1129              	.L48:
 510:.\main.c      **** }
 1130              		.loc 1 510 0
 1131 004c 5837     		adds	r7, r7, #88
 1132              		.cfi_def_cfa_offset 8
 1133 004e BD46     		mov	sp, r7
 1134              		.cfi_def_cfa_register 13
 1135              		@ sp needed
 1136 0050 80BD     		pop	{r7, pc}
 1137              		.cfi_endproc
 1138              	.LFE73:
 1139              		.size	correctSpeed, .-correctSpeed
 1140 0052 00BF     		.section	.text.setWheelDirection,"ax",%progbits
 1141              		.align	2
 1142              		.global	setWheelDirection
 1143              		.thumb
 1144              		.thumb_func
 1145              		.type	setWheelDirection, %function
 1146              	setWheelDirection:
 1147              	.LFB74:
 511:.\main.c      **** 
 512:.\main.c      **** /* Set wheel direction explicitly
 513:.\main.c      **** * Parameters are boolean, UNKNOWN can be passed
 514:.\main.c      **** * in if you wish the value to be unchanged
 515:.\main.c      **** */
 516:.\main.c      **** void setWheelDirection(int leftIsForward, int rightIsForward){
 1148              		.loc 1 516 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 8
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152 0000 80B5     		push	{r7, lr}
 1153              		.cfi_def_cfa_offset 8
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 82B0     		sub	sp, sp, #8
 1157              		.cfi_def_cfa_offset 16
 1158 0004 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 1160 0006 7860     		str	r0, [r7, #4]
 1161 0008 3960     		str	r1, [r7]
 517:.\main.c      ****     INV1_Write(!leftIsForward);
 1162              		.loc 1 517 0
 1163 000a 7B68     		ldr	r3, [r7, #4]
 1164 000c 002B     		cmp	r3, #0
 1165 000e 0CBF     		ite	eq
 1166 0010 0123     		moveq	r3, #1
 1167 0012 0023     		movne	r3, #0
 1168 0014 DBB2     		uxtb	r3, r3
 1169 0016 1846     		mov	r0, r3
 1170 0018 FFF7FEFF 		bl	INV1_Write
 518:.\main.c      ****     INV2_Write(rightIsForward);
 1171              		.loc 1 518 0
 1172 001c 3B68     		ldr	r3, [r7]
 1173 001e DBB2     		uxtb	r3, r3
 1174 0020 1846     		mov	r0, r3
 1175 0022 FFF7FEFF 		bl	INV2_Write
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 31


 519:.\main.c      **** }
 1176              		.loc 1 519 0
 1177 0026 0837     		adds	r7, r7, #8
 1178              		.cfi_def_cfa_offset 8
 1179 0028 BD46     		mov	sp, r7
 1180              		.cfi_def_cfa_register 13
 1181              		@ sp needed
 1182 002a 80BD     		pop	{r7, pc}
 1183              		.cfi_endproc
 1184              	.LFE74:
 1185              		.size	setWheelDirection, .-setWheelDirection
 1186              		.section	.text.turnLeft,"ax",%progbits
 1187              		.align	2
 1188              		.global	turnLeft
 1189              		.thumb
 1190              		.thumb_func
 1191              		.type	turnLeft, %function
 1192              	turnLeft:
 1193              	.LFB75:
 520:.\main.c      **** 
 521:.\main.c      **** void turnLeft() {
 1194              		.loc 1 521 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198 0000 80B5     		push	{r7, lr}
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 0002 00AF     		add	r7, sp, #0
 1203              		.cfi_def_cfa_register 7
 522:.\main.c      ****     PWM_1_WriteCompare(0);
 1204              		.loc 1 522 0
 1205 0004 0020     		movs	r0, #0
 1206 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 523:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1207              		.loc 1 523 0
 1208 000a 4FF4E170 		mov	r0, #450
 1209 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 524:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1210              		.loc 1 524 0
 1211 0012 08E0     		b	.L57
 1212              	.L58:
 525:.\main.c      ****         if (adc_flag) {
 1213              		.loc 1 525 0
 1214 0014 084B     		ldr	r3, .L59
 1215 0016 1B68     		ldr	r3, [r3]
 1216 0018 002B     		cmp	r3, #0
 1217 001a 04D0     		beq	.L57
 526:.\main.c      ****             updateSensorValues();
 1218              		.loc 1 526 0
 1219 001c FFF7FEFF 		bl	updateSensorValues
 527:.\main.c      ****             adc_flag = FALSE;
 1220              		.loc 1 527 0
 1221 0020 054B     		ldr	r3, .L59
 1222 0022 0022     		movs	r2, #0
 1223 0024 1A60     		str	r2, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 32


 1224              	.L57:
 524:.\main.c      ****         if (adc_flag) {
 1225              		.loc 1 524 0
 1226 0026 054B     		ldr	r3, .L59+4
 1227 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1228 002a 002B     		cmp	r3, #0
 1229 002c F2D0     		beq	.L58
 528:.\main.c      ****         }
 529:.\main.c      ****     }
 530:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1230              		.loc 1 530 0
 1231 002e 4FF4E170 		mov	r0, #450
 1232 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
 531:.\main.c      **** }
 1233              		.loc 1 531 0
 1234 0036 80BD     		pop	{r7, pc}
 1235              	.L60:
 1236              		.align	2
 1237              	.L59:
 1238 0038 00000000 		.word	adc_flag
 1239 003c 00000000 		.word	sensor_readings
 1240              		.cfi_endproc
 1241              	.LFE75:
 1242              		.size	turnLeft, .-turnLeft
 1243              		.section	.text.turnRight,"ax",%progbits
 1244              		.align	2
 1245              		.global	turnRight
 1246              		.thumb
 1247              		.thumb_func
 1248              		.type	turnRight, %function
 1249              	turnRight:
 1250              	.LFB76:
 532:.\main.c      **** 
 533:.\main.c      **** void turnRight() {
 1251              		.loc 1 533 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 1, uses_anonymous_args = 0
 1255 0000 80B5     		push	{r7, lr}
 1256              		.cfi_def_cfa_offset 8
 1257              		.cfi_offset 7, -8
 1258              		.cfi_offset 14, -4
 1259 0002 00AF     		add	r7, sp, #0
 1260              		.cfi_def_cfa_register 7
 534:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1261              		.loc 1 534 0
 1262 0004 4FF4E170 		mov	r0, #450
 1263 0008 FFF7FEFF 		bl	PWM_1_WriteCompare
 535:.\main.c      ****     PWM_2_WriteCompare(0);
 1264              		.loc 1 535 0
 1265 000c 0020     		movs	r0, #0
 1266 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 536:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1267              		.loc 1 536 0
 1268 0012 08E0     		b	.L62
 1269              	.L63:
 537:.\main.c      ****         if (adc_flag) {
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 33


 1270              		.loc 1 537 0
 1271 0014 084B     		ldr	r3, .L64
 1272 0016 1B68     		ldr	r3, [r3]
 1273 0018 002B     		cmp	r3, #0
 1274 001a 04D0     		beq	.L62
 538:.\main.c      ****             updateSensorValues();
 1275              		.loc 1 538 0
 1276 001c FFF7FEFF 		bl	updateSensorValues
 539:.\main.c      ****             adc_flag = FALSE;
 1277              		.loc 1 539 0
 1278 0020 054B     		ldr	r3, .L64
 1279 0022 0022     		movs	r2, #0
 1280 0024 1A60     		str	r2, [r3]
 1281              	.L62:
 536:.\main.c      ****         if (adc_flag) {
 1282              		.loc 1 536 0
 1283 0026 054B     		ldr	r3, .L64+4
 1284 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1285 002a 002B     		cmp	r3, #0
 1286 002c F2D0     		beq	.L63
 540:.\main.c      ****         }
 541:.\main.c      ****     }
 542:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1287              		.loc 1 542 0
 1288 002e 4FF4E170 		mov	r0, #450
 1289 0032 FFF7FEFF 		bl	PWM_2_WriteCompare
 543:.\main.c      **** }
 1290              		.loc 1 543 0
 1291 0036 80BD     		pop	{r7, pc}
 1292              	.L65:
 1293              		.align	2
 1294              	.L64:
 1295 0038 00000000 		.word	adc_flag
 1296 003c 00000000 		.word	sensor_readings
 1297              		.cfi_endproc
 1298              	.LFE76:
 1299              		.size	turnRight, .-turnRight
 1300              		.section	.text.sharpTurnLeft,"ax",%progbits
 1301              		.align	2
 1302              		.global	sharpTurnLeft
 1303              		.thumb
 1304              		.thumb_func
 1305              		.type	sharpTurnLeft, %function
 1306              	sharpTurnLeft:
 1307              	.LFB77:
 544:.\main.c      **** 
 545:.\main.c      **** void sharpTurnLeft(int *right_wheel_count, int *left_wheel_count) {
 1308              		.loc 1 545 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 16
 1311              		@ frame_needed = 1, uses_anonymous_args = 0
 1312 0000 80B5     		push	{r7, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 84B0     		sub	sp, sp, #16
 1317              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 34


 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 1320 0006 7860     		str	r0, [r7, #4]
 1321 0008 3960     		str	r1, [r7]
 546:.\main.c      ****     int prevCountM1 = 0;
 1322              		.loc 1 546 0
 1323 000a 0023     		movs	r3, #0
 1324 000c FB60     		str	r3, [r7, #12]
 547:.\main.c      ****     int prevCountM2 = 0;
 1325              		.loc 1 547 0
 1326 000e 0023     		movs	r3, #0
 1327 0010 BB60     		str	r3, [r7, #8]
 548:.\main.c      ****     
 549:.\main.c      ****     // go until we reach the line
 550:.\main.c      ****     while (!sensor_readings[BOTTOM_LEFT_SENSOR]) {
 1328              		.loc 1 550 0
 1329 0012 45E0     		b	.L67
 1330              	.L71:
 551:.\main.c      ****         if (adc_flag) {
 1331              		.loc 1 551 0
 1332 0014 3A4B     		ldr	r3, .L74
 1333 0016 1B68     		ldr	r3, [r3]
 1334 0018 002B     		cmp	r3, #0
 1335 001a 04D0     		beq	.L68
 552:.\main.c      ****             updateSensorValues();
 1336              		.loc 1 552 0
 1337 001c FFF7FEFF 		bl	updateSensorValues
 553:.\main.c      ****             adc_flag = FALSE;
 1338              		.loc 1 553 0
 1339 0020 374B     		ldr	r3, .L74
 1340 0022 0022     		movs	r2, #0
 1341 0024 1A60     		str	r2, [r3]
 1342              	.L68:
 554:.\main.c      ****         }
 555:.\main.c      ****         
 556:.\main.c      ****          // New count values from encoder are ready
 557:.\main.c      ****         if (timer_flag){
 1343              		.loc 1 557 0
 1344 0026 374B     		ldr	r3, .L74+4
 1345 0028 1B68     		ldr	r3, [r3]
 1346 002a 002B     		cmp	r3, #0
 1347 002c 38D0     		beq	.L67
 558:.\main.c      ****             isr_TS_Disable();
 1348              		.loc 1 558 0
 1349 002e FFF7FEFF 		bl	isr_TS_Disable
 559:.\main.c      ****             
 560:.\main.c      ****             // Correct speed
 561:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 1350              		.loc 1 561 0
 1351 0032 354B     		ldr	r3, .L74+8
 1352 0034 1A68     		ldr	r2, [r3]
 1353 0036 3B68     		ldr	r3, [r7]
 1354 0038 1B68     		ldr	r3, [r3]
 1355 003a F868     		ldr	r0, [r7, #12]
 1356 003c 1146     		mov	r1, r2
 1357 003e 1A46     		mov	r2, r3
 1358 0040 0123     		movs	r3, #1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 35


 1359 0042 FFF7FEFF 		bl	correctSpeed
 562:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 1360              		.loc 1 562 0
 1361 0046 314B     		ldr	r3, .L74+12
 1362 0048 1A68     		ldr	r2, [r3]
 1363 004a 7B68     		ldr	r3, [r7, #4]
 1364 004c 1B68     		ldr	r3, [r3]
 1365 004e B868     		ldr	r0, [r7, #8]
 1366 0050 1146     		mov	r1, r2
 1367 0052 1A46     		mov	r2, r3
 1368 0054 0023     		movs	r3, #0
 1369 0056 FFF7FEFF 		bl	correctSpeed
 563:.\main.c      ****             
 564:.\main.c      ****             *left_wheel_count -= SLOW_DOWN_SPEED;
 1370              		.loc 1 564 0
 1371 005a 3B68     		ldr	r3, [r7]
 1372 005c 1B68     		ldr	r3, [r3]
 1373 005e 5A1E     		subs	r2, r3, #1
 1374 0060 3B68     		ldr	r3, [r7]
 1375 0062 1A60     		str	r2, [r3]
 565:.\main.c      ****             *right_wheel_count -= SLOW_DOWN_SPEED;
 1376              		.loc 1 565 0
 1377 0064 7B68     		ldr	r3, [r7, #4]
 1378 0066 1B68     		ldr	r3, [r3]
 1379 0068 5A1E     		subs	r2, r3, #1
 1380 006a 7B68     		ldr	r3, [r7, #4]
 1381 006c 1A60     		str	r2, [r3]
 566:.\main.c      ****             if (*right_wheel_count < MIN_SPEED) {
 1382              		.loc 1 566 0
 1383 006e 7B68     		ldr	r3, [r7, #4]
 1384 0070 1B68     		ldr	r3, [r3]
 1385 0072 032B     		cmp	r3, #3
 1386 0074 02DC     		bgt	.L69
 567:.\main.c      ****                 *right_wheel_count = MIN_SPEED;
 1387              		.loc 1 567 0
 1388 0076 7B68     		ldr	r3, [r7, #4]
 1389 0078 0422     		movs	r2, #4
 1390 007a 1A60     		str	r2, [r3]
 1391              	.L69:
 568:.\main.c      ****             }
 569:.\main.c      ****             if (*left_wheel_count < MIN_SPEED) {
 1392              		.loc 1 569 0
 1393 007c 3B68     		ldr	r3, [r7]
 1394 007e 1B68     		ldr	r3, [r3]
 1395 0080 032B     		cmp	r3, #3
 1396 0082 02DC     		bgt	.L70
 570:.\main.c      ****                 *left_wheel_count = MIN_SPEED;
 1397              		.loc 1 570 0
 1398 0084 3B68     		ldr	r3, [r7]
 1399 0086 0422     		movs	r2, #4
 1400 0088 1A60     		str	r2, [r3]
 1401              	.L70:
 571:.\main.c      ****             }
 572:.\main.c      ****             
 573:.\main.c      ****             // Update previous values
 574:.\main.c      ****             prevCountM1 = countM1;
 1402              		.loc 1 574 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 36


 1403 008a 1F4B     		ldr	r3, .L74+8
 1404 008c 1B68     		ldr	r3, [r3]
 1405 008e FB60     		str	r3, [r7, #12]
 575:.\main.c      ****             prevCountM2 = countM2;
 1406              		.loc 1 575 0
 1407 0090 1E4B     		ldr	r3, .L74+12
 1408 0092 1B68     		ldr	r3, [r3]
 1409 0094 BB60     		str	r3, [r7, #8]
 576:.\main.c      ****             
 577:.\main.c      ****             // Reset flag
 578:.\main.c      ****             timer_flag = FALSE;
 1410              		.loc 1 578 0
 1411 0096 1B4B     		ldr	r3, .L74+4
 1412 0098 0022     		movs	r2, #0
 1413 009a 1A60     		str	r2, [r3]
 579:.\main.c      ****             
 580:.\main.c      ****             isr_TS_Enable();
 1414              		.loc 1 580 0
 1415 009c FFF7FEFF 		bl	isr_TS_Enable
 1416              	.L67:
 550:.\main.c      ****         if (adc_flag) {
 1417              		.loc 1 550 0
 1418 00a0 1B4B     		ldr	r3, .L74+16
 1419 00a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1420 00a4 002B     		cmp	r3, #0
 1421 00a6 B5D0     		beq	.L71
 581:.\main.c      ****         }
 582:.\main.c      ****         
 583:.\main.c      ****     }
 584:.\main.c      ****     
 585:.\main.c      ****     // make the turn
 586:.\main.c      ****     setWheelDirection(FALSE, TRUE);
 1422              		.loc 1 586 0
 1423 00a8 0020     		movs	r0, #0
 1424 00aa 0121     		movs	r1, #1
 1425 00ac FFF7FEFF 		bl	setWheelDirection
 587:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1426              		.loc 1 587 0
 1427 00b0 4FF4E170 		mov	r0, #450
 1428 00b4 FFF7FEFF 		bl	PWM_1_WriteCompare
 588:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1429              		.loc 1 588 0
 1430 00b8 4FF4E170 		mov	r0, #450
 1431 00bc FFF7FEFF 		bl	PWM_2_WriteCompare
 589:.\main.c      ****     
 590:.\main.c      ****     turnForDegrees(45); // so that it doesn't stop if it's already on a line
 1432              		.loc 1 590 0
 1433 00c0 2D20     		movs	r0, #45
 1434 00c2 FFF7FEFF 		bl	turnForDegrees
 591:.\main.c      ****     
 592:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1435              		.loc 1 592 0
 1436 00c6 08E0     		b	.L72
 1437              	.L73:
 593:.\main.c      ****         if (adc_flag) {
 1438              		.loc 1 593 0
 1439 00c8 0D4B     		ldr	r3, .L74
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 37


 1440 00ca 1B68     		ldr	r3, [r3]
 1441 00cc 002B     		cmp	r3, #0
 1442 00ce 04D0     		beq	.L72
 594:.\main.c      ****             updateSensorValues();
 1443              		.loc 1 594 0
 1444 00d0 FFF7FEFF 		bl	updateSensorValues
 595:.\main.c      ****             adc_flag = FALSE;
 1445              		.loc 1 595 0
 1446 00d4 0A4B     		ldr	r3, .L74
 1447 00d6 0022     		movs	r2, #0
 1448 00d8 1A60     		str	r2, [r3]
 1449              	.L72:
 592:.\main.c      ****         if (adc_flag) {
 1450              		.loc 1 592 0
 1451 00da 0D4B     		ldr	r3, .L74+16
 1452 00dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1453 00de 002B     		cmp	r3, #0
 1454 00e0 F2D0     		beq	.L73
 596:.\main.c      ****         }
 597:.\main.c      ****     }
 598:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1455              		.loc 1 598 0
 1456 00e2 0120     		movs	r0, #1
 1457 00e4 0121     		movs	r1, #1
 1458 00e6 FFF7FEFF 		bl	setWheelDirection
 599:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1459              		.loc 1 599 0
 1460 00ea 4FF4E170 		mov	r0, #450
 1461 00ee FFF7FEFF 		bl	PWM_1_WriteCompare
 600:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1462              		.loc 1 600 0
 1463 00f2 4FF4E170 		mov	r0, #450
 1464 00f6 FFF7FEFF 		bl	PWM_2_WriteCompare
 601:.\main.c      **** }
 1465              		.loc 1 601 0
 1466 00fa 1037     		adds	r7, r7, #16
 1467              		.cfi_def_cfa_offset 8
 1468 00fc BD46     		mov	sp, r7
 1469              		.cfi_def_cfa_register 13
 1470              		@ sp needed
 1471 00fe 80BD     		pop	{r7, pc}
 1472              	.L75:
 1473              		.align	2
 1474              	.L74:
 1475 0100 00000000 		.word	adc_flag
 1476 0104 00000000 		.word	timer_flag
 1477 0108 00000000 		.word	countM1
 1478 010c 00000000 		.word	countM2
 1479 0110 00000000 		.word	sensor_readings
 1480              		.cfi_endproc
 1481              	.LFE77:
 1482              		.size	sharpTurnLeft, .-sharpTurnLeft
 1483              		.section	.text.sharpTurnRight,"ax",%progbits
 1484              		.align	2
 1485              		.global	sharpTurnRight
 1486              		.thumb
 1487              		.thumb_func
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 38


 1488              		.type	sharpTurnRight, %function
 1489              	sharpTurnRight:
 1490              	.LFB78:
 602:.\main.c      **** 
 603:.\main.c      **** void sharpTurnRight(int *right_wheel_count, int *left_wheel_count) {
 1491              		.loc 1 603 0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 16
 1494              		@ frame_needed = 1, uses_anonymous_args = 0
 1495 0000 80B5     		push	{r7, lr}
 1496              		.cfi_def_cfa_offset 8
 1497              		.cfi_offset 7, -8
 1498              		.cfi_offset 14, -4
 1499 0002 84B0     		sub	sp, sp, #16
 1500              		.cfi_def_cfa_offset 24
 1501 0004 00AF     		add	r7, sp, #0
 1502              		.cfi_def_cfa_register 7
 1503 0006 7860     		str	r0, [r7, #4]
 1504 0008 3960     		str	r1, [r7]
 604:.\main.c      ****     int prevCountM1 = 0;
 1505              		.loc 1 604 0
 1506 000a 0023     		movs	r3, #0
 1507 000c FB60     		str	r3, [r7, #12]
 605:.\main.c      ****     int prevCountM2 = 0;
 1508              		.loc 1 605 0
 1509 000e 0023     		movs	r3, #0
 1510 0010 BB60     		str	r3, [r7, #8]
 606:.\main.c      ****     
 607:.\main.c      ****     // go until we reach the line
 608:.\main.c      ****     while (!sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 1511              		.loc 1 608 0
 1512 0012 45E0     		b	.L77
 1513              	.L81:
 609:.\main.c      ****         if (adc_flag) {
 1514              		.loc 1 609 0
 1515 0014 3A4B     		ldr	r3, .L84
 1516 0016 1B68     		ldr	r3, [r3]
 1517 0018 002B     		cmp	r3, #0
 1518 001a 04D0     		beq	.L78
 610:.\main.c      ****             updateSensorValues();
 1519              		.loc 1 610 0
 1520 001c FFF7FEFF 		bl	updateSensorValues
 611:.\main.c      ****             adc_flag = FALSE;
 1521              		.loc 1 611 0
 1522 0020 374B     		ldr	r3, .L84
 1523 0022 0022     		movs	r2, #0
 1524 0024 1A60     		str	r2, [r3]
 1525              	.L78:
 612:.\main.c      ****         }
 613:.\main.c      ****         
 614:.\main.c      ****          // New count values from encoder are ready
 615:.\main.c      ****         if (timer_flag){
 1526              		.loc 1 615 0
 1527 0026 374B     		ldr	r3, .L84+4
 1528 0028 1B68     		ldr	r3, [r3]
 1529 002a 002B     		cmp	r3, #0
 1530 002c 38D0     		beq	.L77
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 39


 616:.\main.c      ****             isr_TS_Disable();
 1531              		.loc 1 616 0
 1532 002e FFF7FEFF 		bl	isr_TS_Disable
 617:.\main.c      ****             
 618:.\main.c      ****             // Correct speed
 619:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 1533              		.loc 1 619 0
 1534 0032 354B     		ldr	r3, .L84+8
 1535 0034 1A68     		ldr	r2, [r3]
 1536 0036 3B68     		ldr	r3, [r7]
 1537 0038 1B68     		ldr	r3, [r3]
 1538 003a F868     		ldr	r0, [r7, #12]
 1539 003c 1146     		mov	r1, r2
 1540 003e 1A46     		mov	r2, r3
 1541 0040 0123     		movs	r3, #1
 1542 0042 FFF7FEFF 		bl	correctSpeed
 620:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 1543              		.loc 1 620 0
 1544 0046 314B     		ldr	r3, .L84+12
 1545 0048 1A68     		ldr	r2, [r3]
 1546 004a 7B68     		ldr	r3, [r7, #4]
 1547 004c 1B68     		ldr	r3, [r3]
 1548 004e B868     		ldr	r0, [r7, #8]
 1549 0050 1146     		mov	r1, r2
 1550 0052 1A46     		mov	r2, r3
 1551 0054 0023     		movs	r3, #0
 1552 0056 FFF7FEFF 		bl	correctSpeed
 621:.\main.c      ****             
 622:.\main.c      ****             *left_wheel_count -= SLOW_DOWN_SPEED;
 1553              		.loc 1 622 0
 1554 005a 3B68     		ldr	r3, [r7]
 1555 005c 1B68     		ldr	r3, [r3]
 1556 005e 5A1E     		subs	r2, r3, #1
 1557 0060 3B68     		ldr	r3, [r7]
 1558 0062 1A60     		str	r2, [r3]
 623:.\main.c      ****             *right_wheel_count -= SLOW_DOWN_SPEED;
 1559              		.loc 1 623 0
 1560 0064 7B68     		ldr	r3, [r7, #4]
 1561 0066 1B68     		ldr	r3, [r3]
 1562 0068 5A1E     		subs	r2, r3, #1
 1563 006a 7B68     		ldr	r3, [r7, #4]
 1564 006c 1A60     		str	r2, [r3]
 624:.\main.c      ****             if (*right_wheel_count < MIN_SPEED) {
 1565              		.loc 1 624 0
 1566 006e 7B68     		ldr	r3, [r7, #4]
 1567 0070 1B68     		ldr	r3, [r3]
 1568 0072 032B     		cmp	r3, #3
 1569 0074 02DC     		bgt	.L79
 625:.\main.c      ****                 *right_wheel_count = MIN_SPEED;
 1570              		.loc 1 625 0
 1571 0076 7B68     		ldr	r3, [r7, #4]
 1572 0078 0422     		movs	r2, #4
 1573 007a 1A60     		str	r2, [r3]
 1574              	.L79:
 626:.\main.c      ****             }
 627:.\main.c      ****             if (*left_wheel_count < MIN_SPEED) {
 1575              		.loc 1 627 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 40


 1576 007c 3B68     		ldr	r3, [r7]
 1577 007e 1B68     		ldr	r3, [r3]
 1578 0080 032B     		cmp	r3, #3
 1579 0082 02DC     		bgt	.L80
 628:.\main.c      ****                 *left_wheel_count = MIN_SPEED;
 1580              		.loc 1 628 0
 1581 0084 3B68     		ldr	r3, [r7]
 1582 0086 0422     		movs	r2, #4
 1583 0088 1A60     		str	r2, [r3]
 1584              	.L80:
 629:.\main.c      ****             }
 630:.\main.c      ****             
 631:.\main.c      ****             // Update previous values
 632:.\main.c      ****             prevCountM1 = countM1;
 1585              		.loc 1 632 0
 1586 008a 1F4B     		ldr	r3, .L84+8
 1587 008c 1B68     		ldr	r3, [r3]
 1588 008e FB60     		str	r3, [r7, #12]
 633:.\main.c      ****             prevCountM2 = countM2;
 1589              		.loc 1 633 0
 1590 0090 1E4B     		ldr	r3, .L84+12
 1591 0092 1B68     		ldr	r3, [r3]
 1592 0094 BB60     		str	r3, [r7, #8]
 634:.\main.c      ****             
 635:.\main.c      ****             // Reset flag
 636:.\main.c      ****             timer_flag = FALSE;
 1593              		.loc 1 636 0
 1594 0096 1B4B     		ldr	r3, .L84+4
 1595 0098 0022     		movs	r2, #0
 1596 009a 1A60     		str	r2, [r3]
 637:.\main.c      ****             
 638:.\main.c      ****             isr_TS_Enable();
 1597              		.loc 1 638 0
 1598 009c FFF7FEFF 		bl	isr_TS_Enable
 1599              	.L77:
 608:.\main.c      ****         if (adc_flag) {
 1600              		.loc 1 608 0
 1601 00a0 1B4B     		ldr	r3, .L84+16
 1602 00a2 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1603 00a4 002B     		cmp	r3, #0
 1604 00a6 B5D0     		beq	.L81
 639:.\main.c      ****         }
 640:.\main.c      ****     }
 641:.\main.c      ****     
 642:.\main.c      ****     // make the turn
 643:.\main.c      ****     setWheelDirection(TRUE, FALSE);
 1605              		.loc 1 643 0
 1606 00a8 0120     		movs	r0, #1
 1607 00aa 0021     		movs	r1, #0
 1608 00ac FFF7FEFF 		bl	setWheelDirection
 644:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1609              		.loc 1 644 0
 1610 00b0 4FF4E170 		mov	r0, #450
 1611 00b4 FFF7FEFF 		bl	PWM_1_WriteCompare
 645:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1612              		.loc 1 645 0
 1613 00b8 4FF4E170 		mov	r0, #450
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 41


 1614 00bc FFF7FEFF 		bl	PWM_2_WriteCompare
 646:.\main.c      ****     
 647:.\main.c      ****     turnForDegrees(45); // so that it doesn't stop if it's already on a line
 1615              		.loc 1 647 0
 1616 00c0 2D20     		movs	r0, #45
 1617 00c2 FFF7FEFF 		bl	turnForDegrees
 648:.\main.c      ****     
 649:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1618              		.loc 1 649 0
 1619 00c6 08E0     		b	.L82
 1620              	.L83:
 650:.\main.c      ****         if (adc_flag) {
 1621              		.loc 1 650 0
 1622 00c8 0D4B     		ldr	r3, .L84
 1623 00ca 1B68     		ldr	r3, [r3]
 1624 00cc 002B     		cmp	r3, #0
 1625 00ce 04D0     		beq	.L82
 651:.\main.c      ****             updateSensorValues();
 1626              		.loc 1 651 0
 1627 00d0 FFF7FEFF 		bl	updateSensorValues
 652:.\main.c      ****             adc_flag = FALSE;
 1628              		.loc 1 652 0
 1629 00d4 0A4B     		ldr	r3, .L84
 1630 00d6 0022     		movs	r2, #0
 1631 00d8 1A60     		str	r2, [r3]
 1632              	.L82:
 649:.\main.c      ****         if (adc_flag) {
 1633              		.loc 1 649 0
 1634 00da 0D4B     		ldr	r3, .L84+16
 1635 00dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1636 00de 002B     		cmp	r3, #0
 1637 00e0 F2D0     		beq	.L83
 653:.\main.c      ****         }
 654:.\main.c      ****     }
 655:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1638              		.loc 1 655 0
 1639 00e2 0120     		movs	r0, #1
 1640 00e4 0121     		movs	r1, #1
 1641 00e6 FFF7FEFF 		bl	setWheelDirection
 656:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1642              		.loc 1 656 0
 1643 00ea 4FF4E170 		mov	r0, #450
 1644 00ee FFF7FEFF 		bl	PWM_1_WriteCompare
 657:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1645              		.loc 1 657 0
 1646 00f2 4FF4E170 		mov	r0, #450
 1647 00f6 FFF7FEFF 		bl	PWM_2_WriteCompare
 658:.\main.c      **** }
 1648              		.loc 1 658 0
 1649 00fa 1037     		adds	r7, r7, #16
 1650              		.cfi_def_cfa_offset 8
 1651 00fc BD46     		mov	sp, r7
 1652              		.cfi_def_cfa_register 13
 1653              		@ sp needed
 1654 00fe 80BD     		pop	{r7, pc}
 1655              	.L85:
 1656              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 42


 1657              	.L84:
 1658 0100 00000000 		.word	adc_flag
 1659 0104 00000000 		.word	timer_flag
 1660 0108 00000000 		.word	countM1
 1661 010c 00000000 		.word	countM2
 1662 0110 00000000 		.word	sensor_readings
 1663              		.cfi_endproc
 1664              	.LFE78:
 1665              		.size	sharpTurnRight, .-sharpTurnRight
 1666              		.section	.text.usbPutString,"ax",%progbits
 1667              		.align	2
 1668              		.global	usbPutString
 1669              		.thumb
 1670              		.thumb_func
 1671              		.type	usbPutString, %function
 1672              	usbPutString:
 1673              	.LFB79:
 659:.\main.c      **** //* ================== UNUSED FUNCTIONS ======================
 660:.\main.c      **** 
 661:.\main.c      **** /*
 662:.\main.c      **** * Function for performing a 90 degree turn
 663:.\main.c      **** * returns true once finished
 664:.\main.c      **** */
 665:.\main.c      **** //int8 performTurn(int isLeft){
 666:.\main.c      **** //    // Reset decoder measurements
 667:.\main.c      **** //    QuadDec_M1_SetCounter(0);
 668:.\main.c      **** //    QuadDec_M2_SetCounter(0);
 669:.\main.c      **** //    
 670:.\main.c      **** //    int M1_count, M2_count = 0;
 671:.\main.c      **** //    
 672:.\main.c      **** //    // Set PWMs to rotate
 673:.\main.c      **** //    PWM_1_WriteCompare(TURN_PWM_VAL);
 674:.\main.c      **** //    PWM_2_WriteCompare(TURN_PWM_VAL);
 675:.\main.c      **** //    
 676:.\main.c      **** //    // Set wheel direction for rotating on the spot
 677:.\main.c      **** //    if (isLeft){
 678:.\main.c      **** //        // left wheel moves backwarsd, right moves forwards
 679:.\main.c      **** //        setWheelDirection(FALSE, TRUE);}
 680:.\main.c      **** //    else {
 681:.\main.c      **** //        // right wheel moves forwards, left moves backwards
 682:.\main.c      **** //        setWheelDirection(TRUE, FALSE);
 683:.\main.c      **** //    }
 684:.\main.c      **** //    
 685:.\main.c      **** //    while (M1_count < TICKS_FOR_TURN || M2_count < TICKS_FOR_TURN) {
 686:.\main.c      **** //        M1_count = QuadDec_M1_GetCounter();
 687:.\main.c      **** //        M2_count = QuadDec_M2_GetCounter();
 688:.\main.c      **** //    }
 689:.\main.c      **** //    
 690:.\main.c      **** //    PWM_1_WriteCompare(0);
 691:.\main.c      **** //    PWM_2_WriteCompare(0);
 692:.\main.c      **** //    
 693:.\main.c      **** //    return TRUE;
 694:.\main.c      **** //}
 695:.\main.c      **** 
 696:.\main.c      **** 
 697:.\main.c      **** //* ========================================
 698:.\main.c      **** void usbPutString(char *s)
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 43


 699:.\main.c      **** {
 1674              		.loc 1 699 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 8
 1677              		@ frame_needed = 1, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
 1679 0000 80B4     		push	{r7}
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 7, -4
 1682 0002 83B0     		sub	sp, sp, #12
 1683              		.cfi_def_cfa_offset 16
 1684 0004 00AF     		add	r7, sp, #0
 1685              		.cfi_def_cfa_register 7
 1686 0006 7860     		str	r0, [r7, #4]
 700:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
 701:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
 702:.\main.c      **** //  length to 62 char (63rd char is a '!')
 703:.\main.c      ****     
 704:.\main.c      **** #ifdef PUTTY
 705:.\main.c      ****     
 706:.\main.c      ****     while (USBUART_CDCIsReady() == 0){ };
 707:.\main.c      ****     USBUART_PutData((uint8 *)s, strlen(s));
 708:.\main.c      ****     
 709:.\main.c      **** #endif
 710:.\main.c      **** 
 711:.\main.c      ****     (void)s;
 712:.\main.c      **** 
 713:.\main.c      ****     return;
 1687              		.loc 1 713 0
 1688 0008 00BF     		nop
 714:.\main.c      **** }
 1689              		.loc 1 714 0
 1690 000a 0C37     		adds	r7, r7, #12
 1691              		.cfi_def_cfa_offset 4
 1692 000c BD46     		mov	sp, r7
 1693              		.cfi_def_cfa_register 13
 1694              		@ sp needed
 1695 000e 5DF8047B 		ldr	r7, [sp], #4
 1696              		.cfi_restore 7
 1697              		.cfi_def_cfa_offset 0
 1698 0012 7047     		bx	lr
 1699              		.cfi_endproc
 1700              	.LFE79:
 1701              		.size	usbPutString, .-usbPutString
 1702              		.text
 1703              	.Letext0:
 1704              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1705              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1706              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1707              		.file 5 ".\\vars.h"
 1708              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1709              		.section	.debug_info,"",%progbits
 1710              	.Ldebug_info0:
 1711 0000 54080000 		.4byte	0x854
 1712 0004 0400     		.2byte	0x4
 1713 0006 00000000 		.4byte	.Ldebug_abbrev0
 1714 000a 04       		.byte	0x4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 44


 1715 000b 01       		.uleb128 0x1
 1716 000c 47020000 		.4byte	.LASF113
 1717 0010 01       		.byte	0x1
 1718 0011 3B000000 		.4byte	.LASF114
 1719 0015 C8000000 		.4byte	.LASF115
 1720 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1721 001d 00000000 		.4byte	0
 1722 0021 00000000 		.4byte	.Ldebug_line0
 1723 0025 02       		.uleb128 0x2
 1724 0026 01       		.byte	0x1
 1725 0027 06       		.byte	0x6
 1726 0028 6E030000 		.4byte	.LASF0
 1727 002c 02       		.uleb128 0x2
 1728 002d 01       		.byte	0x1
 1729 002e 08       		.byte	0x8
 1730 002f 38030000 		.4byte	.LASF1
 1731 0033 02       		.uleb128 0x2
 1732 0034 02       		.byte	0x2
 1733 0035 05       		.byte	0x5
 1734 0036 68000000 		.4byte	.LASF2
 1735 003a 02       		.uleb128 0x2
 1736 003b 02       		.byte	0x2
 1737 003c 07       		.byte	0x7
 1738 003d 05040000 		.4byte	.LASF3
 1739 0041 03       		.uleb128 0x3
 1740 0042 5C050000 		.4byte	.LASF11
 1741 0046 02       		.byte	0x2
 1742 0047 3F       		.byte	0x3f
 1743 0048 4C000000 		.4byte	0x4c
 1744 004c 02       		.uleb128 0x2
 1745 004d 04       		.byte	0x4
 1746 004e 05       		.byte	0x5
 1747 004f 39040000 		.4byte	.LASF4
 1748 0053 02       		.uleb128 0x2
 1749 0054 04       		.byte	0x4
 1750 0055 07       		.byte	0x7
 1751 0056 D8030000 		.4byte	.LASF5
 1752 005a 02       		.uleb128 0x2
 1753 005b 08       		.byte	0x8
 1754 005c 05       		.byte	0x5
 1755 005d DC010000 		.4byte	.LASF6
 1756 0061 02       		.uleb128 0x2
 1757 0062 08       		.byte	0x8
 1758 0063 07       		.byte	0x7
 1759 0064 88030000 		.4byte	.LASF7
 1760 0068 04       		.uleb128 0x4
 1761 0069 04       		.byte	0x4
 1762 006a 05       		.byte	0x5
 1763 006b 696E7400 		.ascii	"int\000"
 1764 006f 02       		.uleb128 0x2
 1765 0070 04       		.byte	0x4
 1766 0071 07       		.byte	0x7
 1767 0072 A5030000 		.4byte	.LASF8
 1768 0076 02       		.uleb128 0x2
 1769 0077 04       		.byte	0x4
 1770 0078 07       		.byte	0x7
 1771 0079 7F000000 		.4byte	.LASF9
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 45


 1772 007d 05       		.uleb128 0x5
 1773 007e 04       		.byte	0x4
 1774 007f 83000000 		.4byte	0x83
 1775 0083 02       		.uleb128 0x2
 1776 0084 01       		.byte	0x1
 1777 0085 08       		.byte	0x8
 1778 0086 2B040000 		.4byte	.LASF10
 1779 008a 03       		.uleb128 0x3
 1780 008b 5B040000 		.4byte	.LASF12
 1781 008f 03       		.byte	0x3
 1782 0090 2C       		.byte	0x2c
 1783 0091 41000000 		.4byte	0x41
 1784 0095 06       		.uleb128 0x6
 1785 0096 83010000 		.4byte	.LASF13
 1786 009a 04       		.byte	0x4
 1787 009b 9201     		.2byte	0x192
 1788 009d 2C000000 		.4byte	0x2c
 1789 00a1 06       		.uleb128 0x6
 1790 00a2 70010000 		.4byte	.LASF14
 1791 00a6 04       		.byte	0x4
 1792 00a7 9301     		.2byte	0x193
 1793 00a9 3A000000 		.4byte	0x3a
 1794 00ad 06       		.uleb128 0x6
 1795 00ae F7010000 		.4byte	.LASF15
 1796 00b2 04       		.byte	0x4
 1797 00b3 9501     		.2byte	0x195
 1798 00b5 25000000 		.4byte	0x25
 1799 00b9 06       		.uleb128 0x6
 1800 00ba 7D010000 		.4byte	.LASF16
 1801 00be 04       		.byte	0x4
 1802 00bf 9601     		.2byte	0x196
 1803 00c1 33000000 		.4byte	0x33
 1804 00c5 06       		.uleb128 0x6
 1805 00c6 0B050000 		.4byte	.LASF17
 1806 00ca 04       		.byte	0x4
 1807 00cb 9701     		.2byte	0x197
 1808 00cd 4C000000 		.4byte	0x4c
 1809 00d1 02       		.uleb128 0x2
 1810 00d2 04       		.byte	0x4
 1811 00d3 04       		.byte	0x4
 1812 00d4 D6010000 		.4byte	.LASF18
 1813 00d8 02       		.uleb128 0x2
 1814 00d9 08       		.byte	0x8
 1815 00da 04       		.byte	0x4
 1816 00db 11050000 		.4byte	.LASF19
 1817 00df 07       		.uleb128 0x7
 1818 00e0 18040000 		.4byte	.LASF116
 1819 00e4 20       		.byte	0x20
 1820 00e5 05       		.byte	0x5
 1821 00e6 29       		.byte	0x29
 1822 00e7 B8010000 		.4byte	0x1b8
 1823 00eb 08       		.uleb128 0x8
 1824 00ec 1C060000 		.4byte	.LASF20
 1825 00f0 05       		.byte	0x5
 1826 00f1 2A       		.byte	0x2a
 1827 00f2 AD000000 		.4byte	0xad
 1828 00f6 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 46


 1829 00f7 08       		.uleb128 0x8
 1830 00f8 77010000 		.4byte	.LASF21
 1831 00fc 05       		.byte	0x5
 1832 00fd 2B       		.byte	0x2b
 1833 00fe 95000000 		.4byte	0x95
 1834 0102 01       		.byte	0x1
 1835 0103 08       		.uleb128 0x8
 1836 0104 42040000 		.4byte	.LASF22
 1837 0108 05       		.byte	0x5
 1838 0109 2C       		.byte	0x2c
 1839 010a B9000000 		.4byte	0xb9
 1840 010e 02       		.byte	0x2
 1841 010f 08       		.uleb128 0x8
 1842 0110 EF050000 		.4byte	.LASF23
 1843 0114 05       		.byte	0x5
 1844 0115 2D       		.byte	0x2d
 1845 0116 B9000000 		.4byte	0xb9
 1846 011a 04       		.byte	0x4
 1847 011b 08       		.uleb128 0x8
 1848 011c E0020000 		.4byte	.LASF24
 1849 0120 05       		.byte	0x5
 1850 0121 2E       		.byte	0x2e
 1851 0122 B9000000 		.4byte	0xb9
 1852 0126 06       		.byte	0x6
 1853 0127 08       		.uleb128 0x8
 1854 0128 E0040000 		.4byte	.LASF25
 1855 012c 05       		.byte	0x5
 1856 012d 2F       		.byte	0x2f
 1857 012e B9000000 		.4byte	0xb9
 1858 0132 08       		.byte	0x8
 1859 0133 08       		.uleb128 0x8
 1860 0134 8E050000 		.4byte	.LASF26
 1861 0138 05       		.byte	0x5
 1862 0139 30       		.byte	0x30
 1863 013a B9000000 		.4byte	0xb9
 1864 013e 0A       		.byte	0xa
 1865 013f 08       		.uleb128 0x8
 1866 0140 50030000 		.4byte	.LASF27
 1867 0144 05       		.byte	0x5
 1868 0145 31       		.byte	0x31
 1869 0146 B9000000 		.4byte	0xb9
 1870 014a 0C       		.byte	0xc
 1871 014b 08       		.uleb128 0x8
 1872 014c 26020000 		.4byte	.LASF28
 1873 0150 05       		.byte	0x5
 1874 0151 32       		.byte	0x32
 1875 0152 B9000000 		.4byte	0xb9
 1876 0156 0E       		.byte	0xe
 1877 0157 08       		.uleb128 0x8
 1878 0158 FD030000 		.4byte	.LASF29
 1879 015c 05       		.byte	0x5
 1880 015d 33       		.byte	0x33
 1881 015e B9000000 		.4byte	0xb9
 1882 0162 10       		.byte	0x10
 1883 0163 08       		.uleb128 0x8
 1884 0164 1C030000 		.4byte	.LASF30
 1885 0168 05       		.byte	0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 47


 1886 0169 34       		.byte	0x34
 1887 016a B9000000 		.4byte	0xb9
 1888 016e 12       		.byte	0x12
 1889 016f 08       		.uleb128 0x8
 1890 0170 8D040000 		.4byte	.LASF31
 1891 0174 05       		.byte	0x5
 1892 0175 35       		.byte	0x35
 1893 0176 B9000000 		.4byte	0xb9
 1894 017a 14       		.byte	0x14
 1895 017b 08       		.uleb128 0x8
 1896 017c 89010000 		.4byte	.LASF32
 1897 0180 05       		.byte	0x5
 1898 0181 36       		.byte	0x36
 1899 0182 B9000000 		.4byte	0xb9
 1900 0186 16       		.byte	0x16
 1901 0187 08       		.uleb128 0x8
 1902 0188 60000000 		.4byte	.LASF33
 1903 018c 05       		.byte	0x5
 1904 018d 37       		.byte	0x37
 1905 018e B9000000 		.4byte	0xb9
 1906 0192 18       		.byte	0x18
 1907 0193 08       		.uleb128 0x8
 1908 0194 1E020000 		.4byte	.LASF34
 1909 0198 05       		.byte	0x5
 1910 0199 38       		.byte	0x38
 1911 019a B9000000 		.4byte	0xb9
 1912 019e 1A       		.byte	0x1a
 1913 019f 08       		.uleb128 0x8
 1914 01a0 F4030000 		.4byte	.LASF35
 1915 01a4 05       		.byte	0x5
 1916 01a5 39       		.byte	0x39
 1917 01a6 B9000000 		.4byte	0xb9
 1918 01aa 1C       		.byte	0x1c
 1919 01ab 08       		.uleb128 0x8
 1920 01ac 73040000 		.4byte	.LASF36
 1921 01b0 05       		.byte	0x5
 1922 01b1 3A       		.byte	0x3a
 1923 01b2 B9000000 		.4byte	0xb9
 1924 01b6 1E       		.byte	0x1e
 1925 01b7 00       		.byte	0
 1926 01b8 09       		.uleb128 0x9
 1927 01b9 A1040000 		.4byte	.LASF46
 1928 01bd 01       		.byte	0x1
 1929 01be 01       		.byte	0x1
 1930 01bf 42       		.byte	0x42
 1931 01c0 FB010000 		.4byte	0x1fb
 1932 01c4 0A       		.uleb128 0xa
 1933 01c5 44000000 		.4byte	.LASF37
 1934 01c9 00       		.sleb128 0
 1935 01ca 0A       		.uleb128 0xa
 1936 01cb A8000000 		.4byte	.LASF38
 1937 01cf 01       		.sleb128 1
 1938 01d0 0A       		.uleb128 0xa
 1939 01d1 3E060000 		.4byte	.LASF39
 1940 01d5 02       		.sleb128 2
 1941 01d6 0A       		.uleb128 0xa
 1942 01d7 2E000000 		.4byte	.LASF40
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 48


 1943 01db 03       		.sleb128 3
 1944 01dc 0A       		.uleb128 0xa
 1945 01dd CC040000 		.4byte	.LASF41
 1946 01e1 04       		.sleb128 4
 1947 01e2 0A       		.uleb128 0xa
 1948 01e3 D5020000 		.4byte	.LASF42
 1949 01e7 05       		.sleb128 5
 1950 01e8 0A       		.uleb128 0xa
 1951 01e9 46030000 		.4byte	.LASF43
 1952 01ed 06       		.sleb128 6
 1953 01ee 0A       		.uleb128 0xa
 1954 01ef 4B050000 		.4byte	.LASF44
 1955 01f3 07       		.sleb128 7
 1956 01f4 0A       		.uleb128 0xa
 1957 01f5 42020000 		.4byte	.LASF45
 1958 01f9 08       		.sleb128 8
 1959 01fa 00       		.byte	0
 1960 01fb 03       		.uleb128 0x3
 1961 01fc A1040000 		.4byte	.LASF46
 1962 0200 01       		.byte	0x1
 1963 0201 4C       		.byte	0x4c
 1964 0202 B8010000 		.4byte	0x1b8
 1965 0206 0B       		.uleb128 0xb
 1966 0207 62030000 		.4byte	.LASF47
 1967 020b 01       		.byte	0x1
 1968 020c 70       		.byte	0x70
 1969 020d 00000000 		.4byte	.LFB63
 1970 0211 30000000 		.4byte	.LFE63-.LFB63
 1971 0215 01       		.uleb128 0x1
 1972 0216 9C       		.byte	0x9c
 1973 0217 0C       		.uleb128 0xc
 1974 0218 0B000000 		.4byte	.LASF48
 1975 021c 01       		.byte	0x1
 1976 021d 77       		.byte	0x77
 1977 021e 00000000 		.4byte	.LFB64
 1978 0222 18000000 		.4byte	.LFE64-.LFB64
 1979 0226 01       		.uleb128 0x1
 1980 0227 9C       		.byte	0x9c
 1981 0228 0D       		.uleb128 0xd
 1982 0229 B7000000 		.4byte	.LASF55
 1983 022d 01       		.byte	0x1
 1984 022e 8C       		.byte	0x8c
 1985 022f 68000000 		.4byte	0x68
 1986 0233 00000000 		.4byte	.LFB65
 1987 0237 90000000 		.4byte	.LFE65-.LFB65
 1988 023b 01       		.uleb128 0x1
 1989 023c 9C       		.byte	0x9c
 1990 023d A1020000 		.4byte	0x2a1
 1991 0241 0E       		.uleb128 0xe
 1992 0242 24030000 		.4byte	.LASF49
 1993 0246 01       		.byte	0x1
 1994 0247 B2       		.byte	0xb2
 1995 0248 68000000 		.4byte	0x68
 1996 024c 02       		.uleb128 0x2
 1997 024d 91       		.byte	0x91
 1998 024e 74       		.sleb128 -12
 1999 024f 0E       		.uleb128 0xe
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 49


 2000 0250 96010000 		.4byte	.LASF50
 2001 0254 01       		.byte	0x1
 2002 0255 B3       		.byte	0xb3
 2003 0256 68000000 		.4byte	0x68
 2004 025a 02       		.uleb128 0x2
 2005 025b 91       		.byte	0x91
 2006 025c 70       		.sleb128 -16
 2007 025d 0E       		.uleb128 0xe
 2008 025e E8040000 		.4byte	.LASF51
 2009 0262 01       		.byte	0x1
 2010 0263 B4       		.byte	0xb4
 2011 0264 68000000 		.4byte	0x68
 2012 0268 02       		.uleb128 0x2
 2013 0269 91       		.byte	0x91
 2014 026a 64       		.sleb128 -28
 2015 026b 0E       		.uleb128 0xe
 2016 026c FA040000 		.4byte	.LASF52
 2017 0270 01       		.byte	0x1
 2018 0271 B5       		.byte	0xb5
 2019 0272 68000000 		.4byte	0x68
 2020 0276 02       		.uleb128 0x2
 2021 0277 91       		.byte	0x91
 2022 0278 60       		.sleb128 -32
 2023 0279 0E       		.uleb128 0xe
 2024 027a 76050000 		.4byte	.LASF53
 2025 027e 01       		.byte	0x1
 2026 027f B6       		.byte	0xb6
 2027 0280 68000000 		.4byte	0x68
 2028 0284 02       		.uleb128 0x2
 2029 0285 91       		.byte	0x91
 2030 0286 6C       		.sleb128 -20
 2031 0287 0F       		.uleb128 0xf
 2032 0288 4C000000 		.4byte	.LASF117
 2033 028c 01       		.byte	0x1
 2034 028d B8       		.byte	0xb8
 2035 028e FB010000 		.4byte	0x1fb
 2036 0292 0E       		.uleb128 0xe
 2037 0293 FA050000 		.4byte	.LASF54
 2038 0297 01       		.byte	0x1
 2039 0298 B9       		.byte	0xb9
 2040 0299 FB010000 		.4byte	0x1fb
 2041 029d 02       		.uleb128 0x2
 2042 029e 91       		.byte	0x91
 2043 029f 6B       		.sleb128 -21
 2044 02a0 00       		.byte	0
 2045 02a1 10       		.uleb128 0x10
 2046 02a2 CB010000 		.4byte	.LASF56
 2047 02a6 01       		.byte	0x1
 2048 02a7 5401     		.2byte	0x154
 2049 02a9 00000000 		.4byte	.LFB66
 2050 02ad 78010000 		.4byte	.LFE66-.LFB66
 2051 02b1 01       		.uleb128 0x1
 2052 02b2 9C       		.byte	0x9c
 2053 02b3 12030000 		.4byte	0x312
 2054 02b7 11       		.uleb128 0x11
 2055 02b8 BB040000 		.4byte	.LASF57
 2056 02bc 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 50


 2057 02bd 5401     		.2byte	0x154
 2058 02bf 68000000 		.4byte	0x68
 2059 02c3 02       		.uleb128 0x2
 2060 02c4 91       		.byte	0x91
 2061 02c5 64       		.sleb128 -28
 2062 02c6 11       		.uleb128 0x11
 2063 02c7 E8040000 		.4byte	.LASF51
 2064 02cb 01       		.byte	0x1
 2065 02cc 5401     		.2byte	0x154
 2066 02ce 12030000 		.4byte	0x312
 2067 02d2 02       		.uleb128 0x2
 2068 02d3 91       		.byte	0x91
 2069 02d4 60       		.sleb128 -32
 2070 02d5 11       		.uleb128 0x11
 2071 02d6 FA040000 		.4byte	.LASF52
 2072 02da 01       		.byte	0x1
 2073 02db 5401     		.2byte	0x154
 2074 02dd 12030000 		.4byte	0x312
 2075 02e1 02       		.uleb128 0x2
 2076 02e2 91       		.byte	0x91
 2077 02e3 5C       		.sleb128 -36
 2078 02e4 12       		.uleb128 0x12
 2079 02e5 24030000 		.4byte	.LASF49
 2080 02e9 01       		.byte	0x1
 2081 02ea 5601     		.2byte	0x156
 2082 02ec 68000000 		.4byte	0x68
 2083 02f0 02       		.uleb128 0x2
 2084 02f1 91       		.byte	0x91
 2085 02f2 74       		.sleb128 -12
 2086 02f3 12       		.uleb128 0x12
 2087 02f4 96010000 		.4byte	.LASF50
 2088 02f8 01       		.byte	0x1
 2089 02f9 5701     		.2byte	0x157
 2090 02fb 68000000 		.4byte	0x68
 2091 02ff 02       		.uleb128 0x2
 2092 0300 91       		.byte	0x91
 2093 0301 70       		.sleb128 -16
 2094 0302 12       		.uleb128 0x12
 2095 0303 22040000 		.4byte	.LASF58
 2096 0307 01       		.byte	0x1
 2097 0308 5A01     		.2byte	0x15a
 2098 030a D1000000 		.4byte	0xd1
 2099 030e 02       		.uleb128 0x2
 2100 030f 91       		.byte	0x91
 2101 0310 6C       		.sleb128 -20
 2102 0311 00       		.byte	0
 2103 0312 05       		.uleb128 0x5
 2104 0313 04       		.byte	0x4
 2105 0314 68000000 		.4byte	0x68
 2106 0318 13       		.uleb128 0x13
 2107 0319 B5050000 		.4byte	.LASF65
 2108 031d 01       		.byte	0x1
 2109 031e 9701     		.2byte	0x197
 2110 0320 D1000000 		.4byte	0xd1
 2111 0324 00000000 		.4byte	.LFB67
 2112 0328 CC000000 		.4byte	.LFE67-.LFB67
 2113 032c 01       		.uleb128 0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 51


 2114 032d 9C       		.byte	0x9c
 2115 032e 6F030000 		.4byte	0x36f
 2116 0332 11       		.uleb128 0x11
 2117 0333 24030000 		.4byte	.LASF49
 2118 0337 01       		.byte	0x1
 2119 0338 9701     		.2byte	0x197
 2120 033a 68000000 		.4byte	0x68
 2121 033e 02       		.uleb128 0x2
 2122 033f 91       		.byte	0x91
 2123 0340 6C       		.sleb128 -20
 2124 0341 11       		.uleb128 0x11
 2125 0342 96010000 		.4byte	.LASF50
 2126 0346 01       		.byte	0x1
 2127 0347 9701     		.2byte	0x197
 2128 0349 68000000 		.4byte	0x68
 2129 034d 02       		.uleb128 0x2
 2130 034e 91       		.byte	0x91
 2131 034f 68       		.sleb128 -24
 2132 0350 12       		.uleb128 0x12
 2133 0351 B2030000 		.4byte	.LASF59
 2134 0355 01       		.byte	0x1
 2135 0356 9801     		.2byte	0x198
 2136 0358 D1000000 		.4byte	0xd1
 2137 035c 02       		.uleb128 0x2
 2138 035d 91       		.byte	0x91
 2139 035e 74       		.sleb128 -12
 2140 035f 12       		.uleb128 0x12
 2141 0360 1A000000 		.4byte	.LASF60
 2142 0364 01       		.byte	0x1
 2143 0365 9901     		.2byte	0x199
 2144 0367 D1000000 		.4byte	0xd1
 2145 036b 02       		.uleb128 0x2
 2146 036c 91       		.byte	0x91
 2147 036d 70       		.sleb128 -16
 2148 036e 00       		.byte	0
 2149 036f 10       		.uleb128 0x10
 2150 0370 C9030000 		.4byte	.LASF61
 2151 0374 01       		.byte	0x1
 2152 0375 9D01     		.2byte	0x19d
 2153 0377 00000000 		.4byte	.LFB68
 2154 037b 8C000000 		.4byte	.LFE68-.LFB68
 2155 037f 01       		.uleb128 0x1
 2156 0380 9C       		.byte	0x9c
 2157 0381 D1030000 		.4byte	0x3d1
 2158 0385 11       		.uleb128 0x11
 2159 0386 30030000 		.4byte	.LASF62
 2160 038a 01       		.byte	0x1
 2161 038b 9D01     		.2byte	0x19d
 2162 038d 68000000 		.4byte	0x68
 2163 0391 02       		.uleb128 0x2
 2164 0392 91       		.byte	0x91
 2165 0393 64       		.sleb128 -28
 2166 0394 12       		.uleb128 0x12
 2167 0395 52010000 		.4byte	.LASF63
 2168 0399 01       		.byte	0x1
 2169 039a 9E01     		.2byte	0x19e
 2170 039c D1000000 		.4byte	0xd1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 52


 2171 03a0 02       		.uleb128 0x2
 2172 03a1 91       		.byte	0x91
 2173 03a2 68       		.sleb128 -24
 2174 03a3 12       		.uleb128 0x12
 2175 03a4 63040000 		.4byte	.LASF64
 2176 03a8 01       		.byte	0x1
 2177 03a9 9F01     		.2byte	0x19f
 2178 03ab D1000000 		.4byte	0xd1
 2179 03af 02       		.uleb128 0x2
 2180 03b0 91       		.byte	0x91
 2181 03b1 74       		.sleb128 -12
 2182 03b2 12       		.uleb128 0x12
 2183 03b3 24030000 		.4byte	.LASF49
 2184 03b7 01       		.byte	0x1
 2185 03b8 A101     		.2byte	0x1a1
 2186 03ba 68000000 		.4byte	0x68
 2187 03be 02       		.uleb128 0x2
 2188 03bf 91       		.byte	0x91
 2189 03c0 70       		.sleb128 -16
 2190 03c1 12       		.uleb128 0x12
 2191 03c2 96010000 		.4byte	.LASF50
 2192 03c6 01       		.byte	0x1
 2193 03c7 A201     		.2byte	0x1a2
 2194 03c9 68000000 		.4byte	0x68
 2195 03cd 02       		.uleb128 0x2
 2196 03ce 91       		.byte	0x91
 2197 03cf 6C       		.sleb128 -20
 2198 03d0 00       		.byte	0
 2199 03d1 13       		.uleb128 0x13
 2200 03d2 AF010000 		.4byte	.LASF66
 2201 03d6 01       		.byte	0x1
 2202 03d7 B901     		.2byte	0x1b9
 2203 03d9 C5000000 		.4byte	0xc5
 2204 03dd 00000000 		.4byte	.LFB69
 2205 03e1 24000000 		.4byte	.LFE69-.LFB69
 2206 03e5 01       		.uleb128 0x1
 2207 03e6 9C       		.byte	0x9c
 2208 03e7 F9030000 		.4byte	0x3f9
 2209 03eb 14       		.uleb128 0x14
 2210 03ec 6E00     		.ascii	"n\000"
 2211 03ee 01       		.byte	0x1
 2212 03ef B901     		.2byte	0x1b9
 2213 03f1 B9000000 		.4byte	0xb9
 2214 03f5 02       		.uleb128 0x2
 2215 03f6 91       		.byte	0x91
 2216 03f7 76       		.sleb128 -10
 2217 03f8 00       		.byte	0
 2218 03f9 15       		.uleb128 0x15
 2219 03fa FC010000 		.4byte	.LASF118
 2220 03fe 01       		.byte	0x1
 2221 03ff BD01     		.2byte	0x1bd
 2222 0401 00000000 		.4byte	.LFB70
 2223 0405 B4000000 		.4byte	.LFE70-.LFB70
 2224 0409 01       		.uleb128 0x1
 2225 040a 9C       		.byte	0x9c
 2226 040b 36040000 		.4byte	0x436
 2227 040f 16       		.uleb128 0x16
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 53


 2228 0410 6900     		.ascii	"i\000"
 2229 0412 01       		.byte	0x1
 2230 0413 BF01     		.2byte	0x1bf
 2231 0415 68000000 		.4byte	0x68
 2232 0419 02       		.uleb128 0x2
 2233 041a 91       		.byte	0x91
 2234 041b 74       		.sleb128 -12
 2235 041c 17       		.uleb128 0x17
 2236 041d 0C000000 		.4byte	.LBB2
 2237 0421 26000000 		.4byte	.LBE2-.LBB2
 2238 0425 12       		.uleb128 0x12
 2239 0426 D8040000 		.4byte	.LASF67
 2240 042a 01       		.byte	0x1
 2241 042b C101     		.2byte	0x1c1
 2242 042d 68000000 		.4byte	0x68
 2243 0431 02       		.uleb128 0x2
 2244 0432 91       		.byte	0x91
 2245 0433 70       		.sleb128 -16
 2246 0434 00       		.byte	0
 2247 0435 00       		.byte	0
 2248 0436 10       		.uleb128 0x10
 2249 0437 18050000 		.4byte	.LASF68
 2250 043b 01       		.byte	0x1
 2251 043c D401     		.2byte	0x1d4
 2252 043e 00000000 		.4byte	.LFB71
 2253 0442 2A000000 		.4byte	.LFE71-.LFB71
 2254 0446 01       		.uleb128 0x1
 2255 0447 9C       		.byte	0x9c
 2256 0448 6B040000 		.4byte	0x46b
 2257 044c 11       		.uleb128 0x11
 2258 044d 05060000 		.4byte	.LASF69
 2259 0451 01       		.byte	0x1
 2260 0452 D401     		.2byte	0x1d4
 2261 0454 68000000 		.4byte	0x68
 2262 0458 02       		.uleb128 0x2
 2263 0459 91       		.byte	0x91
 2264 045a 6C       		.sleb128 -20
 2265 045b 12       		.uleb128 0x12
 2266 045c 84050000 		.4byte	.LASF70
 2267 0460 01       		.byte	0x1
 2268 0461 D501     		.2byte	0x1d5
 2269 0463 68000000 		.4byte	0x68
 2270 0467 02       		.uleb128 0x2
 2271 0468 91       		.byte	0x91
 2272 0469 74       		.sleb128 -12
 2273 046a 00       		.byte	0
 2274 046b 10       		.uleb128 0x10
 2275 046c 88000000 		.4byte	.LASF71
 2276 0470 01       		.byte	0x1
 2277 0471 D901     		.2byte	0x1d9
 2278 0473 00000000 		.4byte	.LFB72
 2279 0477 2A000000 		.4byte	.LFE72-.LFB72
 2280 047b 01       		.uleb128 0x1
 2281 047c 9C       		.byte	0x9c
 2282 047d A0040000 		.4byte	0x4a0
 2283 0481 11       		.uleb128 0x11
 2284 0482 05060000 		.4byte	.LASF69
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 54


 2285 0486 01       		.byte	0x1
 2286 0487 D901     		.2byte	0x1d9
 2287 0489 68000000 		.4byte	0x68
 2288 048d 02       		.uleb128 0x2
 2289 048e 91       		.byte	0x91
 2290 048f 6C       		.sleb128 -20
 2291 0490 12       		.uleb128 0x12
 2292 0491 84050000 		.4byte	.LASF70
 2293 0495 01       		.byte	0x1
 2294 0496 DA01     		.2byte	0x1da
 2295 0498 68000000 		.4byte	0x68
 2296 049c 02       		.uleb128 0x2
 2297 049d 91       		.byte	0x91
 2298 049e 74       		.sleb128 -12
 2299 049f 00       		.byte	0
 2300 04a0 10       		.uleb128 0x10
 2301 04a1 A2010000 		.4byte	.LASF72
 2302 04a5 01       		.byte	0x1
 2303 04a6 E201     		.2byte	0x1e2
 2304 04a8 00000000 		.4byte	.LFB73
 2305 04ac 52000000 		.4byte	.LFE73-.LFB73
 2306 04b0 01       		.uleb128 0x1
 2307 04b1 9C       		.byte	0x9c
 2308 04b2 25050000 		.4byte	0x525
 2309 04b6 11       		.uleb128 0x11
 2310 04b7 EA030000 		.4byte	.LASF73
 2311 04bb 01       		.byte	0x1
 2312 04bc E201     		.2byte	0x1e2
 2313 04be 68000000 		.4byte	0x68
 2314 04c2 03       		.uleb128 0x3
 2315 04c3 91       		.byte	0x91
 2316 04c4 AC7F     		.sleb128 -84
 2317 04c6 11       		.uleb128 0x11
 2318 04c7 45050000 		.4byte	.LASF74
 2319 04cb 01       		.byte	0x1
 2320 04cc E201     		.2byte	0x1e2
 2321 04ce 68000000 		.4byte	0x68
 2322 04d2 03       		.uleb128 0x3
 2323 04d3 91       		.byte	0x91
 2324 04d4 A87F     		.sleb128 -88
 2325 04d6 11       		.uleb128 0x11
 2326 04d7 7A030000 		.4byte	.LASF75
 2327 04db 01       		.byte	0x1
 2328 04dc E201     		.2byte	0x1e2
 2329 04de 68000000 		.4byte	0x68
 2330 04e2 03       		.uleb128 0x3
 2331 04e3 91       		.byte	0x91
 2332 04e4 A47F     		.sleb128 -92
 2333 04e6 11       		.uleb128 0x11
 2334 04e7 BC000000 		.4byte	.LASF76
 2335 04eb 01       		.byte	0x1
 2336 04ec E201     		.2byte	0x1e2
 2337 04ee 68000000 		.4byte	0x68
 2338 04f2 03       		.uleb128 0x3
 2339 04f3 91       		.byte	0x91
 2340 04f4 A07F     		.sleb128 -96
 2341 04f6 12       		.uleb128 0x12
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 55


 2342 04f7 96040000 		.4byte	.LASF77
 2343 04fb 01       		.byte	0x1
 2344 04fc E701     		.2byte	0x1e7
 2345 04fe 68000000 		.4byte	0x68
 2346 0502 02       		.uleb128 0x2
 2347 0503 91       		.byte	0x91
 2348 0504 74       		.sleb128 -12
 2349 0505 16       		.uleb128 0x16
 2350 0506 6D736700 		.ascii	"msg\000"
 2351 050a 01       		.byte	0x1
 2352 050b EC01     		.2byte	0x1ec
 2353 050d 25050000 		.4byte	0x525
 2354 0511 03       		.uleb128 0x3
 2355 0512 91       		.byte	0x91
 2356 0513 B07F     		.sleb128 -80
 2357 0515 12       		.uleb128 0x12
 2358 0516 00000000 		.4byte	.LASF78
 2359 051a 01       		.byte	0x1
 2360 051b F301     		.2byte	0x1f3
 2361 051d 68000000 		.4byte	0x68
 2362 0521 02       		.uleb128 0x2
 2363 0522 91       		.byte	0x91
 2364 0523 70       		.sleb128 -16
 2365 0524 00       		.byte	0
 2366 0525 18       		.uleb128 0x18
 2367 0526 83000000 		.4byte	0x83
 2368 052a 35050000 		.4byte	0x535
 2369 052e 19       		.uleb128 0x19
 2370 052f 76000000 		.4byte	0x76
 2371 0533 3F       		.byte	0x3f
 2372 0534 00       		.byte	0
 2373 0535 10       		.uleb128 0x10
 2374 0536 C1050000 		.4byte	.LASF79
 2375 053a 01       		.byte	0x1
 2376 053b 0402     		.2byte	0x204
 2377 053d 00000000 		.4byte	.LFB74
 2378 0541 2C000000 		.4byte	.LFE74-.LFB74
 2379 0545 01       		.uleb128 0x1
 2380 0546 9C       		.byte	0x9c
 2381 0547 6A050000 		.4byte	0x56a
 2382 054b 11       		.uleb128 0x11
 2383 054c 21060000 		.4byte	.LASF80
 2384 0550 01       		.byte	0x1
 2385 0551 0402     		.2byte	0x204
 2386 0553 68000000 		.4byte	0x68
 2387 0557 02       		.uleb128 0x2
 2388 0558 91       		.byte	0x91
 2389 0559 74       		.sleb128 -12
 2390 055a 11       		.uleb128 0x11
 2391 055b 33020000 		.4byte	.LASF81
 2392 055f 01       		.byte	0x1
 2393 0560 0402     		.2byte	0x204
 2394 0562 68000000 		.4byte	0x68
 2395 0566 02       		.uleb128 0x2
 2396 0567 91       		.byte	0x91
 2397 0568 70       		.sleb128 -16
 2398 0569 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 56


 2399 056a 1A       		.uleb128 0x1a
 2400 056b 59030000 		.4byte	.LASF82
 2401 056f 01       		.byte	0x1
 2402 0570 0902     		.2byte	0x209
 2403 0572 00000000 		.4byte	.LFB75
 2404 0576 40000000 		.4byte	.LFE75-.LFB75
 2405 057a 01       		.uleb128 0x1
 2406 057b 9C       		.byte	0x9c
 2407 057c 1A       		.uleb128 0x1a
 2408 057d 96050000 		.4byte	.LASF83
 2409 0581 01       		.byte	0x1
 2410 0582 1502     		.2byte	0x215
 2411 0584 00000000 		.4byte	.LFB76
 2412 0588 40000000 		.4byte	.LFE76-.LFB76
 2413 058c 01       		.uleb128 0x1
 2414 058d 9C       		.byte	0x9c
 2415 058e 10       		.uleb128 0x10
 2416 058f 4D040000 		.4byte	.LASF84
 2417 0593 01       		.byte	0x1
 2418 0594 2102     		.2byte	0x221
 2419 0596 00000000 		.4byte	.LFB77
 2420 059a 14010000 		.4byte	.LFE77-.LFB77
 2421 059e 01       		.uleb128 0x1
 2422 059f 9C       		.byte	0x9c
 2423 05a0 E1050000 		.4byte	0x5e1
 2424 05a4 11       		.uleb128 0x11
 2425 05a5 E8040000 		.4byte	.LASF51
 2426 05a9 01       		.byte	0x1
 2427 05aa 2102     		.2byte	0x221
 2428 05ac 12030000 		.4byte	0x312
 2429 05b0 02       		.uleb128 0x2
 2430 05b1 91       		.byte	0x91
 2431 05b2 6C       		.sleb128 -20
 2432 05b3 11       		.uleb128 0x11
 2433 05b4 FA040000 		.4byte	.LASF52
 2434 05b8 01       		.byte	0x1
 2435 05b9 2102     		.2byte	0x221
 2436 05bb 12030000 		.4byte	0x312
 2437 05bf 02       		.uleb128 0x2
 2438 05c0 91       		.byte	0x91
 2439 05c1 68       		.sleb128 -24
 2440 05c2 12       		.uleb128 0x12
 2441 05c3 24030000 		.4byte	.LASF49
 2442 05c7 01       		.byte	0x1
 2443 05c8 2202     		.2byte	0x222
 2444 05ca 68000000 		.4byte	0x68
 2445 05ce 02       		.uleb128 0x2
 2446 05cf 91       		.byte	0x91
 2447 05d0 74       		.sleb128 -12
 2448 05d1 12       		.uleb128 0x12
 2449 05d2 96010000 		.4byte	.LASF50
 2450 05d6 01       		.byte	0x1
 2451 05d7 2302     		.2byte	0x223
 2452 05d9 68000000 		.4byte	0x68
 2453 05dd 02       		.uleb128 0x2
 2454 05de 91       		.byte	0x91
 2455 05df 70       		.sleb128 -16
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 57


 2456 05e0 00       		.byte	0
 2457 05e1 10       		.uleb128 0x10
 2458 05e2 2F060000 		.4byte	.LASF85
 2459 05e6 01       		.byte	0x1
 2460 05e7 5B02     		.2byte	0x25b
 2461 05e9 00000000 		.4byte	.LFB78
 2462 05ed 14010000 		.4byte	.LFE78-.LFB78
 2463 05f1 01       		.uleb128 0x1
 2464 05f2 9C       		.byte	0x9c
 2465 05f3 34060000 		.4byte	0x634
 2466 05f7 11       		.uleb128 0x11
 2467 05f8 E8040000 		.4byte	.LASF51
 2468 05fc 01       		.byte	0x1
 2469 05fd 5B02     		.2byte	0x25b
 2470 05ff 12030000 		.4byte	0x312
 2471 0603 02       		.uleb128 0x2
 2472 0604 91       		.byte	0x91
 2473 0605 6C       		.sleb128 -20
 2474 0606 11       		.uleb128 0x11
 2475 0607 FA040000 		.4byte	.LASF52
 2476 060b 01       		.byte	0x1
 2477 060c 5B02     		.2byte	0x25b
 2478 060e 12030000 		.4byte	0x312
 2479 0612 02       		.uleb128 0x2
 2480 0613 91       		.byte	0x91
 2481 0614 68       		.sleb128 -24
 2482 0615 12       		.uleb128 0x12
 2483 0616 24030000 		.4byte	.LASF49
 2484 061a 01       		.byte	0x1
 2485 061b 5C02     		.2byte	0x25c
 2486 061d 68000000 		.4byte	0x68
 2487 0621 02       		.uleb128 0x2
 2488 0622 91       		.byte	0x91
 2489 0623 74       		.sleb128 -12
 2490 0624 12       		.uleb128 0x12
 2491 0625 96010000 		.4byte	.LASF50
 2492 0629 01       		.byte	0x1
 2493 062a 5D02     		.2byte	0x25d
 2494 062c 68000000 		.4byte	0x68
 2495 0630 02       		.uleb128 0x2
 2496 0631 91       		.byte	0x91
 2497 0632 70       		.sleb128 -16
 2498 0633 00       		.byte	0
 2499 0634 1B       		.uleb128 0x1b
 2500 0635 EA010000 		.4byte	.LASF86
 2501 0639 01       		.byte	0x1
 2502 063a BA02     		.2byte	0x2ba
 2503 063c 00000000 		.4byte	.LFB79
 2504 0640 14000000 		.4byte	.LFE79-.LFB79
 2505 0644 01       		.uleb128 0x1
 2506 0645 9C       		.byte	0x9c
 2507 0646 58060000 		.4byte	0x658
 2508 064a 14       		.uleb128 0x14
 2509 064b 7300     		.ascii	"s\000"
 2510 064d 01       		.byte	0x1
 2511 064e BA02     		.2byte	0x2ba
 2512 0650 7D000000 		.4byte	0x7d
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 58


 2513 0654 02       		.uleb128 0x2
 2514 0655 91       		.byte	0x91
 2515 0656 74       		.sleb128 -12
 2516 0657 00       		.byte	0
 2517 0658 1C       		.uleb128 0x1c
 2518 0659 63010000 		.4byte	.LASF87
 2519 065d 06       		.byte	0x6
 2520 065e 9606     		.2byte	0x696
 2521 0660 64060000 		.4byte	0x664
 2522 0664 1D       		.uleb128 0x1d
 2523 0665 8A000000 		.4byte	0x8a
 2524 0669 1E       		.uleb128 0x1e
 2525 066a 747300   		.ascii	"ts\000"
 2526 066d 05       		.byte	0x5
 2527 066e 10       		.byte	0x10
 2528 066f 95000000 		.4byte	0x95
 2529 0673 05       		.uleb128 0x5
 2530 0674 03       		.byte	0x3
 2531 0675 00000000 		.4byte	ts
 2532 0679 1F       		.uleb128 0x1f
 2533 067a 13000000 		.4byte	.LASF88
 2534 067e 05       		.byte	0x5
 2535 067f 11       		.byte	0x11
 2536 0680 A1000000 		.4byte	0xa1
 2537 0684 05       		.uleb128 0x5
 2538 0685 03       		.byte	0x3
 2539 0686 00000000 		.4byte	ts_enc
 2540 068a 1F       		.uleb128 0x1f
 2541 068b AB050000 		.4byte	.LASF89
 2542 068f 05       		.byte	0x5
 2543 0690 12       		.byte	0x12
 2544 0691 A1000000 		.4byte	0xa1
 2545 0695 05       		.uleb128 0x5
 2546 0696 03       		.byte	0x3
 2547 0697 00000000 		.4byte	ts_update
 2548 069b 1F       		.uleb128 0x1f
 2549 069c 3C050000 		.4byte	.LASF90
 2550 06a0 05       		.byte	0x5
 2551 06a1 13       		.byte	0x13
 2552 06a2 A1000000 		.4byte	0xa1
 2553 06a6 05       		.uleb128 0x5
 2554 06a7 03       		.byte	0x3
 2555 06a8 00000000 		.4byte	ts_speed
 2556 06ac 1F       		.uleb128 0x1f
 2557 06ad A0050000 		.4byte	.LASF91
 2558 06b1 05       		.byte	0x5
 2559 06b2 14       		.byte	0x14
 2560 06b3 A1000000 		.4byte	0xa1
 2561 06b7 05       		.uleb128 0x5
 2562 06b8 03       		.byte	0x3
 2563 06b9 00000000 		.4byte	ts_display
 2564 06bd 1F       		.uleb128 0x1f
 2565 06be 50050000 		.4byte	.LASF92
 2566 06c2 05       		.byte	0x5
 2567 06c3 16       		.byte	0x16
 2568 06c4 95000000 		.4byte	0x95
 2569 06c8 05       		.uleb128 0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 59


 2570 06c9 03       		.byte	0x3
 2571 06ca 00000000 		.4byte	flag_ts_enc
 2572 06ce 1F       		.uleb128 0x1f
 2573 06cf 0F020000 		.4byte	.LASF93
 2574 06d3 05       		.byte	0x5
 2575 06d4 17       		.byte	0x17
 2576 06d5 95000000 		.4byte	0x95
 2577 06d9 05       		.uleb128 0x5
 2578 06da 03       		.byte	0x3
 2579 06db 00000000 		.4byte	flag_ts_update
 2580 06df 1F       		.uleb128 0x1f
 2581 06e0 52000000 		.4byte	.LASF94
 2582 06e4 05       		.byte	0x5
 2583 06e5 18       		.byte	0x18
 2584 06e6 95000000 		.4byte	0x95
 2585 06ea 05       		.uleb128 0x5
 2586 06eb 03       		.byte	0x3
 2587 06ec 00000000 		.4byte	flag_ts_speed
 2588 06f0 1F       		.uleb128 0x1f
 2589 06f1 F7020000 		.4byte	.LASF95
 2590 06f5 05       		.byte	0x5
 2591 06f6 19       		.byte	0x19
 2592 06f7 95000000 		.4byte	0x95
 2593 06fb 05       		.uleb128 0x5
 2594 06fc 03       		.byte	0x3
 2595 06fd 00000000 		.4byte	flag_ts_display
 2596 0701 1F       		.uleb128 0x1f
 2597 0702 07030000 		.4byte	.LASF96
 2598 0706 05       		.byte	0x5
 2599 0707 1C       		.byte	0x1c
 2600 0708 95000000 		.4byte	0x95
 2601 070c 05       		.uleb128 0x5
 2602 070d 03       		.byte	0x3
 2603 070e 00000000 		.4byte	flag_rx
 2604 0712 1F       		.uleb128 0x1f
 2605 0713 22000000 		.4byte	.LASF97
 2606 0717 05       		.byte	0x5
 2607 0718 1D       		.byte	0x1d
 2608 0719 95000000 		.4byte	0x95
 2609 071d 05       		.uleb128 0x5
 2610 071e 03       		.byte	0x3
 2611 071f 00000000 		.4byte	flag_packet
 2612 0723 1F       		.uleb128 0x1f
 2613 0724 BA030000 		.4byte	.LASF98
 2614 0728 05       		.byte	0x5
 2615 0729 1E       		.byte	0x1e
 2616 072a 95000000 		.4byte	0x95
 2617 072e 05       		.uleb128 0x5
 2618 072f 03       		.byte	0x3
 2619 0730 00000000 		.4byte	flag_KB_string
 2620 0734 1F       		.uleb128 0x1f
 2621 0735 2D050000 		.4byte	.LASF99
 2622 0739 05       		.byte	0x5
 2623 073a 20       		.byte	0x20
 2624 073b 95000000 		.4byte	0x95
 2625 073f 05       		.uleb128 0x5
 2626 0740 03       		.byte	0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 60


 2627 0741 00000000 		.4byte	dataready_flag
 2628 0745 1F       		.uleb128 0x1f
 2629 0746 D3050000 		.4byte	.LASF100
 2630 074a 05       		.byte	0x5
 2631 074b 22       		.byte	0x22
 2632 074c 95000000 		.4byte	0x95
 2633 0750 05       		.uleb128 0x5
 2634 0751 03       		.byte	0x3
 2635 0752 00000000 		.4byte	flag_rf_transmission_active
 2636 0756 1F       		.uleb128 0x1f
 2637 0757 AD040000 		.4byte	.LASF101
 2638 075b 05       		.byte	0x5
 2639 075c 25       		.byte	0x25
 2640 075d 25050000 		.4byte	0x525
 2641 0761 05       		.uleb128 0x5
 2642 0762 03       		.byte	0x3
 2643 0763 00000000 		.4byte	displaystring
 2644 0767 1F       		.uleb128 0x1f
 2645 0768 F2020000 		.4byte	.LASF102
 2646 076c 05       		.byte	0x5
 2647 076d 26       		.byte	0x26
 2648 076e 25050000 		.4byte	0x525
 2649 0772 05       		.uleb128 0x5
 2650 0773 03       		.byte	0x3
 2651 0774 00000000 		.4byte	line
 2652 0778 1F       		.uleb128 0x1f
 2653 0779 9F030000 		.4byte	.LASF103
 2654 077d 05       		.byte	0x5
 2655 077e 26       		.byte	0x26
 2656 077f 25050000 		.4byte	0x525
 2657 0783 05       		.uleb128 0x5
 2658 0784 03       		.byte	0x3
 2659 0785 00000000 		.4byte	entry
 2660 0789 18       		.uleb128 0x18
 2661 078a 95000000 		.4byte	0x95
 2662 078e 99070000 		.4byte	0x799
 2663 0792 19       		.uleb128 0x19
 2664 0793 76000000 		.4byte	0x76
 2665 0797 3F       		.byte	0x3f
 2666 0798 00       		.byte	0
 2667 0799 1F       		.uleb128 0x1f
 2668 079a 9E000000 		.4byte	.LASF104
 2669 079e 05       		.byte	0x5
 2670 079f 27       		.byte	0x27
 2671 07a0 89070000 		.4byte	0x789
 2672 07a4 05       		.uleb128 0x5
 2673 07a5 03       		.byte	0x3
 2674 07a6 00000000 		.4byte	usbBuffer
 2675 07aa 1F       		.uleb128 0x1f
 2676 07ab 72000000 		.4byte	.LASF105
 2677 07af 05       		.byte	0x5
 2678 07b0 3C       		.byte	0x3c
 2679 07b1 DF000000 		.4byte	0xdf
 2680 07b5 05       		.uleb128 0x5
 2681 07b6 03       		.byte	0x3
 2682 07b7 00000000 		.4byte	system_state
 2683 07bb 18       		.uleb128 0x18
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 61


 2684 07bc AD000000 		.4byte	0xad
 2685 07c0 CB070000 		.4byte	0x7cb
 2686 07c4 19       		.uleb128 0x19
 2687 07c5 76000000 		.4byte	0x76
 2688 07c9 05       		.byte	0x5
 2689 07ca 00       		.byte	0
 2690 07cb 1F       		.uleb128 0x1f
 2691 07cc 0C060000 		.4byte	.LASF106
 2692 07d0 01       		.byte	0x1
 2693 07d1 67       		.byte	0x67
 2694 07d2 BB070000 		.4byte	0x7bb
 2695 07d6 05       		.uleb128 0x5
 2696 07d7 03       		.byte	0x3
 2697 07d8 00000000 		.4byte	sensor_readings
 2698 07dc 1F       		.uleb128 0x1f
 2699 07dd 30040000 		.4byte	.LASF107
 2700 07e1 01       		.byte	0x1
 2701 07e2 68       		.byte	0x68
 2702 07e3 ED070000 		.4byte	0x7ed
 2703 07e7 05       		.uleb128 0x5
 2704 07e8 03       		.byte	0x3
 2705 07e9 00000000 		.4byte	adc_flag
 2706 07ed 1D       		.uleb128 0x1d
 2707 07ee 68000000 		.4byte	0x68
 2708 07f2 18       		.uleb128 0x18
 2709 07f3 68000000 		.4byte	0x68
 2710 07f7 02080000 		.4byte	0x802
 2711 07fb 19       		.uleb128 0x19
 2712 07fc 76000000 		.4byte	0x76
 2713 0800 05       		.byte	0x5
 2714 0801 00       		.byte	0
 2715 0802 1F       		.uleb128 0x1f
 2716 0803 0F030000 		.4byte	.LASF108
 2717 0807 01       		.byte	0x1
 2718 0808 69       		.byte	0x69
 2719 0809 F2070000 		.4byte	0x7f2
 2720 080d 05       		.uleb128 0x5
 2721 080e 03       		.byte	0x3
 2722 080f 00000000 		.4byte	adc_readings
 2723 0813 1F       		.uleb128 0x1f
 2724 0814 80040000 		.4byte	.LASF109
 2725 0818 01       		.byte	0x1
 2726 0819 6A       		.byte	0x6a
 2727 081a 68000000 		.4byte	0x68
 2728 081e 05       		.uleb128 0x5
 2729 081f 03       		.byte	0x3
 2730 0820 00000000 		.4byte	sample_count
 2731 0824 1F       		.uleb128 0x1f
 2732 0825 66050000 		.4byte	.LASF110
 2733 0829 01       		.byte	0x1
 2734 082a 6C       		.byte	0x6c
 2735 082b ED070000 		.4byte	0x7ed
 2736 082f 05       		.uleb128 0x5
 2737 0830 03       		.byte	0x3
 2738 0831 00000000 		.4byte	countM1
 2739 0835 1F       		.uleb128 0x1f
 2740 0836 6E050000 		.4byte	.LASF111
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 62


 2741 083a 01       		.byte	0x1
 2742 083b 6D       		.byte	0x6d
 2743 083c ED070000 		.4byte	0x7ed
 2744 0840 05       		.uleb128 0x5
 2745 0841 03       		.byte	0x3
 2746 0842 00000000 		.4byte	countM2
 2747 0846 1F       		.uleb128 0x1f
 2748 0847 C0010000 		.4byte	.LASF112
 2749 084b 01       		.byte	0x1
 2750 084c 6E       		.byte	0x6e
 2751 084d ED070000 		.4byte	0x7ed
 2752 0851 05       		.uleb128 0x5
 2753 0852 03       		.byte	0x3
 2754 0853 00000000 		.4byte	timer_flag
 2755 0857 00       		.byte	0
 2756              		.section	.debug_abbrev,"",%progbits
 2757              	.Ldebug_abbrev0:
 2758 0000 01       		.uleb128 0x1
 2759 0001 11       		.uleb128 0x11
 2760 0002 01       		.byte	0x1
 2761 0003 25       		.uleb128 0x25
 2762 0004 0E       		.uleb128 0xe
 2763 0005 13       		.uleb128 0x13
 2764 0006 0B       		.uleb128 0xb
 2765 0007 03       		.uleb128 0x3
 2766 0008 0E       		.uleb128 0xe
 2767 0009 1B       		.uleb128 0x1b
 2768 000a 0E       		.uleb128 0xe
 2769 000b 55       		.uleb128 0x55
 2770 000c 17       		.uleb128 0x17
 2771 000d 11       		.uleb128 0x11
 2772 000e 01       		.uleb128 0x1
 2773 000f 10       		.uleb128 0x10
 2774 0010 17       		.uleb128 0x17
 2775 0011 00       		.byte	0
 2776 0012 00       		.byte	0
 2777 0013 02       		.uleb128 0x2
 2778 0014 24       		.uleb128 0x24
 2779 0015 00       		.byte	0
 2780 0016 0B       		.uleb128 0xb
 2781 0017 0B       		.uleb128 0xb
 2782 0018 3E       		.uleb128 0x3e
 2783 0019 0B       		.uleb128 0xb
 2784 001a 03       		.uleb128 0x3
 2785 001b 0E       		.uleb128 0xe
 2786 001c 00       		.byte	0
 2787 001d 00       		.byte	0
 2788 001e 03       		.uleb128 0x3
 2789 001f 16       		.uleb128 0x16
 2790 0020 00       		.byte	0
 2791 0021 03       		.uleb128 0x3
 2792 0022 0E       		.uleb128 0xe
 2793 0023 3A       		.uleb128 0x3a
 2794 0024 0B       		.uleb128 0xb
 2795 0025 3B       		.uleb128 0x3b
 2796 0026 0B       		.uleb128 0xb
 2797 0027 49       		.uleb128 0x49
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 63


 2798 0028 13       		.uleb128 0x13
 2799 0029 00       		.byte	0
 2800 002a 00       		.byte	0
 2801 002b 04       		.uleb128 0x4
 2802 002c 24       		.uleb128 0x24
 2803 002d 00       		.byte	0
 2804 002e 0B       		.uleb128 0xb
 2805 002f 0B       		.uleb128 0xb
 2806 0030 3E       		.uleb128 0x3e
 2807 0031 0B       		.uleb128 0xb
 2808 0032 03       		.uleb128 0x3
 2809 0033 08       		.uleb128 0x8
 2810 0034 00       		.byte	0
 2811 0035 00       		.byte	0
 2812 0036 05       		.uleb128 0x5
 2813 0037 0F       		.uleb128 0xf
 2814 0038 00       		.byte	0
 2815 0039 0B       		.uleb128 0xb
 2816 003a 0B       		.uleb128 0xb
 2817 003b 49       		.uleb128 0x49
 2818 003c 13       		.uleb128 0x13
 2819 003d 00       		.byte	0
 2820 003e 00       		.byte	0
 2821 003f 06       		.uleb128 0x6
 2822 0040 16       		.uleb128 0x16
 2823 0041 00       		.byte	0
 2824 0042 03       		.uleb128 0x3
 2825 0043 0E       		.uleb128 0xe
 2826 0044 3A       		.uleb128 0x3a
 2827 0045 0B       		.uleb128 0xb
 2828 0046 3B       		.uleb128 0x3b
 2829 0047 05       		.uleb128 0x5
 2830 0048 49       		.uleb128 0x49
 2831 0049 13       		.uleb128 0x13
 2832 004a 00       		.byte	0
 2833 004b 00       		.byte	0
 2834 004c 07       		.uleb128 0x7
 2835 004d 13       		.uleb128 0x13
 2836 004e 01       		.byte	0x1
 2837 004f 03       		.uleb128 0x3
 2838 0050 0E       		.uleb128 0xe
 2839 0051 0B       		.uleb128 0xb
 2840 0052 0B       		.uleb128 0xb
 2841 0053 3A       		.uleb128 0x3a
 2842 0054 0B       		.uleb128 0xb
 2843 0055 3B       		.uleb128 0x3b
 2844 0056 0B       		.uleb128 0xb
 2845 0057 01       		.uleb128 0x1
 2846 0058 13       		.uleb128 0x13
 2847 0059 00       		.byte	0
 2848 005a 00       		.byte	0
 2849 005b 08       		.uleb128 0x8
 2850 005c 0D       		.uleb128 0xd
 2851 005d 00       		.byte	0
 2852 005e 03       		.uleb128 0x3
 2853 005f 0E       		.uleb128 0xe
 2854 0060 3A       		.uleb128 0x3a
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 64


 2855 0061 0B       		.uleb128 0xb
 2856 0062 3B       		.uleb128 0x3b
 2857 0063 0B       		.uleb128 0xb
 2858 0064 49       		.uleb128 0x49
 2859 0065 13       		.uleb128 0x13
 2860 0066 38       		.uleb128 0x38
 2861 0067 0B       		.uleb128 0xb
 2862 0068 00       		.byte	0
 2863 0069 00       		.byte	0
 2864 006a 09       		.uleb128 0x9
 2865 006b 04       		.uleb128 0x4
 2866 006c 01       		.byte	0x1
 2867 006d 03       		.uleb128 0x3
 2868 006e 0E       		.uleb128 0xe
 2869 006f 0B       		.uleb128 0xb
 2870 0070 0B       		.uleb128 0xb
 2871 0071 3A       		.uleb128 0x3a
 2872 0072 0B       		.uleb128 0xb
 2873 0073 3B       		.uleb128 0x3b
 2874 0074 0B       		.uleb128 0xb
 2875 0075 01       		.uleb128 0x1
 2876 0076 13       		.uleb128 0x13
 2877 0077 00       		.byte	0
 2878 0078 00       		.byte	0
 2879 0079 0A       		.uleb128 0xa
 2880 007a 28       		.uleb128 0x28
 2881 007b 00       		.byte	0
 2882 007c 03       		.uleb128 0x3
 2883 007d 0E       		.uleb128 0xe
 2884 007e 1C       		.uleb128 0x1c
 2885 007f 0D       		.uleb128 0xd
 2886 0080 00       		.byte	0
 2887 0081 00       		.byte	0
 2888 0082 0B       		.uleb128 0xb
 2889 0083 2E       		.uleb128 0x2e
 2890 0084 00       		.byte	0
 2891 0085 3F       		.uleb128 0x3f
 2892 0086 19       		.uleb128 0x19
 2893 0087 03       		.uleb128 0x3
 2894 0088 0E       		.uleb128 0xe
 2895 0089 3A       		.uleb128 0x3a
 2896 008a 0B       		.uleb128 0xb
 2897 008b 3B       		.uleb128 0x3b
 2898 008c 0B       		.uleb128 0xb
 2899 008d 27       		.uleb128 0x27
 2900 008e 19       		.uleb128 0x19
 2901 008f 11       		.uleb128 0x11
 2902 0090 01       		.uleb128 0x1
 2903 0091 12       		.uleb128 0x12
 2904 0092 06       		.uleb128 0x6
 2905 0093 40       		.uleb128 0x40
 2906 0094 18       		.uleb128 0x18
 2907 0095 9642     		.uleb128 0x2116
 2908 0097 19       		.uleb128 0x19
 2909 0098 00       		.byte	0
 2910 0099 00       		.byte	0
 2911 009a 0C       		.uleb128 0xc
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 65


 2912 009b 2E       		.uleb128 0x2e
 2913 009c 00       		.byte	0
 2914 009d 3F       		.uleb128 0x3f
 2915 009e 19       		.uleb128 0x19
 2916 009f 03       		.uleb128 0x3
 2917 00a0 0E       		.uleb128 0xe
 2918 00a1 3A       		.uleb128 0x3a
 2919 00a2 0B       		.uleb128 0xb
 2920 00a3 3B       		.uleb128 0x3b
 2921 00a4 0B       		.uleb128 0xb
 2922 00a5 27       		.uleb128 0x27
 2923 00a6 19       		.uleb128 0x19
 2924 00a7 11       		.uleb128 0x11
 2925 00a8 01       		.uleb128 0x1
 2926 00a9 12       		.uleb128 0x12
 2927 00aa 06       		.uleb128 0x6
 2928 00ab 40       		.uleb128 0x40
 2929 00ac 18       		.uleb128 0x18
 2930 00ad 9742     		.uleb128 0x2117
 2931 00af 19       		.uleb128 0x19
 2932 00b0 00       		.byte	0
 2933 00b1 00       		.byte	0
 2934 00b2 0D       		.uleb128 0xd
 2935 00b3 2E       		.uleb128 0x2e
 2936 00b4 01       		.byte	0x1
 2937 00b5 3F       		.uleb128 0x3f
 2938 00b6 19       		.uleb128 0x19
 2939 00b7 03       		.uleb128 0x3
 2940 00b8 0E       		.uleb128 0xe
 2941 00b9 3A       		.uleb128 0x3a
 2942 00ba 0B       		.uleb128 0xb
 2943 00bb 3B       		.uleb128 0x3b
 2944 00bc 0B       		.uleb128 0xb
 2945 00bd 49       		.uleb128 0x49
 2946 00be 13       		.uleb128 0x13
 2947 00bf 11       		.uleb128 0x11
 2948 00c0 01       		.uleb128 0x1
 2949 00c1 12       		.uleb128 0x12
 2950 00c2 06       		.uleb128 0x6
 2951 00c3 40       		.uleb128 0x40
 2952 00c4 18       		.uleb128 0x18
 2953 00c5 9642     		.uleb128 0x2116
 2954 00c7 19       		.uleb128 0x19
 2955 00c8 01       		.uleb128 0x1
 2956 00c9 13       		.uleb128 0x13
 2957 00ca 00       		.byte	0
 2958 00cb 00       		.byte	0
 2959 00cc 0E       		.uleb128 0xe
 2960 00cd 34       		.uleb128 0x34
 2961 00ce 00       		.byte	0
 2962 00cf 03       		.uleb128 0x3
 2963 00d0 0E       		.uleb128 0xe
 2964 00d1 3A       		.uleb128 0x3a
 2965 00d2 0B       		.uleb128 0xb
 2966 00d3 3B       		.uleb128 0x3b
 2967 00d4 0B       		.uleb128 0xb
 2968 00d5 49       		.uleb128 0x49
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 66


 2969 00d6 13       		.uleb128 0x13
 2970 00d7 02       		.uleb128 0x2
 2971 00d8 18       		.uleb128 0x18
 2972 00d9 00       		.byte	0
 2973 00da 00       		.byte	0
 2974 00db 0F       		.uleb128 0xf
 2975 00dc 34       		.uleb128 0x34
 2976 00dd 00       		.byte	0
 2977 00de 03       		.uleb128 0x3
 2978 00df 0E       		.uleb128 0xe
 2979 00e0 3A       		.uleb128 0x3a
 2980 00e1 0B       		.uleb128 0xb
 2981 00e2 3B       		.uleb128 0x3b
 2982 00e3 0B       		.uleb128 0xb
 2983 00e4 49       		.uleb128 0x49
 2984 00e5 13       		.uleb128 0x13
 2985 00e6 00       		.byte	0
 2986 00e7 00       		.byte	0
 2987 00e8 10       		.uleb128 0x10
 2988 00e9 2E       		.uleb128 0x2e
 2989 00ea 01       		.byte	0x1
 2990 00eb 3F       		.uleb128 0x3f
 2991 00ec 19       		.uleb128 0x19
 2992 00ed 03       		.uleb128 0x3
 2993 00ee 0E       		.uleb128 0xe
 2994 00ef 3A       		.uleb128 0x3a
 2995 00f0 0B       		.uleb128 0xb
 2996 00f1 3B       		.uleb128 0x3b
 2997 00f2 05       		.uleb128 0x5
 2998 00f3 27       		.uleb128 0x27
 2999 00f4 19       		.uleb128 0x19
 3000 00f5 11       		.uleb128 0x11
 3001 00f6 01       		.uleb128 0x1
 3002 00f7 12       		.uleb128 0x12
 3003 00f8 06       		.uleb128 0x6
 3004 00f9 40       		.uleb128 0x40
 3005 00fa 18       		.uleb128 0x18
 3006 00fb 9642     		.uleb128 0x2116
 3007 00fd 19       		.uleb128 0x19
 3008 00fe 01       		.uleb128 0x1
 3009 00ff 13       		.uleb128 0x13
 3010 0100 00       		.byte	0
 3011 0101 00       		.byte	0
 3012 0102 11       		.uleb128 0x11
 3013 0103 05       		.uleb128 0x5
 3014 0104 00       		.byte	0
 3015 0105 03       		.uleb128 0x3
 3016 0106 0E       		.uleb128 0xe
 3017 0107 3A       		.uleb128 0x3a
 3018 0108 0B       		.uleb128 0xb
 3019 0109 3B       		.uleb128 0x3b
 3020 010a 05       		.uleb128 0x5
 3021 010b 49       		.uleb128 0x49
 3022 010c 13       		.uleb128 0x13
 3023 010d 02       		.uleb128 0x2
 3024 010e 18       		.uleb128 0x18
 3025 010f 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 67


 3026 0110 00       		.byte	0
 3027 0111 12       		.uleb128 0x12
 3028 0112 34       		.uleb128 0x34
 3029 0113 00       		.byte	0
 3030 0114 03       		.uleb128 0x3
 3031 0115 0E       		.uleb128 0xe
 3032 0116 3A       		.uleb128 0x3a
 3033 0117 0B       		.uleb128 0xb
 3034 0118 3B       		.uleb128 0x3b
 3035 0119 05       		.uleb128 0x5
 3036 011a 49       		.uleb128 0x49
 3037 011b 13       		.uleb128 0x13
 3038 011c 02       		.uleb128 0x2
 3039 011d 18       		.uleb128 0x18
 3040 011e 00       		.byte	0
 3041 011f 00       		.byte	0
 3042 0120 13       		.uleb128 0x13
 3043 0121 2E       		.uleb128 0x2e
 3044 0122 01       		.byte	0x1
 3045 0123 3F       		.uleb128 0x3f
 3046 0124 19       		.uleb128 0x19
 3047 0125 03       		.uleb128 0x3
 3048 0126 0E       		.uleb128 0xe
 3049 0127 3A       		.uleb128 0x3a
 3050 0128 0B       		.uleb128 0xb
 3051 0129 3B       		.uleb128 0x3b
 3052 012a 05       		.uleb128 0x5
 3053 012b 27       		.uleb128 0x27
 3054 012c 19       		.uleb128 0x19
 3055 012d 49       		.uleb128 0x49
 3056 012e 13       		.uleb128 0x13
 3057 012f 11       		.uleb128 0x11
 3058 0130 01       		.uleb128 0x1
 3059 0131 12       		.uleb128 0x12
 3060 0132 06       		.uleb128 0x6
 3061 0133 40       		.uleb128 0x40
 3062 0134 18       		.uleb128 0x18
 3063 0135 9642     		.uleb128 0x2116
 3064 0137 19       		.uleb128 0x19
 3065 0138 01       		.uleb128 0x1
 3066 0139 13       		.uleb128 0x13
 3067 013a 00       		.byte	0
 3068 013b 00       		.byte	0
 3069 013c 14       		.uleb128 0x14
 3070 013d 05       		.uleb128 0x5
 3071 013e 00       		.byte	0
 3072 013f 03       		.uleb128 0x3
 3073 0140 08       		.uleb128 0x8
 3074 0141 3A       		.uleb128 0x3a
 3075 0142 0B       		.uleb128 0xb
 3076 0143 3B       		.uleb128 0x3b
 3077 0144 05       		.uleb128 0x5
 3078 0145 49       		.uleb128 0x49
 3079 0146 13       		.uleb128 0x13
 3080 0147 02       		.uleb128 0x2
 3081 0148 18       		.uleb128 0x18
 3082 0149 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 68


 3083 014a 00       		.byte	0
 3084 014b 15       		.uleb128 0x15
 3085 014c 2E       		.uleb128 0x2e
 3086 014d 01       		.byte	0x1
 3087 014e 3F       		.uleb128 0x3f
 3088 014f 19       		.uleb128 0x19
 3089 0150 03       		.uleb128 0x3
 3090 0151 0E       		.uleb128 0xe
 3091 0152 3A       		.uleb128 0x3a
 3092 0153 0B       		.uleb128 0xb
 3093 0154 3B       		.uleb128 0x3b
 3094 0155 05       		.uleb128 0x5
 3095 0156 11       		.uleb128 0x11
 3096 0157 01       		.uleb128 0x1
 3097 0158 12       		.uleb128 0x12
 3098 0159 06       		.uleb128 0x6
 3099 015a 40       		.uleb128 0x40
 3100 015b 18       		.uleb128 0x18
 3101 015c 9642     		.uleb128 0x2116
 3102 015e 19       		.uleb128 0x19
 3103 015f 01       		.uleb128 0x1
 3104 0160 13       		.uleb128 0x13
 3105 0161 00       		.byte	0
 3106 0162 00       		.byte	0
 3107 0163 16       		.uleb128 0x16
 3108 0164 34       		.uleb128 0x34
 3109 0165 00       		.byte	0
 3110 0166 03       		.uleb128 0x3
 3111 0167 08       		.uleb128 0x8
 3112 0168 3A       		.uleb128 0x3a
 3113 0169 0B       		.uleb128 0xb
 3114 016a 3B       		.uleb128 0x3b
 3115 016b 05       		.uleb128 0x5
 3116 016c 49       		.uleb128 0x49
 3117 016d 13       		.uleb128 0x13
 3118 016e 02       		.uleb128 0x2
 3119 016f 18       		.uleb128 0x18
 3120 0170 00       		.byte	0
 3121 0171 00       		.byte	0
 3122 0172 17       		.uleb128 0x17
 3123 0173 0B       		.uleb128 0xb
 3124 0174 01       		.byte	0x1
 3125 0175 11       		.uleb128 0x11
 3126 0176 01       		.uleb128 0x1
 3127 0177 12       		.uleb128 0x12
 3128 0178 06       		.uleb128 0x6
 3129 0179 00       		.byte	0
 3130 017a 00       		.byte	0
 3131 017b 18       		.uleb128 0x18
 3132 017c 01       		.uleb128 0x1
 3133 017d 01       		.byte	0x1
 3134 017e 49       		.uleb128 0x49
 3135 017f 13       		.uleb128 0x13
 3136 0180 01       		.uleb128 0x1
 3137 0181 13       		.uleb128 0x13
 3138 0182 00       		.byte	0
 3139 0183 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 69


 3140 0184 19       		.uleb128 0x19
 3141 0185 21       		.uleb128 0x21
 3142 0186 00       		.byte	0
 3143 0187 49       		.uleb128 0x49
 3144 0188 13       		.uleb128 0x13
 3145 0189 2F       		.uleb128 0x2f
 3146 018a 0B       		.uleb128 0xb
 3147 018b 00       		.byte	0
 3148 018c 00       		.byte	0
 3149 018d 1A       		.uleb128 0x1a
 3150 018e 2E       		.uleb128 0x2e
 3151 018f 00       		.byte	0
 3152 0190 3F       		.uleb128 0x3f
 3153 0191 19       		.uleb128 0x19
 3154 0192 03       		.uleb128 0x3
 3155 0193 0E       		.uleb128 0xe
 3156 0194 3A       		.uleb128 0x3a
 3157 0195 0B       		.uleb128 0xb
 3158 0196 3B       		.uleb128 0x3b
 3159 0197 05       		.uleb128 0x5
 3160 0198 11       		.uleb128 0x11
 3161 0199 01       		.uleb128 0x1
 3162 019a 12       		.uleb128 0x12
 3163 019b 06       		.uleb128 0x6
 3164 019c 40       		.uleb128 0x40
 3165 019d 18       		.uleb128 0x18
 3166 019e 9642     		.uleb128 0x2116
 3167 01a0 19       		.uleb128 0x19
 3168 01a1 00       		.byte	0
 3169 01a2 00       		.byte	0
 3170 01a3 1B       		.uleb128 0x1b
 3171 01a4 2E       		.uleb128 0x2e
 3172 01a5 01       		.byte	0x1
 3173 01a6 3F       		.uleb128 0x3f
 3174 01a7 19       		.uleb128 0x19
 3175 01a8 03       		.uleb128 0x3
 3176 01a9 0E       		.uleb128 0xe
 3177 01aa 3A       		.uleb128 0x3a
 3178 01ab 0B       		.uleb128 0xb
 3179 01ac 3B       		.uleb128 0x3b
 3180 01ad 05       		.uleb128 0x5
 3181 01ae 27       		.uleb128 0x27
 3182 01af 19       		.uleb128 0x19
 3183 01b0 11       		.uleb128 0x11
 3184 01b1 01       		.uleb128 0x1
 3185 01b2 12       		.uleb128 0x12
 3186 01b3 06       		.uleb128 0x6
 3187 01b4 40       		.uleb128 0x40
 3188 01b5 18       		.uleb128 0x18
 3189 01b6 9742     		.uleb128 0x2117
 3190 01b8 19       		.uleb128 0x19
 3191 01b9 01       		.uleb128 0x1
 3192 01ba 13       		.uleb128 0x13
 3193 01bb 00       		.byte	0
 3194 01bc 00       		.byte	0
 3195 01bd 1C       		.uleb128 0x1c
 3196 01be 34       		.uleb128 0x34
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 70


 3197 01bf 00       		.byte	0
 3198 01c0 03       		.uleb128 0x3
 3199 01c1 0E       		.uleb128 0xe
 3200 01c2 3A       		.uleb128 0x3a
 3201 01c3 0B       		.uleb128 0xb
 3202 01c4 3B       		.uleb128 0x3b
 3203 01c5 05       		.uleb128 0x5
 3204 01c6 49       		.uleb128 0x49
 3205 01c7 13       		.uleb128 0x13
 3206 01c8 3F       		.uleb128 0x3f
 3207 01c9 19       		.uleb128 0x19
 3208 01ca 3C       		.uleb128 0x3c
 3209 01cb 19       		.uleb128 0x19
 3210 01cc 00       		.byte	0
 3211 01cd 00       		.byte	0
 3212 01ce 1D       		.uleb128 0x1d
 3213 01cf 35       		.uleb128 0x35
 3214 01d0 00       		.byte	0
 3215 01d1 49       		.uleb128 0x49
 3216 01d2 13       		.uleb128 0x13
 3217 01d3 00       		.byte	0
 3218 01d4 00       		.byte	0
 3219 01d5 1E       		.uleb128 0x1e
 3220 01d6 34       		.uleb128 0x34
 3221 01d7 00       		.byte	0
 3222 01d8 03       		.uleb128 0x3
 3223 01d9 08       		.uleb128 0x8
 3224 01da 3A       		.uleb128 0x3a
 3225 01db 0B       		.uleb128 0xb
 3226 01dc 3B       		.uleb128 0x3b
 3227 01dd 0B       		.uleb128 0xb
 3228 01de 49       		.uleb128 0x49
 3229 01df 13       		.uleb128 0x13
 3230 01e0 3F       		.uleb128 0x3f
 3231 01e1 19       		.uleb128 0x19
 3232 01e2 02       		.uleb128 0x2
 3233 01e3 18       		.uleb128 0x18
 3234 01e4 00       		.byte	0
 3235 01e5 00       		.byte	0
 3236 01e6 1F       		.uleb128 0x1f
 3237 01e7 34       		.uleb128 0x34
 3238 01e8 00       		.byte	0
 3239 01e9 03       		.uleb128 0x3
 3240 01ea 0E       		.uleb128 0xe
 3241 01eb 3A       		.uleb128 0x3a
 3242 01ec 0B       		.uleb128 0xb
 3243 01ed 3B       		.uleb128 0x3b
 3244 01ee 0B       		.uleb128 0xb
 3245 01ef 49       		.uleb128 0x49
 3246 01f0 13       		.uleb128 0x13
 3247 01f1 3F       		.uleb128 0x3f
 3248 01f2 19       		.uleb128 0x19
 3249 01f3 02       		.uleb128 0x2
 3250 01f4 18       		.uleb128 0x18
 3251 01f5 00       		.byte	0
 3252 01f6 00       		.byte	0
 3253 01f7 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 71


 3254              		.section	.debug_aranges,"",%progbits
 3255 0000 9C000000 		.4byte	0x9c
 3256 0004 0200     		.2byte	0x2
 3257 0006 00000000 		.4byte	.Ldebug_info0
 3258 000a 04       		.byte	0x4
 3259 000b 00       		.byte	0
 3260 000c 0000     		.2byte	0
 3261 000e 0000     		.2byte	0
 3262 0010 00000000 		.4byte	.LFB63
 3263 0014 30000000 		.4byte	.LFE63-.LFB63
 3264 0018 00000000 		.4byte	.LFB64
 3265 001c 18000000 		.4byte	.LFE64-.LFB64
 3266 0020 00000000 		.4byte	.LFB65
 3267 0024 90000000 		.4byte	.LFE65-.LFB65
 3268 0028 00000000 		.4byte	.LFB66
 3269 002c 78010000 		.4byte	.LFE66-.LFB66
 3270 0030 00000000 		.4byte	.LFB67
 3271 0034 CC000000 		.4byte	.LFE67-.LFB67
 3272 0038 00000000 		.4byte	.LFB68
 3273 003c 8C000000 		.4byte	.LFE68-.LFB68
 3274 0040 00000000 		.4byte	.LFB69
 3275 0044 24000000 		.4byte	.LFE69-.LFB69
 3276 0048 00000000 		.4byte	.LFB70
 3277 004c B4000000 		.4byte	.LFE70-.LFB70
 3278 0050 00000000 		.4byte	.LFB71
 3279 0054 2A000000 		.4byte	.LFE71-.LFB71
 3280 0058 00000000 		.4byte	.LFB72
 3281 005c 2A000000 		.4byte	.LFE72-.LFB72
 3282 0060 00000000 		.4byte	.LFB73
 3283 0064 52000000 		.4byte	.LFE73-.LFB73
 3284 0068 00000000 		.4byte	.LFB74
 3285 006c 2C000000 		.4byte	.LFE74-.LFB74
 3286 0070 00000000 		.4byte	.LFB75
 3287 0074 40000000 		.4byte	.LFE75-.LFB75
 3288 0078 00000000 		.4byte	.LFB76
 3289 007c 40000000 		.4byte	.LFE76-.LFB76
 3290 0080 00000000 		.4byte	.LFB77
 3291 0084 14010000 		.4byte	.LFE77-.LFB77
 3292 0088 00000000 		.4byte	.LFB78
 3293 008c 14010000 		.4byte	.LFE78-.LFB78
 3294 0090 00000000 		.4byte	.LFB79
 3295 0094 14000000 		.4byte	.LFE79-.LFB79
 3296 0098 00000000 		.4byte	0
 3297 009c 00000000 		.4byte	0
 3298              		.section	.debug_ranges,"",%progbits
 3299              	.Ldebug_ranges0:
 3300 0000 00000000 		.4byte	.LFB63
 3301 0004 30000000 		.4byte	.LFE63
 3302 0008 00000000 		.4byte	.LFB64
 3303 000c 18000000 		.4byte	.LFE64
 3304 0010 00000000 		.4byte	.LFB65
 3305 0014 90000000 		.4byte	.LFE65
 3306 0018 00000000 		.4byte	.LFB66
 3307 001c 78010000 		.4byte	.LFE66
 3308 0020 00000000 		.4byte	.LFB67
 3309 0024 CC000000 		.4byte	.LFE67
 3310 0028 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 72


 3311 002c 8C000000 		.4byte	.LFE68
 3312 0030 00000000 		.4byte	.LFB69
 3313 0034 24000000 		.4byte	.LFE69
 3314 0038 00000000 		.4byte	.LFB70
 3315 003c B4000000 		.4byte	.LFE70
 3316 0040 00000000 		.4byte	.LFB71
 3317 0044 2A000000 		.4byte	.LFE71
 3318 0048 00000000 		.4byte	.LFB72
 3319 004c 2A000000 		.4byte	.LFE72
 3320 0050 00000000 		.4byte	.LFB73
 3321 0054 52000000 		.4byte	.LFE73
 3322 0058 00000000 		.4byte	.LFB74
 3323 005c 2C000000 		.4byte	.LFE74
 3324 0060 00000000 		.4byte	.LFB75
 3325 0064 40000000 		.4byte	.LFE75
 3326 0068 00000000 		.4byte	.LFB76
 3327 006c 40000000 		.4byte	.LFE76
 3328 0070 00000000 		.4byte	.LFB77
 3329 0074 14010000 		.4byte	.LFE77
 3330 0078 00000000 		.4byte	.LFB78
 3331 007c 14010000 		.4byte	.LFE78
 3332 0080 00000000 		.4byte	.LFB79
 3333 0084 14000000 		.4byte	.LFE79
 3334 0088 00000000 		.4byte	0
 3335 008c 00000000 		.4byte	0
 3336              		.section	.debug_line,"",%progbits
 3337              	.Ldebug_line0:
 3338 0000 9D030000 		.section	.debug_str,"MS",%progbits,1
 3338      02005501 
 3338      00000201 
 3338      FB0E0D00 
 3338      01010101 
 3339              	.LASF78:
 3340 0000 636F7272 		.ascii	"correction\000"
 3340      65637469 
 3340      6F6E00
 3341              	.LASF48:
 3342 000b 4144435F 		.ascii	"ADC_ISR\000"
 3342      49535200 
 3343              	.LASF88:
 3344 0013 74735F65 		.ascii	"ts_enc\000"
 3344      6E6300
 3345              	.LASF60:
 3346 001a 6D325F64 		.ascii	"m2_dist\000"
 3346      69737400 
 3347              	.LASF97:
 3348 0022 666C6167 		.ascii	"flag_packet\000"
 3348      5F706163 
 3348      6B657400 
 3349              	.LASF40:
 3350 002e 4D454449 		.ascii	"MEDIUM_RIGHT\000"
 3350      554D5F52 
 3350      49474854 
 3350      00
 3351              	.LASF114:
 3352 003b 2E5C6D61 		.ascii	".\\main.c\000"
 3352      696E2E63 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 73


 3352      00
 3353              	.LASF37:
 3354 0044 434F5252 		.ascii	"CORRECT\000"
 3354      45435400 
 3355              	.LASF117:
 3356 004c 73746174 		.ascii	"state\000"
 3356      6500
 3357              	.LASF94:
 3358 0052 666C6167 		.ascii	"flag_ts_speed\000"
 3358      5F74735F 
 3358      73706565 
 3358      6400
 3359              	.LASF33:
 3360 0060 67325F78 		.ascii	"g2_xpos\000"
 3360      706F7300 
 3361              	.LASF2:
 3362 0068 73686F72 		.ascii	"short int\000"
 3362      7420696E 
 3362      7400
 3363              	.LASF105:
 3364 0072 73797374 		.ascii	"system_state\000"
 3364      656D5F73 
 3364      74617465 
 3364      00
 3365              	.LASF9:
 3366 007f 73697A65 		.ascii	"sizetype\000"
 3366      74797065 
 3366      00
 3367              	.LASF71:
 3368 0088 6368616E 		.ascii	"changeRightWheelSpeed\000"
 3368      67655269 
 3368      67687457 
 3368      6865656C 
 3368      53706565 
 3369              	.LASF104:
 3370 009e 75736242 		.ascii	"usbBuffer\000"
 3370      75666665 
 3370      7200
 3371              	.LASF38:
 3372 00a8 534C4947 		.ascii	"SLIGHTLY_RIGHT\000"
 3372      48544C59 
 3372      5F524947 
 3372      485400
 3373              	.LASF55:
 3374 00b7 6D61696E 		.ascii	"main\000"
 3374      00
 3375              	.LASF76:
 3376 00bc 69734C65 		.ascii	"isLeftWheel\000"
 3376      66745768 
 3376      65656C00 
 3377              	.LASF115:
 3378 00c8 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Desktop\\Flik\\CS"
 3378      6C65732E 
 3378      6175636B 
 3378      6C616E64 
 3378      2E61632E 
 3379 00f5 3330315F 		.ascii	"301_Class.cyprj.Archive01-20190825T234813Z-001\\CS3"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 74


 3379      436C6173 
 3379      732E6379 
 3379      70726A2E 
 3379      41726368 
 3380 0127 30315F43 		.ascii	"01_Class.cyprj.Archive01\\CS301_Class.cydsn\000"
 3380      6C617373 
 3380      2E637970 
 3380      726A2E41 
 3380      72636869 
 3381              	.LASF63:
 3382 0152 64697374 		.ascii	"distance_to_turn\000"
 3382      616E6365 
 3382      5F746F5F 
 3382      7475726E 
 3382      00
 3383              	.LASF87:
 3384 0163 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3384      52784275 
 3384      66666572 
 3384      00
 3385              	.LASF14:
 3386 0170 75696E74 		.ascii	"uint16\000"
 3386      313600
 3387              	.LASF21:
 3388 0177 696E6465 		.ascii	"index\000"
 3388      7800
 3389              	.LASF16:
 3390 017d 696E7431 		.ascii	"int16\000"
 3390      3600
 3391              	.LASF13:
 3392 0183 75696E74 		.ascii	"uint8\000"
 3392      3800
 3393              	.LASF32:
 3394 0189 67315F64 		.ascii	"g1_direction\000"
 3394      69726563 
 3394      74696F6E 
 3394      00
 3395              	.LASF50:
 3396 0196 70726576 		.ascii	"prevCountM2\000"
 3396      436F756E 
 3396      744D3200 
 3397              	.LASF72:
 3398 01a2 636F7272 		.ascii	"correctSpeed\000"
 3398      65637453 
 3398      70656564 
 3398      00
 3399              	.LASF66:
 3400 01af 67657456 		.ascii	"getValForChannel\000"
 3400      616C466F 
 3400      72436861 
 3400      6E6E656C 
 3400      00
 3401              	.LASF112:
 3402 01c0 74696D65 		.ascii	"timer_flag\000"
 3402      725F666C 
 3402      616700
 3403              	.LASF56:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 75


 3404 01cb 676F5374 		.ascii	"goStraight\000"
 3404      72616967 
 3404      687400
 3405              	.LASF18:
 3406 01d6 666C6F61 		.ascii	"float\000"
 3406      7400
 3407              	.LASF6:
 3408 01dc 6C6F6E67 		.ascii	"long long int\000"
 3408      206C6F6E 
 3408      6720696E 
 3408      7400
 3409              	.LASF86:
 3410 01ea 75736250 		.ascii	"usbPutString\000"
 3410      75745374 
 3410      72696E67 
 3410      00
 3411              	.LASF15:
 3412 01f7 696E7438 		.ascii	"int8\000"
 3412      00
 3413              	.LASF118:
 3414 01fc 75706461 		.ascii	"updateSensorValues\000"
 3414      74655365 
 3414      6E736F72 
 3414      56616C75 
 3414      657300
 3415              	.LASF93:
 3416 020f 666C6167 		.ascii	"flag_ts_update\000"
 3416      5F74735F 
 3416      75706461 
 3416      746500
 3417              	.LASF34:
 3418 021e 67325F79 		.ascii	"g2_ypos\000"
 3418      706F7300 
 3419              	.LASF28:
 3420 0226 67305F64 		.ascii	"g0_direction\000"
 3420      69726563 
 3420      74696F6E 
 3420      00
 3421              	.LASF81:
 3422 0233 72696768 		.ascii	"rightIsForward\000"
 3422      74497346 
 3422      6F727761 
 3422      726400
 3423              	.LASF45:
 3424 0242 50415353 		.ascii	"PASS\000"
 3424      00
 3425              	.LASF113:
 3426 0247 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3426      4320342E 
 3426      392E3320 
 3426      32303135 
 3426      30333033 
 3427 027a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3427      20726576 
 3427      6973696F 
 3427      6E203232 
 3427      31323230 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 76


 3428 02ad 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3428      66756E63 
 3428      74696F6E 
 3428      2D736563 
 3428      74696F6E 
 3429              	.LASF42:
 3430 02d5 5455524E 		.ascii	"TURN_RIGHT\000"
 3430      5F524947 
 3430      485400
 3431              	.LASF24:
 3432 02e0 726F626F 		.ascii	"robot_orientation\000"
 3432      745F6F72 
 3432      69656E74 
 3432      6174696F 
 3432      6E00
 3433              	.LASF102:
 3434 02f2 6C696E65 		.ascii	"line\000"
 3434      00
 3435              	.LASF95:
 3436 02f7 666C6167 		.ascii	"flag_ts_display\000"
 3436      5F74735F 
 3436      64697370 
 3436      6C617900 
 3437              	.LASF96:
 3438 0307 666C6167 		.ascii	"flag_rx\000"
 3438      5F727800 
 3439              	.LASF108:
 3440 030f 6164635F 		.ascii	"adc_readings\000"
 3440      72656164 
 3440      696E6773 
 3440      00
 3441              	.LASF30:
 3442 031c 67315F79 		.ascii	"g1_ypos\000"
 3442      706F7300 
 3443              	.LASF49:
 3444 0324 70726576 		.ascii	"prevCountM1\000"
 3444      436F756E 
 3444      744D3100 
 3445              	.LASF62:
 3446 0330 64656772 		.ascii	"degrees\000"
 3446      65657300 
 3447              	.LASF1:
 3448 0338 756E7369 		.ascii	"unsigned char\000"
 3448      676E6564 
 3448      20636861 
 3448      7200
 3449              	.LASF43:
 3450 0346 5455524E 		.ascii	"TURN_LEFT\000"
 3450      5F4C4546 
 3450      5400
 3451              	.LASF27:
 3452 0350 67305F73 		.ascii	"g0_speed\000"
 3452      70656564 
 3452      00
 3453              	.LASF82:
 3454 0359 7475726E 		.ascii	"turnLeft\000"
 3454      4C656674 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 77


 3454      00
 3455              	.LASF47:
 3456 0362 454E434F 		.ascii	"ENCODER_ISR\000"
 3456      4445525F 
 3456      49535200 
 3457              	.LASF0:
 3458 036e 7369676E 		.ascii	"signed char\000"
 3458      65642063 
 3458      68617200 
 3459              	.LASF75:
 3460 037a 64657369 		.ascii	"desired_count\000"
 3460      7265645F 
 3460      636F756E 
 3460      7400
 3461              	.LASF7:
 3462 0388 6C6F6E67 		.ascii	"long long unsigned int\000"
 3462      206C6F6E 
 3462      6720756E 
 3462      7369676E 
 3462      65642069 
 3463              	.LASF103:
 3464 039f 656E7472 		.ascii	"entry\000"
 3464      7900
 3465              	.LASF8:
 3466 03a5 756E7369 		.ascii	"unsigned int\000"
 3466      676E6564 
 3466      20696E74 
 3466      00
 3467              	.LASF59:
 3468 03b2 6D315F64 		.ascii	"m1_dist\000"
 3468      69737400 
 3469              	.LASF98:
 3470 03ba 666C6167 		.ascii	"flag_KB_string\000"
 3470      5F4B425F 
 3470      73747269 
 3470      6E6700
 3471              	.LASF61:
 3472 03c9 7475726E 		.ascii	"turnForDegrees\000"
 3472      466F7244 
 3472      65677265 
 3472      657300
 3473              	.LASF5:
 3474 03d8 6C6F6E67 		.ascii	"long unsigned int\000"
 3474      20756E73 
 3474      69676E65 
 3474      6420696E 
 3474      7400
 3475              	.LASF73:
 3476 03ea 70726576 		.ascii	"prevCount\000"
 3476      436F756E 
 3476      7400
 3477              	.LASF35:
 3478 03f4 67325F73 		.ascii	"g2_speed\000"
 3478      70656564 
 3478      00
 3479              	.LASF29:
 3480 03fd 67315F78 		.ascii	"g1_xpos\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 78


 3480      706F7300 
 3481              	.LASF3:
 3482 0405 73686F72 		.ascii	"short unsigned int\000"
 3482      7420756E 
 3482      7369676E 
 3482      65642069 
 3482      6E7400
 3483              	.LASF116:
 3484 0418 64617461 		.ascii	"data_main\000"
 3484      5F6D6169 
 3484      6E00
 3485              	.LASF58:
 3486 0422 64697374 		.ascii	"distance\000"
 3486      616E6365 
 3486      00
 3487              	.LASF10:
 3488 042b 63686172 		.ascii	"char\000"
 3488      00
 3489              	.LASF107:
 3490 0430 6164635F 		.ascii	"adc_flag\000"
 3490      666C6167 
 3490      00
 3491              	.LASF4:
 3492 0439 6C6F6E67 		.ascii	"long int\000"
 3492      20696E74 
 3492      00
 3493              	.LASF22:
 3494 0442 726F626F 		.ascii	"robot_xpos\000"
 3494      745F7870 
 3494      6F7300
 3495              	.LASF84:
 3496 044d 73686172 		.ascii	"sharpTurnLeft\000"
 3496      70547572 
 3496      6E4C6566 
 3496      7400
 3497              	.LASF12:
 3498 045b 696E7433 		.ascii	"int32_t\000"
 3498      325F7400 
 3499              	.LASF64:
 3500 0463 64697374 		.ascii	"distance_turned\000"
 3500      616E6365 
 3500      5F747572 
 3500      6E656400 
 3501              	.LASF36:
 3502 0473 67325F64 		.ascii	"g2_direction\000"
 3502      69726563 
 3502      74696F6E 
 3502      00
 3503              	.LASF109:
 3504 0480 73616D70 		.ascii	"sample_count\000"
 3504      6C655F63 
 3504      6F756E74 
 3504      00
 3505              	.LASF31:
 3506 048d 67315F73 		.ascii	"g1_speed\000"
 3506      70656564 
 3506      00
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 79


 3507              	.LASF77:
 3508 0496 64696666 		.ascii	"diff_count\000"
 3508      5F636F75 
 3508      6E7400
 3509              	.LASF46:
 3510 04a1 726F626F 		.ascii	"robot_state\000"
 3510      745F7374 
 3510      61746500 
 3511              	.LASF101:
 3512 04ad 64697370 		.ascii	"displaystring\000"
 3512      6C617973 
 3512      7472696E 
 3512      6700
 3513              	.LASF57:
 3514 04bb 64657369 		.ascii	"desired_distance\000"
 3514      7265645F 
 3514      64697374 
 3514      616E6365 
 3514      00
 3515              	.LASF41:
 3516 04cc 4D454449 		.ascii	"MEDIUM_LEFT\000"
 3516      554D5F4C 
 3516      45465400 
 3517              	.LASF67:
 3518 04d8 72656164 		.ascii	"reading\000"
 3518      696E6700 
 3519              	.LASF25:
 3520 04e0 67305F78 		.ascii	"g0_xpos\000"
 3520      706F7300 
 3521              	.LASF51:
 3522 04e8 72696768 		.ascii	"right_wheel_count\000"
 3522      745F7768 
 3522      65656C5F 
 3522      636F756E 
 3522      7400
 3523              	.LASF52:
 3524 04fa 6C656674 		.ascii	"left_wheel_count\000"
 3524      5F776865 
 3524      656C5F63 
 3524      6F756E74 
 3524      00
 3525              	.LASF17:
 3526 050b 696E7433 		.ascii	"int32\000"
 3526      3200
 3527              	.LASF19:
 3528 0511 646F7562 		.ascii	"double\000"
 3528      6C6500
 3529              	.LASF68:
 3530 0518 6368616E 		.ascii	"changeLeftWheelSpeed\000"
 3530      67654C65 
 3530      66745768 
 3530      65656C53 
 3530      70656564 
 3531              	.LASF99:
 3532 052d 64617461 		.ascii	"dataready_flag\000"
 3532      72656164 
 3532      795F666C 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 80


 3532      616700
 3533              	.LASF90:
 3534 053c 74735F73 		.ascii	"ts_speed\000"
 3534      70656564 
 3534      00
 3535              	.LASF74:
 3536 0545 636F756E 		.ascii	"count\000"
 3536      7400
 3537              	.LASF44:
 3538 054b 534C4F57 		.ascii	"SLOW\000"
 3538      00
 3539              	.LASF92:
 3540 0550 666C6167 		.ascii	"flag_ts_enc\000"
 3540      5F74735F 
 3540      656E6300 
 3541              	.LASF11:
 3542 055c 5F5F696E 		.ascii	"__int32_t\000"
 3542      7433325F 
 3542      7400
 3543              	.LASF110:
 3544 0566 636F756E 		.ascii	"countM1\000"
 3544      744D3100 
 3545              	.LASF111:
 3546 056e 636F756E 		.ascii	"countM2\000"
 3546      744D3200 
 3547              	.LASF53:
 3548 0576 706F6C6C 		.ascii	"polling_count\000"
 3548      696E675F 
 3548      636F756E 
 3548      7400
 3549              	.LASF70:
 3550 0584 6E65775F 		.ascii	"new_value\000"
 3550      76616C75 
 3550      6500
 3551              	.LASF26:
 3552 058e 67305F79 		.ascii	"g0_ypos\000"
 3552      706F7300 
 3553              	.LASF83:
 3554 0596 7475726E 		.ascii	"turnRight\000"
 3554      52696768 
 3554      7400
 3555              	.LASF91:
 3556 05a0 74735F64 		.ascii	"ts_display\000"
 3556      6973706C 
 3556      617900
 3557              	.LASF89:
 3558 05ab 74735F75 		.ascii	"ts_update\000"
 3558      70646174 
 3558      6500
 3559              	.LASF65:
 3560 05b5 67657444 		.ascii	"getDistance\000"
 3560      69737461 
 3560      6E636500 
 3561              	.LASF79:
 3562 05c1 73657457 		.ascii	"setWheelDirection\000"
 3562      6865656C 
 3562      44697265 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc0Yigik.s 			page 81


 3562      6374696F 
 3562      6E00
 3563              	.LASF100:
 3564 05d3 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3564      5F72665F 
 3564      7472616E 
 3564      736D6973 
 3564      73696F6E 
 3565              	.LASF23:
 3566 05ef 726F626F 		.ascii	"robot_ypos\000"
 3566      745F7970 
 3566      6F7300
 3567              	.LASF54:
 3568 05fa 70726576 		.ascii	"prev_state\000"
 3568      5F737461 
 3568      746500
 3569              	.LASF69:
 3570 0605 616D6F75 		.ascii	"amount\000"
 3570      6E7400
 3571              	.LASF106:
 3572 060c 73656E73 		.ascii	"sensor_readings\000"
 3572      6F725F72 
 3572      65616469 
 3572      6E677300 
 3573              	.LASF20:
 3574 061c 72737369 		.ascii	"rssi\000"
 3574      00
 3575              	.LASF80:
 3576 0621 6C656674 		.ascii	"leftIsForward\000"
 3576      4973466F 
 3576      72776172 
 3576      6400
 3577              	.LASF85:
 3578 062f 73686172 		.ascii	"sharpTurnRight\000"
 3578      70547572 
 3578      6E526967 
 3578      687400
 3579              	.LASF39:
 3580 063e 534C4947 		.ascii	"SLIGHTLY_LEFT\000"
 3580      48544C59 
 3580      5F4C4546 
 3580      5400
 3581              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
