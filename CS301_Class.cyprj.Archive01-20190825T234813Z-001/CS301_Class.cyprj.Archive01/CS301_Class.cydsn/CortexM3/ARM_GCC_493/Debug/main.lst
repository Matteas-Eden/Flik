ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	displaystring
  95 0001 000000   		.align	2
  96              		.type	displaystring, %object
  97              		.size	displaystring, 64
  98              	displaystring:
  99 0004 43533330 		.ascii	"CS301 2020\012\000"
  99      31203230 
  99      32300A00 
 100 0010 00000000 		.space	52
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.comm	line,64,4
 102              		.comm	entry,64,4
 103              		.comm	usbBuffer,64,4
 104              		.comm	system_state,32,4
 105              		.global	sensor_readings
 106              		.bss
 107 0012 0000     		.align	2
 108              		.type	sensor_readings, %object
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 3


 109              		.size	sensor_readings, 6
 110              	sensor_readings:
 111 0014 00000000 		.space	6
 111      0000
 112              		.global	adc_flag
 113 001a 0000     		.align	2
 114              		.type	adc_flag, %object
 115              		.size	adc_flag, 4
 116              	adc_flag:
 117 001c 00000000 		.space	4
 118              		.global	adc_readings
 119              		.align	2
 120              		.type	adc_readings, %object
 121              		.size	adc_readings, 24
 122              	adc_readings:
 123 0020 00000000 		.space	24
 123      00000000 
 123      00000000 
 123      00000000 
 123      00000000 
 124              		.global	sample_count
 125              		.align	2
 126              		.type	sample_count, %object
 127              		.size	sample_count, 4
 128              	sample_count:
 129 0038 00000000 		.space	4
 130              		.global	countM1
 131              		.align	2
 132              		.type	countM1, %object
 133              		.size	countM1, 4
 134              	countM1:
 135 003c 00000000 		.space	4
 136              		.global	countM2
 137              		.align	2
 138              		.type	countM2, %object
 139              		.size	countM2, 4
 140              	countM2:
 141 0040 00000000 		.space	4
 142              		.global	timer_flag
 143              		.align	2
 144              		.type	timer_flag, %object
 145              		.size	timer_flag, 4
 146              	timer_flag:
 147 0044 00000000 		.space	4
 148              		.section	.text.ENCODER_ISR,"ax",%progbits
 149              		.align	2
 150              		.global	ENCODER_ISR
 151              		.thumb
 152              		.thumb_func
 153              		.type	ENCODER_ISR, %function
 154              	ENCODER_ISR:
 155              	.LFB63:
 156              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  * Copyright Univ of Auckland, 2016
   3:.\main.c      ****  * All Rights Reserved
   4:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 4


   5:.\main.c      ****  *
   6:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   7:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   8:.\main.c      ****  *
   9:.\main.c      ****  * ================== INCLUDE ======================
  10:.\main.c      **** */
  11:.\main.c      **** #include <stdio.h>
  12:.\main.c      **** #include <string.h>
  13:.\main.c      **** #include <stdlib.h>
  14:.\main.c      **** #include <project.h>
  15:.\main.c      **** 
  16:.\main.c      **** #include "defines.h"
  17:.\main.c      **** #include "vars.h"
  18:.\main.c      **** //* =================== MACROS =====================
  19:.\main.c      **** // SENSOR MAPPINGS
  20:.\main.c      **** #define TOP_LEFT_SENSOR 0
  21:.\main.c      **** #define TOP_MID_SENSOR 1
  22:.\main.c      **** #define TOP_RIGHT_SENSOR 2
  23:.\main.c      **** #define BOTTOM_LEFT_SENSOR 3
  24:.\main.c      **** #define BOTTOM_MID_SENSOR 4
  25:.\main.c      **** #define BOTTOM_RIGHT_SENSOR 5
  26:.\main.c      **** 
  27:.\main.c      **** // LIGHT SENSORS
  28:.\main.c      **** #define NUM_SENSORS 6
  29:.\main.c      **** #define LIGHT_LEVEL 300
  30:.\main.c      **** 
  31:.\main.c      **** // ADC stuff
  32:.\main.c      **** #define ADC_READINGS_SIZE 90
  33:.\main.c      **** 
  34:.\main.c      **** // Speed calculations
  35:.\main.c      **** #define LINEAR_DISTANCE_PER_REV 20.42035225
  36:.\main.c      **** #define TICKS_PER_REV 228
  37:.\main.c      **** #define TIMER_PERIOD 0.03
  38:.\main.c      **** 
  39:.\main.c      **** // Speed control
  40:.\main.c      **** #define DESIRED_COUNT 8
  41:.\main.c      **** #define TURN_SPEED 450
  42:.\main.c      **** #define MIN_PWM_VAL 250
  43:.\main.c      **** 
  44:.\main.c      **** // Straight line test
  45:.\main.c      **** #define CM_BETWEEN_COORDS 24
  46:.\main.c      **** 
  47:.\main.c      **** // 90 degree turn - TODO: Calculate true values
  48:.\main.c      **** #define TICKS_FOR_TURN 190
  49:.\main.c      **** #define TURN_PWM_VAL 225
  50:.\main.c      **** 
  51:.\main.c      **** // Line following macros - require calibration
  52:.\main.c      **** #define ADJUST_SPEED_LARGE 3
  53:.\main.c      **** #define ADJUST_SPEED_SMALL 1
  54:.\main.c      **** #define MAX_SPEED 9
  55:.\main.c      **** #define MIN_SPEED 4
  56:.\main.c      **** #define SLOW_DOWN_SPEED 1
  57:.\main.c      **** 
  58:.\main.c      **** // Debug flag - uncomment when debugging
  59:.\main.c      **** //#define PUTTY
  60:.\main.c      **** #define PRINT_RATE 0x8000
  61:.\main.c      **** //* ================= TPYE DEF =======================
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 5


  62:.\main.c      **** //typedef struct wheel_speed{
  63:.\main.c      **** //    float m1;
  64:.\main.c      **** //    float m2;
  65:.\main.c      **** //} speed;
  66:.\main.c      **** typedef enum robot_state{
  67:.\main.c      ****     CORRECT,
  68:.\main.c      ****     SLIGHTLY_RIGHT,
  69:.\main.c      ****     SLIGHTLY_LEFT,
  70:.\main.c      ****     MEDIUM_RIGHT,
  71:.\main.c      ****     MEDIUM_LEFT,
  72:.\main.c      ****     TURN_RIGHT,
  73:.\main.c      ****     TURN_LEFT,
  74:.\main.c      ****     SLOW,
  75:.\main.c      ****     PASS
  76:.\main.c      **** } robot_state;
  77:.\main.c      **** //* ================= FUNCTIONS =======================
  78:.\main.c      **** void usbPutString(char *s);
  79:.\main.c      **** int getMax(int * readings);
  80:.\main.c      **** 
  81:.\main.c      **** int32 getValForChannel(int16 n);
  82:.\main.c      **** void updateSensorValues();
  83:.\main.c      **** 
  84:.\main.c      **** //speed getSpeed();
  85:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2);
  86:.\main.c      **** void turnRight();
  87:.\main.c      **** void turnLeft();
  88:.\main.c      **** void sharpTurnRight(int *right_wheel_count, int *left_wheel_count);
  89:.\main.c      **** void sharpTurnLeft(int *right_wheel_count, int *left_wheel_count);
  90:.\main.c      **** int8 performTurn(int isLeft);
  91:.\main.c      **** 
  92:.\main.c      **** void goStraight(int desired_distance, int *right_speed_count, int *left_wheel_count);
  93:.\main.c      **** void changeRightWheelSpeed(int amount);
  94:.\main.c      **** void changeLeftWheelSpeed(int amount);
  95:.\main.c      **** void invertWheels();
  96:.\main.c      **** void setWheelDirection(int isLeftForward, int isRightForward);
  97:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel);
  98:.\main.c      **** 
  99:.\main.c      **** float resetDecoderCount(float sum);
 100:.\main.c      **** //* ================= GLOBAL VARIABLES =======================
 101:.\main.c      **** // ADC
 102:.\main.c      **** int8 sensor_readings[NUM_SENSORS] = { 0 };
 103:.\main.c      **** volatile int adc_flag = FALSE;
 104:.\main.c      **** int adc_readings[NUM_SENSORS] = { 0 };
 105:.\main.c      **** int sample_count = 0;
 106:.\main.c      **** // Encoder
 107:.\main.c      **** volatile int countM1 = 0;
 108:.\main.c      **** volatile int countM2 = 0;
 109:.\main.c      **** volatile int timer_flag = FALSE;
 110:.\main.c      **** //* ================== ISR ======================
 111:.\main.c      **** CY_ISR(ENCODER_ISR) {
 157              		.loc 1 111 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 6


 164              		.cfi_offset 14, -4
 165 0002 00AF     		add	r7, sp, #0
 166              		.cfi_def_cfa_register 7
 112:.\main.c      ****     countM1 = QuadDec_M1_GetCounter();
 167              		.loc 1 112 0
 168 0004 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 169 0008 0346     		mov	r3, r0
 170 000a 1A46     		mov	r2, r3
 171 000c 054B     		ldr	r3, .L2
 172 000e 1A60     		str	r2, [r3]
 113:.\main.c      ****     countM2 = QuadDec_M2_GetCounter();
 173              		.loc 1 113 0
 174 0010 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 175 0014 0346     		mov	r3, r0
 176 0016 1A46     		mov	r2, r3
 177 0018 034B     		ldr	r3, .L2+4
 178 001a 1A60     		str	r2, [r3]
 114:.\main.c      ****     timer_flag = TRUE;
 179              		.loc 1 114 0
 180 001c 034B     		ldr	r3, .L2+8
 181 001e 0122     		movs	r2, #1
 182 0020 1A60     		str	r2, [r3]
 115:.\main.c      **** }
 183              		.loc 1 115 0
 184 0022 80BD     		pop	{r7, pc}
 185              	.L3:
 186              		.align	2
 187              	.L2:
 188 0024 00000000 		.word	countM1
 189 0028 00000000 		.word	countM2
 190 002c 00000000 		.word	timer_flag
 191              		.cfi_endproc
 192              	.LFE63:
 193              		.size	ENCODER_ISR, .-ENCODER_ISR
 194              		.section	.text.ADC_ISR,"ax",%progbits
 195              		.align	2
 196              		.global	ADC_ISR
 197              		.thumb
 198              		.thumb_func
 199              		.type	ADC_ISR, %function
 200              	ADC_ISR:
 201              	.LFB64:
 116:.\main.c      **** 
 117:.\main.c      **** /* ### Retrieve and Store Measurements ### */
 118:.\main.c      **** CY_ISR(ADC_ISR) {
 202              		.loc 1 118 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207 0000 80B4     		push	{r7}
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 119:.\main.c      ****     adc_flag = TRUE;
 212              		.loc 1 119 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 7


 213 0004 034B     		ldr	r3, .L5
 214 0006 0122     		movs	r2, #1
 215 0008 1A60     		str	r2, [r3]
 120:.\main.c      **** }
 216              		.loc 1 120 0
 217 000a BD46     		mov	sp, r7
 218              		.cfi_def_cfa_register 13
 219              		@ sp needed
 220 000c 5DF8047B 		ldr	r7, [sp], #4
 221              		.cfi_restore 7
 222              		.cfi_def_cfa_offset 0
 223 0010 7047     		bx	lr
 224              	.L6:
 225 0012 00BF     		.align	2
 226              	.L5:
 227 0014 00000000 		.word	adc_flag
 228              		.cfi_endproc
 229              	.LFE64:
 230              		.size	ADC_ISR, .-ADC_ISR
 231              		.section	.text.main,"ax",%progbits
 232              		.align	2
 233              		.global	main
 234              		.thumb
 235              		.thumb_func
 236              		.type	main, %function
 237              	main:
 238              	.LFB65:
 121:.\main.c      **** 
 122:.\main.c      **** /** ## Notes
 123:.\main.c      ****     
 124:.\main.c      ****     Ratio of linear distance to quad decoder ticks
 125:.\main.c      ****     One revolution gives a linear distance (in cm)
 126:.\main.c      ****     Each revolution is 57 ticks (228 for 4x mode)
 127:.\main.c      ****     Centimetres per tick = linear distance / countM(1|2)
 128:.\main.c      ****     
 129:.\main.c      ****     Decoder use a 4x count, so each revolution gives 4 counts
 130:.\main.c      ****     Sampling rate is determined by our 100ms timer (might be a little slow)
 131:.\main.c      ****     
 132:.\main.c      ****     ## Algorithm Control Flow
 133:.\main.c      ****     - Get ADC value for each channel
 134:.\main.c      ****     - Get decoder val for M1 & M2
 135:.\main.c      ****     - Use these values to drive the movement of the robot
 136:.\main.c      ****     
 137:.\main.c      **** */
 138:.\main.c      **** 
 139:.\main.c      **** int main()
 140:.\main.c      **** {
 239              		.loc 1 140 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 24
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 247 0002 86B0     		sub	sp, sp, #24
 248              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 8


 249 0004 00AF     		add	r7, sp, #0
 250              		.cfi_def_cfa_register 7
 141:.\main.c      ****     // delay
 142:.\main.c      ****     CyDelay(2000);
 251              		.loc 1 142 0
 252 0006 4FF4FA60 		mov	r0, #2000
 253 000a FFF7FEFF 		bl	CyDelay
 143:.\main.c      ****     
 144:.\main.c      ****     // --------------------------------
 145:.\main.c      ****     // ----- INITIALIZATIONS ----------
 146:.\main.c      ****     // ========================================
 147:.\main.c      ****     CYGlobalIntEnable;
 254              		.loc 1 147 0
 255              	@ 147 ".\main.c" 1
 256 000e 62B6     		CPSIE   i
 257              	@ 0 "" 2
 148:.\main.c      ****     
 149:.\main.c      ****     // PWMs
 150:.\main.c      ****     PWM_1_Start();
 258              		.loc 1 150 0
 259              		.thumb
 260 0010 FFF7FEFF 		bl	PWM_1_Start
 151:.\main.c      ****     PWM_2_Start();
 261              		.loc 1 151 0
 262 0014 FFF7FEFF 		bl	PWM_2_Start
 152:.\main.c      ****     
 153:.\main.c      ****     // Timer for encoder
 154:.\main.c      ****     Timer_TS_Start();
 263              		.loc 1 154 0
 264 0018 FFF7FEFF 		bl	Timer_TS_Start
 155:.\main.c      ****     isr_TS_Start(); // Timer interrupts need to be started independently
 265              		.loc 1 155 0
 266 001c FFF7FEFF 		bl	isr_TS_Start
 156:.\main.c      ****     isr_TS_StartEx(ENCODER_ISR);
 267              		.loc 1 156 0
 268 0020 1948     		ldr	r0, .L8
 269 0022 FFF7FEFF 		bl	isr_TS_StartEx
 157:.\main.c      ****     
 158:.\main.c      ****     // Quad Decoders
 159:.\main.c      ****     QuadDec_M1_Start();
 270              		.loc 1 159 0
 271 0026 FFF7FEFF 		bl	QuadDec_M1_Start
 160:.\main.c      ****     QuadDec_M2_Start();
 272              		.loc 1 160 0
 273 002a FFF7FEFF 		bl	QuadDec_M2_Start
 161:.\main.c      ****     
 162:.\main.c      ****     // ADC
 163:.\main.c      ****     ADC_Start(); // Start ADC
 274              		.loc 1 163 0
 275 002e FFF7FEFF 		bl	ADC_Start
 164:.\main.c      ****     ADC_IRQ_Enable(); // Enable ADC interrupts
 276              		.loc 1 164 0
 277 0032 FFF7FEFF 		bl	ADC_IRQ_Enable
 165:.\main.c      ****     ADC_StartConvert(); // Start conversions
 278              		.loc 1 165 0
 279 0036 FFF7FEFF 		bl	ADC_StartConvert
 166:.\main.c      ****     isr_eoc_StartEx(ADC_ISR); // link interrupt for ADC
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 9


 280              		.loc 1 166 0
 281 003a 1448     		ldr	r0, .L8+4
 282 003c FFF7FEFF 		bl	isr_eoc_StartEx
 167:.\main.c      **** 
 168:.\main.c      ****     // ---------- USB SETUP ------------    
 169:.\main.c      ****     #ifdef USE_USB    
 170:.\main.c      ****         USBUART_Start(0, USBUART_5V_OPERATION);
 283              		.loc 1 170 0
 284 0040 0020     		movs	r0, #0
 285 0042 0121     		movs	r1, #1
 286 0044 FFF7FEFF 		bl	USBUART_Start
 171:.\main.c      ****     #endif            
 172:.\main.c      ****     
 173:.\main.c      ****     // To make sure wheels rotate in the same direction i.e. forward
 174:.\main.c      ****     INV2_Write(1);
 287              		.loc 1 174 0
 288 0048 0120     		movs	r0, #1
 289 004a FFF7FEFF 		bl	INV2_Write
 175:.\main.c      ****     
 176:.\main.c      ****     // Storing count values
 177:.\main.c      ****     int prevCountM1 = 0;
 290              		.loc 1 177 0
 291 004e 0023     		movs	r3, #0
 292 0050 7B61     		str	r3, [r7, #20]
 178:.\main.c      ****     int prevCountM2 = 0;
 293              		.loc 1 178 0
 294 0052 0023     		movs	r3, #0
 295 0054 3B61     		str	r3, [r7, #16]
 179:.\main.c      ****     int right_wheel_count = DESIRED_COUNT;
 296              		.loc 1 179 0
 297 0056 0823     		movs	r3, #8
 298 0058 7B60     		str	r3, [r7, #4]
 180:.\main.c      ****     int left_wheel_count = DESIRED_COUNT;
 299              		.loc 1 180 0
 300 005a 0823     		movs	r3, #8
 301 005c 3B60     		str	r3, [r7]
 181:.\main.c      ****     int polling_count = 0;
 302              		.loc 1 181 0
 303 005e 0023     		movs	r3, #0
 304 0060 FB60     		str	r3, [r7, #12]
 182:.\main.c      ****     
 183:.\main.c      ****     robot_state state;
 184:.\main.c      ****     robot_state prev_state = CORRECT;
 305              		.loc 1 184 0
 306 0062 0023     		movs	r3, #0
 307 0064 FB72     		strb	r3, [r7, #11]
 185:.\main.c      ****     
 186:.\main.c      ****     //goStraight(CM_BETWEEN_COORDS, &right_wheel_count, &left_wheel_count);
 187:.\main.c      ****     sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 308              		.loc 1 187 0
 309 0066 3A1D     		adds	r2, r7, #4
 310 0068 3B46     		mov	r3, r7
 311 006a 1046     		mov	r0, r2
 312 006c 1946     		mov	r1, r3
 313 006e FFF7FEFF 		bl	sharpTurnLeft
 188:.\main.c      ****     PWM_1_WriteCompare(0);
 314              		.loc 1 188 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 10


 315 0072 0020     		movs	r0, #0
 316 0074 FFF7FEFF 		bl	PWM_1_WriteCompare
 189:.\main.c      ****     PWM_2_WriteCompare(0);
 317              		.loc 1 189 0
 318 0078 0020     		movs	r0, #0
 319 007a FFF7FEFF 		bl	PWM_2_WriteCompare
 190:.\main.c      ****     
 191:.\main.c      **** //    while(1) { // Begin main control
 192:.\main.c      **** //        polling_count++;
 193:.\main.c      **** //        
 194:.\main.c      **** //        if (adc_flag) {
 195:.\main.c      **** //            updateSensorValues();
 196:.\main.c      **** //            adc_flag = FALSE;
 197:.\main.c      **** //        }
 198:.\main.c      **** //        
 199:.\main.c      **** //         // New count values from encoder are ready
 200:.\main.c      **** //        if (timer_flag){
 201:.\main.c      **** //            isr_TS_Disable();
 202:.\main.c      **** //            
 203:.\main.c      **** //            // Correct speed
 204:.\main.c      **** //            correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 205:.\main.c      **** //            correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 206:.\main.c      **** //            
 207:.\main.c      **** //            // Update previous values
 208:.\main.c      **** //            prevCountM1 = countM1;
 209:.\main.c      **** //            prevCountM2 = countM2;
 210:.\main.c      **** //            
 211:.\main.c      **** //            // Reset flag
 212:.\main.c      **** //            timer_flag = FALSE;
 213:.\main.c      **** //            
 214:.\main.c      **** //            isr_TS_Enable();
 215:.\main.c      **** //        }
 216:.\main.c      **** //        
 217:.\main.c      **** //       // follow a line algorithm
 218:.\main.c      **** //        if (sensor_readings[TOP_MID_SENSOR]) { // on line
 219:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 220:.\main.c      **** //                state = SLIGHTLY_RIGHT;
 221:.\main.c      **** //                right_wheel_count -= ADJUST_SPEED_SMALL;
 222:.\main.c      **** //                left_wheel_count += ADJUST_SPEED_SMALL;
 223:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { 
 224:.\main.c      **** //                state = SLIGHTLY_LEFT;
 225:.\main.c      **** //                right_wheel_count += ADJUST_SPEED_SMALL;
 226:.\main.c      **** //                left_wheel_count -= ADJUST_SPEED_SMALL;
 227:.\main.c      **** //            } else { // Correct speed
 228:.\main.c      **** //                state = CORRECT;
 229:.\main.c      **** //            }
 230:.\main.c      **** //        } else { // moved off
 231:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 232:.\main.c      **** //                state = MEDIUM_RIGHT;
 233:.\main.c      **** //                turnRight();
 234:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {/
 235:.\main.c      **** //                state = MEDIUM_LEFT;
 236:.\main.c      **** //				turnLeft();
 237:.\main.c      **** //            // for corners
 238:.\main.c      **** //            } else if (!sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {
 239:.\main.c      **** //                if (sensor_readings[BOTTOM_LEFT_SENSOR]) {
 240:.\main.c      **** //                    state = TURN_LEFT;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 11


 241:.\main.c      **** //                    sharpTurnLeft();
 242:.\main.c      **** //                } else if (sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 243:.\main.c      **** //                    state = TURN_RIGHT;
 244:.\main.c      **** //                    sharpTurnRight();
 245:.\main.c      **** //                 // slow down in preperation for a sharp turn
 246:.\main.c      **** //                } else if (left_wheel_count > MIN_SPEED && right_wheel_count > MIN_SPEED) {
 247:.\main.c      **** //                    state = SLOW;
 248:.\main.c      **** //                    right_wheel_count -= SLOW_DOWN_SPEED;
 249:.\main.c      **** //                    left_wheel_count -= SLOW_DOWN_SPEED;
 250:.\main.c      **** //                } else {
 251:.\main.c      **** //                    state = PASS;
 252:.\main.c      **** //                }
 253:.\main.c      **** //            }
 254:.\main.c      **** //        }
 255:.\main.c      **** //        
 256:.\main.c      **** //        if (right_wheel_count > MAX_SPEED) {
 257:.\main.c      **** //            right_wheel_count = MAX_SPEED;
 258:.\main.c      **** //        }
 259:.\main.c      **** //        if (left_wheel_count > MAX_SPEED) {
 260:.\main.c      **** //            left_wheel_count = MAX_SPEED;
 261:.\main.c      **** //        }
 262:.\main.c      **** //        if (right_wheel_count < MIN_SPEED) {
 263:.\main.c      **** //            right_wheel_count = MIN_SPEED;
 264:.\main.c      **** //        }
 265:.\main.c      **** //        if (left_wheel_count < MIN_SPEED) {
 266:.\main.c      **** //            left_wheel_count = MIN_SPEED;
 267:.\main.c      **** //        }
 268:.\main.c      **** //        
 269:.\main.c      **** ////        if (polling_count == PRINT_RATE) {
 270:.\main.c      **** //        if (prev_state != state) {
 271:.\main.c      **** //            if (state == SLIGHTLY_LEFT) {
 272:.\main.c      **** //                usbPutString("SLIGHTLY_LEFT\r\n");
 273:.\main.c      **** //            } else if (state == SLIGHTLY_RIGHT) {
 274:.\main.c      **** //                usbPutString("SLIGHTLY_RIGHT\r\n");
 275:.\main.c      **** //            } else if (state == MEDIUM_LEFT) {
 276:.\main.c      **** //                usbPutString("MEDIUM_LEFT\r\n");
 277:.\main.c      **** //            } else if (state == MEDIUM_RIGHT) {
 278:.\main.c      **** //                usbPutString("MEDIUM_RIGHT\r\n");
 279:.\main.c      **** //            } else if (state == TURN_LEFT) {
 280:.\main.c      **** //                usbPutString("TURN_LEFT\r\n");
 281:.\main.c      **** //            } else if (state == TURN_RIGHT) {
 282:.\main.c      **** //                usbPutString("TURN_RIGHT\r\n");
 283:.\main.c      **** //            } else if (state == SLOW) {
 284:.\main.c      **** //                usbPutString("SLOW\r\n");
 285:.\main.c      **** //            } else if (state == PASS) {
 286:.\main.c      **** //                usbPutString("PASS\r\n");
 287:.\main.c      **** //            } else if (state == CORRECT) {
 288:.\main.c      **** //                usbPutString("CORRECT\r\n");
 289:.\main.c      **** //            }
 290:.\main.c      **** //            prev_state = state;
 291:.\main.c      **** //        }
 292:.\main.c      **** //                
 293:.\main.c      **** //                
 294:.\main.c      **** //        if (polling_count == PRINT_RATE) polling_count = 0;
 295:.\main.c      **** //    }
 296:.\main.c      **** }
 320              		.loc 1 296 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 12


 321 007e 1846     		mov	r0, r3
 322 0080 1837     		adds	r7, r7, #24
 323              		.cfi_def_cfa_offset 8
 324 0082 BD46     		mov	sp, r7
 325              		.cfi_def_cfa_register 13
 326              		@ sp needed
 327 0084 80BD     		pop	{r7, pc}
 328              	.L9:
 329 0086 00BF     		.align	2
 330              	.L8:
 331 0088 00000000 		.word	ENCODER_ISR
 332 008c 00000000 		.word	ADC_ISR
 333              		.cfi_endproc
 334              	.LFE65:
 335              		.size	main, .-main
 336              		.global	__aeabi_fadd
 337              		.global	__aeabi_i2f
 338              		.global	__aeabi_fcmpgt
 339              		.section	.text.goStraight,"ax",%progbits
 340              		.align	2
 341              		.global	goStraight
 342              		.thumb
 343              		.thumb_func
 344              		.type	goStraight, %function
 345              	goStraight:
 346              	.LFB66:
 297:.\main.c      **** 
 298:.\main.c      **** void goStraight(int desired_distance, int *right_wheel_count, int *left_wheel_count) {
 347              		.loc 1 298 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 32
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 0000 80B5     		push	{r7, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 88B0     		sub	sp, sp, #32
 356              		.cfi_def_cfa_offset 40
 357 0004 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 359 0006 F860     		str	r0, [r7, #12]
 360 0008 B960     		str	r1, [r7, #8]
 361 000a 7A60     		str	r2, [r7, #4]
 299:.\main.c      ****     // Storing count values
 300:.\main.c      ****     int prevCountM1 = 0;
 362              		.loc 1 300 0
 363 000c 0023     		movs	r3, #0
 364 000e FB61     		str	r3, [r7, #28]
 301:.\main.c      ****     int prevCountM2 = 0;
 365              		.loc 1 301 0
 366 0010 0023     		movs	r3, #0
 367 0012 BB61     		str	r3, [r7, #24]
 302:.\main.c      **** //    int right_wheel_count = DESIRED_COUNT;
 303:.\main.c      **** //    int left_wheel_count = DESIRED_COUNT;
 304:.\main.c      ****     float distance = 0;
 368              		.loc 1 304 0
 369 0014 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 13


 370 0018 7B61     		str	r3, [r7, #20]	@ float
 305:.\main.c      ****         
 306:.\main.c      ****     while (distance < desired_distance) {
 371              		.loc 1 306 0
 372 001a 93E0     		b	.L11
 373              	.L22:
 307:.\main.c      ****         if (adc_flag) {
 374              		.loc 1 307 0
 375 001c 514B     		ldr	r3, .L23
 376 001e 1B68     		ldr	r3, [r3]
 377 0020 002B     		cmp	r3, #0
 378 0022 04D0     		beq	.L12
 308:.\main.c      ****             updateSensorValues();
 379              		.loc 1 308 0
 380 0024 FFF7FEFF 		bl	updateSensorValues
 309:.\main.c      ****             adc_flag = FALSE;
 381              		.loc 1 309 0
 382 0028 4E4B     		ldr	r3, .L23
 383 002a 0022     		movs	r2, #0
 384 002c 1A60     		str	r2, [r3]
 385              	.L12:
 310:.\main.c      ****         }
 311:.\main.c      ****         
 312:.\main.c      ****          // New count values from encoder are ready
 313:.\main.c      ****         if (timer_flag){
 386              		.loc 1 313 0
 387 002e 4E4B     		ldr	r3, .L23+4
 388 0030 1B68     		ldr	r3, [r3]
 389 0032 002B     		cmp	r3, #0
 390 0034 2BD0     		beq	.L13
 314:.\main.c      ****             isr_TS_Disable();
 391              		.loc 1 314 0
 392 0036 FFF7FEFF 		bl	isr_TS_Disable
 315:.\main.c      ****             
 316:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 393              		.loc 1 316 0
 394 003a F869     		ldr	r0, [r7, #28]
 395 003c B969     		ldr	r1, [r7, #24]
 396 003e FFF7FEFF 		bl	getDistance
 397 0042 0346     		mov	r3, r0
 398 0044 7869     		ldr	r0, [r7, #20]	@ float
 399 0046 1946     		mov	r1, r3
 400 0048 FFF7FEFF 		bl	__aeabi_fadd
 401 004c 0346     		mov	r3, r0
 402 004e 7B61     		str	r3, [r7, #20]	@ float
 317:.\main.c      ****             
 318:.\main.c      ****             // Correct speed
 319:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 403              		.loc 1 319 0
 404 0050 464B     		ldr	r3, .L23+8
 405 0052 1A68     		ldr	r2, [r3]
 406 0054 7B68     		ldr	r3, [r7, #4]
 407 0056 1B68     		ldr	r3, [r3]
 408 0058 F869     		ldr	r0, [r7, #28]
 409 005a 1146     		mov	r1, r2
 410 005c 1A46     		mov	r2, r3
 411 005e 0123     		movs	r3, #1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 14


 412 0060 FFF7FEFF 		bl	correctSpeed
 320:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 413              		.loc 1 320 0
 414 0064 424B     		ldr	r3, .L23+12
 415 0066 1A68     		ldr	r2, [r3]
 416 0068 BB68     		ldr	r3, [r7, #8]
 417 006a 1B68     		ldr	r3, [r3]
 418 006c B869     		ldr	r0, [r7, #24]
 419 006e 1146     		mov	r1, r2
 420 0070 1A46     		mov	r2, r3
 421 0072 0023     		movs	r3, #0
 422 0074 FFF7FEFF 		bl	correctSpeed
 321:.\main.c      ****             
 322:.\main.c      ****             // Update previous values
 323:.\main.c      ****             prevCountM1 = countM1;
 423              		.loc 1 323 0
 424 0078 3C4B     		ldr	r3, .L23+8
 425 007a 1B68     		ldr	r3, [r3]
 426 007c FB61     		str	r3, [r7, #28]
 324:.\main.c      ****             prevCountM2 = countM2;
 427              		.loc 1 324 0
 428 007e 3C4B     		ldr	r3, .L23+12
 429 0080 1B68     		ldr	r3, [r3]
 430 0082 BB61     		str	r3, [r7, #24]
 325:.\main.c      ****             
 326:.\main.c      ****             // Reset flag
 327:.\main.c      ****             timer_flag = FALSE;
 431              		.loc 1 327 0
 432 0084 384B     		ldr	r3, .L23+4
 433 0086 0022     		movs	r2, #0
 434 0088 1A60     		str	r2, [r3]
 328:.\main.c      ****             
 329:.\main.c      ****             isr_TS_Enable();
 435              		.loc 1 329 0
 436 008a FFF7FEFF 		bl	isr_TS_Enable
 437              	.L13:
 330:.\main.c      ****         }
 331:.\main.c      ****         
 332:.\main.c      ****         // follow a line algorithm
 333:.\main.c      ****         if (sensor_readings[TOP_MID_SENSOR]) { // on line
 438              		.loc 1 333 0
 439 008e 394B     		ldr	r3, .L23+16
 440 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 441 0092 002B     		cmp	r3, #0
 442 0094 25D0     		beq	.L14
 334:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 443              		.loc 1 334 0
 444 0096 374B     		ldr	r3, .L23+16
 445 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 446 009a 002B     		cmp	r3, #0
 447 009c 0ED1     		bne	.L15
 448              		.loc 1 334 0 is_stmt 0 discriminator 1
 449 009e 354B     		ldr	r3, .L23+16
 450 00a0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 451 00a2 002B     		cmp	r3, #0
 452 00a4 0AD0     		beq	.L15
 335:.\main.c      ****                 *right_wheel_count -= ADJUST_SPEED_SMALL;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 15


 453              		.loc 1 335 0 is_stmt 1
 454 00a6 BB68     		ldr	r3, [r7, #8]
 455 00a8 1B68     		ldr	r3, [r3]
 456 00aa 5A1E     		subs	r2, r3, #1
 457 00ac BB68     		ldr	r3, [r7, #8]
 458 00ae 1A60     		str	r2, [r3]
 336:.\main.c      ****                 *left_wheel_count += ADJUST_SPEED_SMALL;
 459              		.loc 1 336 0
 460 00b0 7B68     		ldr	r3, [r7, #4]
 461 00b2 1B68     		ldr	r3, [r3]
 462 00b4 5A1C     		adds	r2, r3, #1
 463 00b6 7B68     		ldr	r3, [r7, #4]
 464 00b8 1A60     		str	r2, [r3]
 465 00ba 27E0     		b	.L17
 466              	.L15:
 337:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { //
 467              		.loc 1 337 0
 468 00bc 2D4B     		ldr	r3, .L23+16
 469 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 470 00c0 002B     		cmp	r3, #0
 471 00c2 23D0     		beq	.L17
 472              		.loc 1 337 0 is_stmt 0 discriminator 1
 473 00c4 2B4B     		ldr	r3, .L23+16
 474 00c6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 475 00c8 002B     		cmp	r3, #0
 476 00ca 1FD1     		bne	.L17
 338:.\main.c      ****                 *right_wheel_count += ADJUST_SPEED_SMALL;
 477              		.loc 1 338 0 is_stmt 1
 478 00cc BB68     		ldr	r3, [r7, #8]
 479 00ce 1B68     		ldr	r3, [r3]
 480 00d0 5A1C     		adds	r2, r3, #1
 481 00d2 BB68     		ldr	r3, [r7, #8]
 482 00d4 1A60     		str	r2, [r3]
 339:.\main.c      ****                 *left_wheel_count -= ADJUST_SPEED_SMALL;
 483              		.loc 1 339 0
 484 00d6 7B68     		ldr	r3, [r7, #4]
 485 00d8 1B68     		ldr	r3, [r3]
 486 00da 5A1E     		subs	r2, r3, #1
 487 00dc 7B68     		ldr	r3, [r7, #4]
 488 00de 1A60     		str	r2, [r3]
 489 00e0 14E0     		b	.L17
 490              	.L14:
 340:.\main.c      ****             } else { // Correct speed
 341:.\main.c      ****             }
 342:.\main.c      ****         } else { // moved off
 343:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 491              		.loc 1 343 0
 492 00e2 244B     		ldr	r3, .L23+16
 493 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494 00e6 002B     		cmp	r3, #0
 495 00e8 06D1     		bne	.L18
 496              		.loc 1 343 0 is_stmt 0 discriminator 1
 497 00ea 224B     		ldr	r3, .L23+16
 498 00ec 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 499 00ee 002B     		cmp	r3, #0
 500 00f0 02D0     		beq	.L18
 344:.\main.c      ****                 turnRight();
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 16


 501              		.loc 1 344 0 is_stmt 1
 502 00f2 FFF7FEFF 		bl	turnRight
 503 00f6 09E0     		b	.L17
 504              	.L18:
 345:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {// 
 505              		.loc 1 345 0
 506 00f8 1E4B     		ldr	r3, .L23+16
 507 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 508 00fc 002B     		cmp	r3, #0
 509 00fe 05D0     		beq	.L17
 510              		.loc 1 345 0 is_stmt 0 discriminator 1
 511 0100 1C4B     		ldr	r3, .L23+16
 512 0102 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 513 0104 002B     		cmp	r3, #0
 514 0106 01D1     		bne	.L17
 346:.\main.c      **** 				turnLeft();
 515              		.loc 1 346 0 is_stmt 1
 516 0108 FFF7FEFF 		bl	turnLeft
 517              	.L17:
 347:.\main.c      ****             }
 348:.\main.c      ****         }
 349:.\main.c      ****         
 350:.\main.c      ****         if (*right_wheel_count > MAX_SPEED) {
 518              		.loc 1 350 0
 519 010c BB68     		ldr	r3, [r7, #8]
 520 010e 1B68     		ldr	r3, [r3]
 521 0110 092B     		cmp	r3, #9
 522 0112 02DD     		ble	.L19
 351:.\main.c      ****             *right_wheel_count = MAX_SPEED;
 523              		.loc 1 351 0
 524 0114 BB68     		ldr	r3, [r7, #8]
 525 0116 0922     		movs	r2, #9
 526 0118 1A60     		str	r2, [r3]
 527              	.L19:
 352:.\main.c      ****         }
 353:.\main.c      ****         if (*left_wheel_count > MAX_SPEED) {
 528              		.loc 1 353 0
 529 011a 7B68     		ldr	r3, [r7, #4]
 530 011c 1B68     		ldr	r3, [r3]
 531 011e 092B     		cmp	r3, #9
 532 0120 02DD     		ble	.L20
 354:.\main.c      ****             *left_wheel_count = MAX_SPEED;
 533              		.loc 1 354 0
 534 0122 7B68     		ldr	r3, [r7, #4]
 535 0124 0922     		movs	r2, #9
 536 0126 1A60     		str	r2, [r3]
 537              	.L20:
 355:.\main.c      ****         }
 356:.\main.c      ****         if (*right_wheel_count < MIN_SPEED) {
 538              		.loc 1 356 0
 539 0128 BB68     		ldr	r3, [r7, #8]
 540 012a 1B68     		ldr	r3, [r3]
 541 012c 032B     		cmp	r3, #3
 542 012e 02DC     		bgt	.L21
 357:.\main.c      ****             *right_wheel_count = MIN_SPEED;
 543              		.loc 1 357 0
 544 0130 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 17


 545 0132 0422     		movs	r2, #4
 546 0134 1A60     		str	r2, [r3]
 547              	.L21:
 358:.\main.c      ****         }
 359:.\main.c      ****         if (*left_wheel_count < MIN_SPEED) {
 548              		.loc 1 359 0
 549 0136 7B68     		ldr	r3, [r7, #4]
 550 0138 1B68     		ldr	r3, [r3]
 551 013a 032B     		cmp	r3, #3
 552 013c 02DC     		bgt	.L11
 360:.\main.c      ****             *left_wheel_count = MIN_SPEED;
 553              		.loc 1 360 0
 554 013e 7B68     		ldr	r3, [r7, #4]
 555 0140 0422     		movs	r2, #4
 556 0142 1A60     		str	r2, [r3]
 557              	.L11:
 306:.\main.c      ****         if (adc_flag) {
 558              		.loc 1 306 0
 559 0144 F868     		ldr	r0, [r7, #12]
 560 0146 FFF7FEFF 		bl	__aeabi_i2f
 561 014a 0346     		mov	r3, r0
 562 014c 1846     		mov	r0, r3
 563 014e 7969     		ldr	r1, [r7, #20]	@ float
 564 0150 FFF7FEFF 		bl	__aeabi_fcmpgt
 565 0154 0346     		mov	r3, r0
 566 0156 002B     		cmp	r3, #0
 567 0158 7FF460AF 		bne	.L22
 361:.\main.c      ****         }
 362:.\main.c      ****     }
 363:.\main.c      **** }
 568              		.loc 1 363 0
 569 015c 2037     		adds	r7, r7, #32
 570              		.cfi_def_cfa_offset 8
 571 015e BD46     		mov	sp, r7
 572              		.cfi_def_cfa_register 13
 573              		@ sp needed
 574 0160 80BD     		pop	{r7, pc}
 575              	.L24:
 576 0162 00BF     		.align	2
 577              	.L23:
 578 0164 00000000 		.word	adc_flag
 579 0168 00000000 		.word	timer_flag
 580 016c 00000000 		.word	countM1
 581 0170 00000000 		.word	countM2
 582 0174 00000000 		.word	sensor_readings
 583              		.cfi_endproc
 584              	.LFE66:
 585              		.size	goStraight, .-goStraight
 586              		.global	__aeabi_fdiv
 587              		.global	__aeabi_f2d
 588              		.global	__aeabi_dmul
 589              		.global	__aeabi_d2f
 590              		.section	.text.getDistance,"ax",%progbits
 591              		.align	2
 592              		.global	getDistance
 593              		.thumb
 594              		.thumb_func
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 18


 595              		.type	getDistance, %function
 596              	getDistance:
 597              	.LFB67:
 364:.\main.c      **** 
 365:.\main.c      **** //char* itoa(int val, int base) {
 366:.\main.c      **** //    static char buf[32] = {0};
 367:.\main.c      **** //    
 368:.\main.c      **** //    int i = 30;
 369:.\main.c      **** //    for (; val && i ; --i, val /= base)
 370:.\main.c      **** //        buf[i] = "01234566789abcdef"[val % base];
 371:.\main.c      **** //        
 372:.\main.c      **** //    return &buf[i+1];
 373:.\main.c      **** //}
 374:.\main.c      **** 
 375:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2){
 598              		.loc 1 375 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 16
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 0000 80B5     		push	{r7, lr}
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 7, -8
 605              		.cfi_offset 14, -4
 606 0002 84B0     		sub	sp, sp, #16
 607              		.cfi_def_cfa_offset 24
 608 0004 00AF     		add	r7, sp, #0
 609              		.cfi_def_cfa_register 7
 610 0006 7860     		str	r0, [r7, #4]
 611 0008 3960     		str	r1, [r7]
 376:.\main.c      ****     float m1_dist = ((float)abs(countM1 - prevCountM1) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 612              		.loc 1 376 0
 613 000a 2D4B     		ldr	r3, .L27+8
 614 000c 1A68     		ldr	r2, [r3]
 615 000e 7B68     		ldr	r3, [r7, #4]
 616 0010 D31A     		subs	r3, r2, r3
 617 0012 002B     		cmp	r3, #0
 618 0014 B8BF     		it	lt
 619 0016 5B42     		rsblt	r3, r3, #0
 620 0018 1846     		mov	r0, r3
 621 001a FFF7FEFF 		bl	__aeabi_i2f
 622 001e 0346     		mov	r3, r0
 623 0020 1846     		mov	r0, r3
 624 0022 2849     		ldr	r1, .L27+12
 625 0024 FFF7FEFF 		bl	__aeabi_fdiv
 626 0028 0346     		mov	r3, r0
 627 002a 1846     		mov	r0, r3
 628 002c FFF7FEFF 		bl	__aeabi_f2d
 629 0030 0246     		mov	r2, r0
 630 0032 0B46     		mov	r3, r1
 631 0034 1046     		mov	r0, r2
 632 0036 1946     		mov	r1, r3
 633 0038 1FA3     		adr	r3, .L27
 634 003a D3E90023 		ldrd	r2, [r3]
 635 003e FFF7FEFF 		bl	__aeabi_dmul
 636 0042 0246     		mov	r2, r0
 637 0044 0B46     		mov	r3, r1
 638 0046 1046     		mov	r0, r2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 19


 639 0048 1946     		mov	r1, r3
 640 004a FFF7FEFF 		bl	__aeabi_d2f
 641 004e 0346     		mov	r3, r0
 642 0050 FB60     		str	r3, [r7, #12]	@ float
 377:.\main.c      ****     float m2_dist = ((float)abs(countM2 - prevCountM2) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 643              		.loc 1 377 0
 644 0052 1D4B     		ldr	r3, .L27+16
 645 0054 1A68     		ldr	r2, [r3]
 646 0056 3B68     		ldr	r3, [r7]
 647 0058 D31A     		subs	r3, r2, r3
 648 005a 002B     		cmp	r3, #0
 649 005c B8BF     		it	lt
 650 005e 5B42     		rsblt	r3, r3, #0
 651 0060 1846     		mov	r0, r3
 652 0062 FFF7FEFF 		bl	__aeabi_i2f
 653 0066 0346     		mov	r3, r0
 654 0068 1846     		mov	r0, r3
 655 006a 1649     		ldr	r1, .L27+12
 656 006c FFF7FEFF 		bl	__aeabi_fdiv
 657 0070 0346     		mov	r3, r0
 658 0072 1846     		mov	r0, r3
 659 0074 FFF7FEFF 		bl	__aeabi_f2d
 660 0078 0246     		mov	r2, r0
 661 007a 0B46     		mov	r3, r1
 662 007c 1046     		mov	r0, r2
 663 007e 1946     		mov	r1, r3
 664 0080 0DA3     		adr	r3, .L27
 665 0082 D3E90023 		ldrd	r2, [r3]
 666 0086 FFF7FEFF 		bl	__aeabi_dmul
 667 008a 0246     		mov	r2, r0
 668 008c 0B46     		mov	r3, r1
 669 008e 1046     		mov	r0, r2
 670 0090 1946     		mov	r1, r3
 671 0092 FFF7FEFF 		bl	__aeabi_d2f
 672 0096 0346     		mov	r3, r0
 673 0098 BB60     		str	r3, [r7, #8]	@ float
 378:.\main.c      ****     return (m1_dist+m2_dist)/2;
 674              		.loc 1 378 0
 675 009a F868     		ldr	r0, [r7, #12]	@ float
 676 009c B968     		ldr	r1, [r7, #8]	@ float
 677 009e FFF7FEFF 		bl	__aeabi_fadd
 678 00a2 0346     		mov	r3, r0
 679 00a4 1846     		mov	r0, r3
 680 00a6 4FF08041 		mov	r1, #1073741824
 681 00aa FFF7FEFF 		bl	__aeabi_fdiv
 682 00ae 0346     		mov	r3, r0
 379:.\main.c      **** };
 683              		.loc 1 379 0
 684 00b0 1846     		mov	r0, r3
 685 00b2 1037     		adds	r7, r7, #16
 686              		.cfi_def_cfa_offset 8
 687 00b4 BD46     		mov	sp, r7
 688              		.cfi_def_cfa_register 13
 689              		@ sp needed
 690 00b6 80BD     		pop	{r7, pc}
 691              	.L28:
 692              		.align	3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 20


 693              	.L27:
 694 00b8 CE8C7E34 		.word	880708814
 695 00bc 9C6B3440 		.word	1077177244
 696 00c0 00000000 		.word	countM1
 697 00c4 00006443 		.word	1130627072
 698 00c8 00000000 		.word	countM2
 699              		.cfi_endproc
 700              	.LFE67:
 701              		.size	getDistance, .-getDistance
 702 00cc AFF30080 		.section	.text.getValForChannel,"ax",%progbits
 703              		.align	2
 704              		.global	getValForChannel
 705              		.thumb
 706              		.thumb_func
 707              		.type	getValForChannel, %function
 708              	getValForChannel:
 709              	.LFB68:
 380:.\main.c      **** 
 381:.\main.c      **** // Simple ADC conversion
 382:.\main.c      **** int32 getValForChannel(int16 n){
 710              		.loc 1 382 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0000 80B5     		push	{r7, lr}
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 7, -8
 717              		.cfi_offset 14, -4
 718 0002 82B0     		sub	sp, sp, #8
 719              		.cfi_def_cfa_offset 16
 720 0004 00AF     		add	r7, sp, #0
 721              		.cfi_def_cfa_register 7
 722 0006 0346     		mov	r3, r0
 723 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 383:.\main.c      ****     return ADC_CountsTo_mVolts(ADC_GetResult16(n));
 724              		.loc 1 383 0
 725 000a FB88     		ldrh	r3, [r7, #6]
 726 000c 1846     		mov	r0, r3
 727 000e FFF7FEFF 		bl	ADC_GetResult16
 728 0012 0346     		mov	r3, r0
 729 0014 1846     		mov	r0, r3
 730 0016 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 731 001a 0346     		mov	r3, r0
 384:.\main.c      **** }
 732              		.loc 1 384 0
 733 001c 1846     		mov	r0, r3
 734 001e 0837     		adds	r7, r7, #8
 735              		.cfi_def_cfa_offset 8
 736 0020 BD46     		mov	sp, r7
 737              		.cfi_def_cfa_register 13
 738              		@ sp needed
 739 0022 80BD     		pop	{r7, pc}
 740              		.cfi_endproc
 741              	.LFE68:
 742              		.size	getValForChannel, .-getValForChannel
 743              		.section	.text.updateSensorValues,"ax",%progbits
 744              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 21


 745              		.global	updateSensorValues
 746              		.thumb
 747              		.thumb_func
 748              		.type	updateSensorValues, %function
 749              	updateSensorValues:
 750              	.LFB69:
 385:.\main.c      **** 
 386:.\main.c      **** void updateSensorValues(){
 751              		.loc 1 386 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 8
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755 0000 80B5     		push	{r7, lr}
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 759 0002 82B0     		sub	sp, sp, #8
 760              		.cfi_def_cfa_offset 16
 761 0004 00AF     		add	r7, sp, #0
 762              		.cfi_def_cfa_register 7
 387:.\main.c      ****     // update each sensor with the maximum reading so far
 388:.\main.c      ****     int i;
 389:.\main.c      ****     for (i = 0; i < NUM_SENSORS; i++){
 763              		.loc 1 389 0
 764 0006 0023     		movs	r3, #0
 765 0008 7B60     		str	r3, [r7, #4]
 766 000a 15E0     		b	.L32
 767              	.L34:
 768              	.LBB2:
 390:.\main.c      ****         int reading = getValForChannel(i);
 769              		.loc 1 390 0
 770 000c 7B68     		ldr	r3, [r7, #4]
 771 000e 9BB2     		uxth	r3, r3
 772 0010 1BB2     		sxth	r3, r3
 773 0012 1846     		mov	r0, r3
 774 0014 FFF7FEFF 		bl	getValForChannel
 775 0018 3860     		str	r0, [r7]
 391:.\main.c      ****         if (reading > adc_readings[i]) {
 776              		.loc 1 391 0
 777 001a 234A     		ldr	r2, .L39
 778 001c 7B68     		ldr	r3, [r7, #4]
 779 001e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 780 0022 3B68     		ldr	r3, [r7]
 781 0024 9A42     		cmp	r2, r3
 782 0026 04DA     		bge	.L33
 392:.\main.c      ****             adc_readings[i] = reading;
 783              		.loc 1 392 0
 784 0028 1F49     		ldr	r1, .L39
 785 002a 7B68     		ldr	r3, [r7, #4]
 786 002c 3A68     		ldr	r2, [r7]
 787 002e 41F82320 		str	r2, [r1, r3, lsl #2]
 788              	.L33:
 789              	.LBE2:
 389:.\main.c      ****         int reading = getValForChannel(i);
 790              		.loc 1 389 0 discriminator 2
 791 0032 7B68     		ldr	r3, [r7, #4]
 792 0034 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 22


 793 0036 7B60     		str	r3, [r7, #4]
 794              	.L32:
 389:.\main.c      ****         int reading = getValForChannel(i);
 795              		.loc 1 389 0 is_stmt 0 discriminator 1
 796 0038 7B68     		ldr	r3, [r7, #4]
 797 003a 052B     		cmp	r3, #5
 798 003c E6DD     		ble	.L34
 393:.\main.c      ****         }
 394:.\main.c      ****     }
 395:.\main.c      **** 
 396:.\main.c      ****     sample_count++;
 799              		.loc 1 396 0 is_stmt 1
 800 003e 1B4B     		ldr	r3, .L39+4
 801 0040 1B68     		ldr	r3, [r3]
 802 0042 0133     		adds	r3, r3, #1
 803 0044 194A     		ldr	r2, .L39+4
 804 0046 1360     		str	r3, [r2]
 397:.\main.c      ****     if (sample_count == ADC_READINGS_SIZE){
 805              		.loc 1 397 0
 806 0048 184B     		ldr	r3, .L39+4
 807 004a 1B68     		ldr	r3, [r3]
 808 004c 5A2B     		cmp	r3, #90
 809 004e 25D1     		bne	.L35
 398:.\main.c      ****         // Black = 1 (high voltage level)
 399:.\main.c      ****         for (i = 0; i < NUM_SENSORS; i++){
 810              		.loc 1 399 0
 811 0050 0023     		movs	r3, #0
 812 0052 7B60     		str	r3, [r7, #4]
 813 0054 18E0     		b	.L36
 814              	.L37:
 400:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 815              		.loc 1 400 0 discriminator 3
 816 0056 144A     		ldr	r2, .L39
 817 0058 7B68     		ldr	r3, [r7, #4]
 818 005a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 819 005e 40F22B12 		movw	r2, #299
 820 0062 9342     		cmp	r3, r2
 821 0064 D4BF     		ite	le
 822 0066 0123     		movle	r3, #1
 823 0068 0023     		movgt	r3, #0
 824 006a DBB2     		uxtb	r3, r3
 825 006c D9B2     		uxtb	r1, r3
 826 006e 104A     		ldr	r2, .L39+8
 827 0070 7B68     		ldr	r3, [r7, #4]
 828 0072 1344     		add	r3, r3, r2
 829 0074 0A46     		mov	r2, r1
 830 0076 1A70     		strb	r2, [r3]
 401:.\main.c      ****             adc_readings[i] = 0; // Reset max value from samples
 831              		.loc 1 401 0 discriminator 3
 832 0078 0B4A     		ldr	r2, .L39
 833 007a 7B68     		ldr	r3, [r7, #4]
 834 007c 0021     		movs	r1, #0
 835 007e 42F82310 		str	r1, [r2, r3, lsl #2]
 399:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 836              		.loc 1 399 0 discriminator 3
 837 0082 7B68     		ldr	r3, [r7, #4]
 838 0084 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 23


 839 0086 7B60     		str	r3, [r7, #4]
 840              	.L36:
 399:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 841              		.loc 1 399 0 is_stmt 0 discriminator 1
 842 0088 7B68     		ldr	r3, [r7, #4]
 843 008a 052B     		cmp	r3, #5
 844 008c E3DD     		ble	.L37
 402:.\main.c      ****         }
 403:.\main.c      ****         ADC_DEBUG_Write(1);
 845              		.loc 1 403 0 is_stmt 1
 846 008e 0120     		movs	r0, #1
 847 0090 FFF7FEFF 		bl	ADC_DEBUG_Write
 404:.\main.c      ****         sample_count = 0;
 848              		.loc 1 404 0
 849 0094 054B     		ldr	r3, .L39+4
 850 0096 0022     		movs	r2, #0
 851 0098 1A60     		str	r2, [r3]
 852 009a 02E0     		b	.L31
 853              	.L35:
 405:.\main.c      ****     }
 406:.\main.c      ****     else ADC_DEBUG_Write(0);
 854              		.loc 1 406 0
 855 009c 0020     		movs	r0, #0
 856 009e FFF7FEFF 		bl	ADC_DEBUG_Write
 857              	.L31:
 407:.\main.c      **** }
 858              		.loc 1 407 0
 859 00a2 0837     		adds	r7, r7, #8
 860              		.cfi_def_cfa_offset 8
 861 00a4 BD46     		mov	sp, r7
 862              		.cfi_def_cfa_register 13
 863              		@ sp needed
 864 00a6 80BD     		pop	{r7, pc}
 865              	.L40:
 866              		.align	2
 867              	.L39:
 868 00a8 00000000 		.word	adc_readings
 869 00ac 00000000 		.word	sample_count
 870 00b0 00000000 		.word	sensor_readings
 871              		.cfi_endproc
 872              	.LFE69:
 873              		.size	updateSensorValues, .-updateSensorValues
 874              		.section	.text.changeLeftWheelSpeed,"ax",%progbits
 875              		.align	2
 876              		.global	changeLeftWheelSpeed
 877              		.thumb
 878              		.thumb_func
 879              		.type	changeLeftWheelSpeed, %function
 880              	changeLeftWheelSpeed:
 881              	.LFB70:
 408:.\main.c      **** 
 409:.\main.c      **** void changeLeftWheelSpeed(int amount) {
 882              		.loc 1 409 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 16
 885              		@ frame_needed = 1, uses_anonymous_args = 0
 886 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 24


 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 7, -8
 889              		.cfi_offset 14, -4
 890 0002 84B0     		sub	sp, sp, #16
 891              		.cfi_def_cfa_offset 24
 892 0004 00AF     		add	r7, sp, #0
 893              		.cfi_def_cfa_register 7
 894 0006 7860     		str	r0, [r7, #4]
 410:.\main.c      ****     int new_value = PWM_1_ReadCompare() + amount;
 895              		.loc 1 410 0
 896 0008 FFF7FEFF 		bl	PWM_1_ReadCompare
 897 000c 0346     		mov	r3, r0
 898 000e 1A46     		mov	r2, r3
 899 0010 7B68     		ldr	r3, [r7, #4]
 900 0012 1344     		add	r3, r3, r2
 901 0014 FB60     		str	r3, [r7, #12]
 411:.\main.c      ****     PWM_1_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 902              		.loc 1 411 0
 903 0016 FB68     		ldr	r3, [r7, #12]
 904 0018 23EAE373 		bic	r3, r3, r3, asr #31
 905 001c 9BB2     		uxth	r3, r3
 906 001e 1846     		mov	r0, r3
 907 0020 FFF7FEFF 		bl	PWM_1_WriteCompare
 412:.\main.c      **** }
 908              		.loc 1 412 0
 909 0024 1037     		adds	r7, r7, #16
 910              		.cfi_def_cfa_offset 8
 911 0026 BD46     		mov	sp, r7
 912              		.cfi_def_cfa_register 13
 913              		@ sp needed
 914 0028 80BD     		pop	{r7, pc}
 915              		.cfi_endproc
 916              	.LFE70:
 917              		.size	changeLeftWheelSpeed, .-changeLeftWheelSpeed
 918 002a 00BF     		.section	.text.changeRightWheelSpeed,"ax",%progbits
 919              		.align	2
 920              		.global	changeRightWheelSpeed
 921              		.thumb
 922              		.thumb_func
 923              		.type	changeRightWheelSpeed, %function
 924              	changeRightWheelSpeed:
 925              	.LFB71:
 413:.\main.c      **** 
 414:.\main.c      **** void changeRightWheelSpeed(int amount){
 926              		.loc 1 414 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 16
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930 0000 80B5     		push	{r7, lr}
 931              		.cfi_def_cfa_offset 8
 932              		.cfi_offset 7, -8
 933              		.cfi_offset 14, -4
 934 0002 84B0     		sub	sp, sp, #16
 935              		.cfi_def_cfa_offset 24
 936 0004 00AF     		add	r7, sp, #0
 937              		.cfi_def_cfa_register 7
 938 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 25


 415:.\main.c      ****     int new_value = PWM_2_ReadCompare() + amount;
 939              		.loc 1 415 0
 940 0008 FFF7FEFF 		bl	PWM_2_ReadCompare
 941 000c 0346     		mov	r3, r0
 942 000e 1A46     		mov	r2, r3
 943 0010 7B68     		ldr	r3, [r7, #4]
 944 0012 1344     		add	r3, r3, r2
 945 0014 FB60     		str	r3, [r7, #12]
 416:.\main.c      ****     PWM_2_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 946              		.loc 1 416 0
 947 0016 FB68     		ldr	r3, [r7, #12]
 948 0018 23EAE373 		bic	r3, r3, r3, asr #31
 949 001c 9BB2     		uxth	r3, r3
 950 001e 1846     		mov	r0, r3
 951 0020 FFF7FEFF 		bl	PWM_2_WriteCompare
 417:.\main.c      **** }
 952              		.loc 1 417 0
 953 0024 1037     		adds	r7, r7, #16
 954              		.cfi_def_cfa_offset 8
 955 0026 BD46     		mov	sp, r7
 956              		.cfi_def_cfa_register 13
 957              		@ sp needed
 958 0028 80BD     		pop	{r7, pc}
 959              		.cfi_endproc
 960              	.LFE71:
 961              		.size	changeRightWheelSpeed, .-changeRightWheelSpeed
 962 002a 00BF     		.section	.text.correctSpeed,"ax",%progbits
 963              		.align	2
 964              		.global	correctSpeed
 965              		.thumb
 966              		.thumb_func
 967              		.type	correctSpeed, %function
 968              	correctSpeed:
 969              	.LFB72:
 418:.\main.c      **** 
 419:.\main.c      **** /* ## SPEED CONTROL ## 
 420:.\main.c      **** * Algorithm: Get difference between counts, compare to
 421:.\main.c      **** * the difference we expect. Add the correction to the PWM.
 422:.\main.c      **** */
 423:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel){    
 970              		.loc 1 423 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 88
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974 0000 80B5     		push	{r7, lr}
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 7, -8
 977              		.cfi_offset 14, -4
 978 0002 96B0     		sub	sp, sp, #88
 979              		.cfi_def_cfa_offset 96
 980 0004 00AF     		add	r7, sp, #0
 981              		.cfi_def_cfa_register 7
 982 0006 F860     		str	r0, [r7, #12]
 983 0008 B960     		str	r1, [r7, #8]
 984 000a 7A60     		str	r2, [r7, #4]
 985 000c 3B60     		str	r3, [r7]
 424:.\main.c      ****     
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 26


 425:.\main.c      ****     // Account for overflow edge or other unknown error
 426:.\main.c      ****     if (prevCount > count) return;
 986              		.loc 1 426 0
 987 000e FA68     		ldr	r2, [r7, #12]
 988 0010 BB68     		ldr	r3, [r7, #8]
 989 0012 9A42     		cmp	r2, r3
 990 0014 00DD     		ble	.L44
 991 0016 19E0     		b	.L43
 992              	.L44:
 427:.\main.c      ****     
 428:.\main.c      ****     int diff_count = abs(count - prevCount);
 993              		.loc 1 428 0
 994 0018 BA68     		ldr	r2, [r7, #8]
 995 001a FB68     		ldr	r3, [r7, #12]
 996 001c D31A     		subs	r3, r2, r3
 997 001e 002B     		cmp	r3, #0
 998 0020 B8BF     		it	lt
 999 0022 5B42     		rsblt	r3, r3, #0
 1000 0024 7B65     		str	r3, [r7, #84]
 429:.\main.c      ****     
 430:.\main.c      ****     // Account for a situation where PSoc is powered but wheels aren't moving
 431:.\main.c      ****     if (diff_count == 0) return;
 1001              		.loc 1 431 0
 1002 0026 7B6D     		ldr	r3, [r7, #84]
 1003 0028 002B     		cmp	r3, #0
 1004 002a 00D1     		bne	.L46
 1005              		.loc 1 431 0 is_stmt 0 discriminator 2
 1006 002c 0EE0     		b	.L43
 1007              	.L46:
 432:.\main.c      ****     
 433:.\main.c      ****     char msg[64];
 434:.\main.c      ****         
 435:.\main.c      ****     /* Determine correction that must be applied to the wheel
 436:.\main.c      ****     * desired_count > diff_count :-> wheel is slow; increase PWM
 437:.\main.c      ****     * desired_count < diff_count :-> wheel is fast; decrease PWM
 438:.\main.c      ****     * desired_count == diff_count :-> wheel is stable; do nothing
 439:.\main.c      ****     */
 440:.\main.c      ****     int correction = desired_count-diff_count;
 1008              		.loc 1 440 0 is_stmt 1
 1009 002e 7A68     		ldr	r2, [r7, #4]
 1010 0030 7B6D     		ldr	r3, [r7, #84]
 1011 0032 D31A     		subs	r3, r2, r3
 1012 0034 3B65     		str	r3, [r7, #80]
 441:.\main.c      ****     
 442:.\main.c      ****     // Apply the speed correction to the appropriate wheel          
 443:.\main.c      ****     if (isLeftWheel){
 1013              		.loc 1 443 0
 1014 0036 3B68     		ldr	r3, [r7]
 1015 0038 002B     		cmp	r3, #0
 1016 003a 03D0     		beq	.L47
 444:.\main.c      ****         changeLeftWheelSpeed(correction);
 1017              		.loc 1 444 0
 1018 003c 386D     		ldr	r0, [r7, #80]
 1019 003e FFF7FEFF 		bl	changeLeftWheelSpeed
 1020 0042 02E0     		b	.L48
 1021              	.L47:
 445:.\main.c      ****     }
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 27


 446:.\main.c      ****     else{
 447:.\main.c      ****         changeRightWheelSpeed(correction);
 1022              		.loc 1 447 0
 1023 0044 386D     		ldr	r0, [r7, #80]
 1024 0046 FFF7FEFF 		bl	changeRightWheelSpeed
 1025              	.L48:
 448:.\main.c      ****     }
 449:.\main.c      ****     
 450:.\main.c      ****     return;
 1026              		.loc 1 450 0 discriminator 3
 1027 004a 00BF     		nop
 1028              	.L43:
 451:.\main.c      **** }
 1029              		.loc 1 451 0
 1030 004c 5837     		adds	r7, r7, #88
 1031              		.cfi_def_cfa_offset 8
 1032 004e BD46     		mov	sp, r7
 1033              		.cfi_def_cfa_register 13
 1034              		@ sp needed
 1035 0050 80BD     		pop	{r7, pc}
 1036              		.cfi_endproc
 1037              	.LFE72:
 1038              		.size	correctSpeed, .-correctSpeed
 1039 0052 00BF     		.section	.text.setWheelDirection,"ax",%progbits
 1040              		.align	2
 1041              		.global	setWheelDirection
 1042              		.thumb
 1043              		.thumb_func
 1044              		.type	setWheelDirection, %function
 1045              	setWheelDirection:
 1046              	.LFB73:
 452:.\main.c      **** 
 453:.\main.c      **** /* Set wheel direction explicitly
 454:.\main.c      **** * Parameters are boolean, UNKNOWN can be passed
 455:.\main.c      **** * in if you wish the value to be unchanged
 456:.\main.c      **** */
 457:.\main.c      **** void setWheelDirection(int leftIsForward, int rightIsForward){
 1047              		.loc 1 457 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 8
 1050              		@ frame_needed = 1, uses_anonymous_args = 0
 1051 0000 80B5     		push	{r7, lr}
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 7, -8
 1054              		.cfi_offset 14, -4
 1055 0002 82B0     		sub	sp, sp, #8
 1056              		.cfi_def_cfa_offset 16
 1057 0004 00AF     		add	r7, sp, #0
 1058              		.cfi_def_cfa_register 7
 1059 0006 7860     		str	r0, [r7, #4]
 1060 0008 3960     		str	r1, [r7]
 458:.\main.c      ****     INV1_Write(!leftIsForward);
 1061              		.loc 1 458 0
 1062 000a 7B68     		ldr	r3, [r7, #4]
 1063 000c 002B     		cmp	r3, #0
 1064 000e 0CBF     		ite	eq
 1065 0010 0123     		moveq	r3, #1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 28


 1066 0012 0023     		movne	r3, #0
 1067 0014 DBB2     		uxtb	r3, r3
 1068 0016 1846     		mov	r0, r3
 1069 0018 FFF7FEFF 		bl	INV1_Write
 459:.\main.c      ****     INV2_Write(rightIsForward);
 1070              		.loc 1 459 0
 1071 001c 3B68     		ldr	r3, [r7]
 1072 001e DBB2     		uxtb	r3, r3
 1073 0020 1846     		mov	r0, r3
 1074 0022 FFF7FEFF 		bl	INV2_Write
 460:.\main.c      **** }
 1075              		.loc 1 460 0
 1076 0026 0837     		adds	r7, r7, #8
 1077              		.cfi_def_cfa_offset 8
 1078 0028 BD46     		mov	sp, r7
 1079              		.cfi_def_cfa_register 13
 1080              		@ sp needed
 1081 002a 80BD     		pop	{r7, pc}
 1082              		.cfi_endproc
 1083              	.LFE73:
 1084              		.size	setWheelDirection, .-setWheelDirection
 1085              		.section	.text.turnLeft,"ax",%progbits
 1086              		.align	2
 1087              		.global	turnLeft
 1088              		.thumb
 1089              		.thumb_func
 1090              		.type	turnLeft, %function
 1091              	turnLeft:
 1092              	.LFB74:
 461:.\main.c      **** 
 462:.\main.c      **** void turnLeft() {
 1093              		.loc 1 462 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 1, uses_anonymous_args = 0
 1097 0000 80B5     		push	{r7, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 7, -8
 1100              		.cfi_offset 14, -4
 1101 0002 00AF     		add	r7, sp, #0
 1102              		.cfi_def_cfa_register 7
 463:.\main.c      ****     PWM_1_WriteCompare(0);
 1103              		.loc 1 463 0
 1104 0004 0020     		movs	r0, #0
 1105 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 464:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1106              		.loc 1 464 0
 1107 000a 4FF4E170 		mov	r0, #450
 1108 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 465:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1109              		.loc 1 465 0
 1110 0012 08E0     		b	.L52
 1111              	.L53:
 466:.\main.c      ****         if (adc_flag) {
 1112              		.loc 1 466 0
 1113 0014 084B     		ldr	r3, .L54
 1114 0016 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 29


 1115 0018 002B     		cmp	r3, #0
 1116 001a 04D0     		beq	.L52
 467:.\main.c      ****             updateSensorValues();
 1117              		.loc 1 467 0
 1118 001c FFF7FEFF 		bl	updateSensorValues
 468:.\main.c      ****             adc_flag = FALSE;
 1119              		.loc 1 468 0
 1120 0020 054B     		ldr	r3, .L54
 1121 0022 0022     		movs	r2, #0
 1122 0024 1A60     		str	r2, [r3]
 1123              	.L52:
 465:.\main.c      ****         if (adc_flag) {
 1124              		.loc 1 465 0
 1125 0026 054B     		ldr	r3, .L54+4
 1126 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1127 002a 002B     		cmp	r3, #0
 1128 002c F2D0     		beq	.L53
 469:.\main.c      ****         }
 470:.\main.c      ****     }
 471:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1129              		.loc 1 471 0
 1130 002e 4FF4E170 		mov	r0, #450
 1131 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
 472:.\main.c      **** }
 1132              		.loc 1 472 0
 1133 0036 80BD     		pop	{r7, pc}
 1134              	.L55:
 1135              		.align	2
 1136              	.L54:
 1137 0038 00000000 		.word	adc_flag
 1138 003c 00000000 		.word	sensor_readings
 1139              		.cfi_endproc
 1140              	.LFE74:
 1141              		.size	turnLeft, .-turnLeft
 1142              		.section	.text.turnRight,"ax",%progbits
 1143              		.align	2
 1144              		.global	turnRight
 1145              		.thumb
 1146              		.thumb_func
 1147              		.type	turnRight, %function
 1148              	turnRight:
 1149              	.LFB75:
 473:.\main.c      **** 
 474:.\main.c      **** void turnRight() {
 1150              		.loc 1 474 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154 0000 80B5     		push	{r7, lr}
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 475:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1160              		.loc 1 475 0
 1161 0004 4FF4E170 		mov	r0, #450
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 30


 1162 0008 FFF7FEFF 		bl	PWM_1_WriteCompare
 476:.\main.c      ****     PWM_2_WriteCompare(0);
 1163              		.loc 1 476 0
 1164 000c 0020     		movs	r0, #0
 1165 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 477:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1166              		.loc 1 477 0
 1167 0012 08E0     		b	.L57
 1168              	.L58:
 478:.\main.c      ****         if (adc_flag) {
 1169              		.loc 1 478 0
 1170 0014 084B     		ldr	r3, .L59
 1171 0016 1B68     		ldr	r3, [r3]
 1172 0018 002B     		cmp	r3, #0
 1173 001a 04D0     		beq	.L57
 479:.\main.c      ****             updateSensorValues();
 1174              		.loc 1 479 0
 1175 001c FFF7FEFF 		bl	updateSensorValues
 480:.\main.c      ****             adc_flag = FALSE;
 1176              		.loc 1 480 0
 1177 0020 054B     		ldr	r3, .L59
 1178 0022 0022     		movs	r2, #0
 1179 0024 1A60     		str	r2, [r3]
 1180              	.L57:
 477:.\main.c      ****         if (adc_flag) {
 1181              		.loc 1 477 0
 1182 0026 054B     		ldr	r3, .L59+4
 1183 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1184 002a 002B     		cmp	r3, #0
 1185 002c F2D0     		beq	.L58
 481:.\main.c      ****         }
 482:.\main.c      ****     }
 483:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1186              		.loc 1 483 0
 1187 002e 4FF4E170 		mov	r0, #450
 1188 0032 FFF7FEFF 		bl	PWM_2_WriteCompare
 484:.\main.c      **** }
 1189              		.loc 1 484 0
 1190 0036 80BD     		pop	{r7, pc}
 1191              	.L60:
 1192              		.align	2
 1193              	.L59:
 1194 0038 00000000 		.word	adc_flag
 1195 003c 00000000 		.word	sensor_readings
 1196              		.cfi_endproc
 1197              	.LFE75:
 1198              		.size	turnRight, .-turnRight
 1199              		.section	.text.sharpTurnLeft,"ax",%progbits
 1200              		.align	2
 1201              		.global	sharpTurnLeft
 1202              		.thumb
 1203              		.thumb_func
 1204              		.type	sharpTurnLeft, %function
 1205              	sharpTurnLeft:
 1206              	.LFB76:
 485:.\main.c      **** 
 486:.\main.c      **** void sharpTurnLeft(int *right_wheel_count, int *left_wheel_count) {
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 31


 1207              		.loc 1 486 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 16
 1210              		@ frame_needed = 1, uses_anonymous_args = 0
 1211 0000 80B5     		push	{r7, lr}
 1212              		.cfi_def_cfa_offset 8
 1213              		.cfi_offset 7, -8
 1214              		.cfi_offset 14, -4
 1215 0002 84B0     		sub	sp, sp, #16
 1216              		.cfi_def_cfa_offset 24
 1217 0004 00AF     		add	r7, sp, #0
 1218              		.cfi_def_cfa_register 7
 1219 0006 7860     		str	r0, [r7, #4]
 1220 0008 3960     		str	r1, [r7]
 487:.\main.c      ****     int prevCountM1 = 0;
 1221              		.loc 1 487 0
 1222 000a 0023     		movs	r3, #0
 1223 000c FB60     		str	r3, [r7, #12]
 488:.\main.c      ****     int prevCountM2 = 0;
 1224              		.loc 1 488 0
 1225 000e 0023     		movs	r3, #0
 1226 0010 BB60     		str	r3, [r7, #8]
 489:.\main.c      ****     
 490:.\main.c      ****     // go until we reach the line
 491:.\main.c      ****     while (!sensor_readings[BOTTOM_LEFT_SENSOR]) {
 1227              		.loc 1 491 0
 1228 0012 45E0     		b	.L62
 1229              	.L66:
 492:.\main.c      ****         if (adc_flag) {
 1230              		.loc 1 492 0
 1231 0014 394B     		ldr	r3, .L69
 1232 0016 1B68     		ldr	r3, [r3]
 1233 0018 002B     		cmp	r3, #0
 1234 001a 04D0     		beq	.L63
 493:.\main.c      ****             updateSensorValues();
 1235              		.loc 1 493 0
 1236 001c FFF7FEFF 		bl	updateSensorValues
 494:.\main.c      ****             adc_flag = FALSE;
 1237              		.loc 1 494 0
 1238 0020 364B     		ldr	r3, .L69
 1239 0022 0022     		movs	r2, #0
 1240 0024 1A60     		str	r2, [r3]
 1241              	.L63:
 495:.\main.c      ****         }
 496:.\main.c      ****         
 497:.\main.c      ****          // New count values from encoder are ready
 498:.\main.c      ****         if (timer_flag){
 1242              		.loc 1 498 0
 1243 0026 364B     		ldr	r3, .L69+4
 1244 0028 1B68     		ldr	r3, [r3]
 1245 002a 002B     		cmp	r3, #0
 1246 002c 38D0     		beq	.L62
 499:.\main.c      ****             isr_TS_Disable();
 1247              		.loc 1 499 0
 1248 002e FFF7FEFF 		bl	isr_TS_Disable
 500:.\main.c      ****             
 501:.\main.c      ****             // Correct speed
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 32


 502:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 1249              		.loc 1 502 0
 1250 0032 344B     		ldr	r3, .L69+8
 1251 0034 1A68     		ldr	r2, [r3]
 1252 0036 3B68     		ldr	r3, [r7]
 1253 0038 1B68     		ldr	r3, [r3]
 1254 003a F868     		ldr	r0, [r7, #12]
 1255 003c 1146     		mov	r1, r2
 1256 003e 1A46     		mov	r2, r3
 1257 0040 0123     		movs	r3, #1
 1258 0042 FFF7FEFF 		bl	correctSpeed
 503:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 1259              		.loc 1 503 0
 1260 0046 304B     		ldr	r3, .L69+12
 1261 0048 1A68     		ldr	r2, [r3]
 1262 004a 7B68     		ldr	r3, [r7, #4]
 1263 004c 1B68     		ldr	r3, [r3]
 1264 004e B868     		ldr	r0, [r7, #8]
 1265 0050 1146     		mov	r1, r2
 1266 0052 1A46     		mov	r2, r3
 1267 0054 0023     		movs	r3, #0
 1268 0056 FFF7FEFF 		bl	correctSpeed
 504:.\main.c      ****             
 505:.\main.c      ****             *left_wheel_count -= SLOW_DOWN_SPEED;
 1269              		.loc 1 505 0
 1270 005a 3B68     		ldr	r3, [r7]
 1271 005c 1B68     		ldr	r3, [r3]
 1272 005e 5A1E     		subs	r2, r3, #1
 1273 0060 3B68     		ldr	r3, [r7]
 1274 0062 1A60     		str	r2, [r3]
 506:.\main.c      ****             *right_wheel_count -= SLOW_DOWN_SPEED;
 1275              		.loc 1 506 0
 1276 0064 7B68     		ldr	r3, [r7, #4]
 1277 0066 1B68     		ldr	r3, [r3]
 1278 0068 5A1E     		subs	r2, r3, #1
 1279 006a 7B68     		ldr	r3, [r7, #4]
 1280 006c 1A60     		str	r2, [r3]
 507:.\main.c      ****             if (*right_wheel_count < MIN_SPEED) {
 1281              		.loc 1 507 0
 1282 006e 7B68     		ldr	r3, [r7, #4]
 1283 0070 1B68     		ldr	r3, [r3]
 1284 0072 032B     		cmp	r3, #3
 1285 0074 02DC     		bgt	.L64
 508:.\main.c      ****                 *right_wheel_count = MIN_SPEED;
 1286              		.loc 1 508 0
 1287 0076 7B68     		ldr	r3, [r7, #4]
 1288 0078 0422     		movs	r2, #4
 1289 007a 1A60     		str	r2, [r3]
 1290              	.L64:
 509:.\main.c      ****             }
 510:.\main.c      ****             if (*left_wheel_count < MIN_SPEED) {
 1291              		.loc 1 510 0
 1292 007c 3B68     		ldr	r3, [r7]
 1293 007e 1B68     		ldr	r3, [r3]
 1294 0080 032B     		cmp	r3, #3
 1295 0082 02DC     		bgt	.L65
 511:.\main.c      ****                 *left_wheel_count = MIN_SPEED;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 33


 1296              		.loc 1 511 0
 1297 0084 3B68     		ldr	r3, [r7]
 1298 0086 0422     		movs	r2, #4
 1299 0088 1A60     		str	r2, [r3]
 1300              	.L65:
 512:.\main.c      ****             }
 513:.\main.c      ****             
 514:.\main.c      ****             // Update previous values
 515:.\main.c      ****             prevCountM1 = countM1;
 1301              		.loc 1 515 0
 1302 008a 1E4B     		ldr	r3, .L69+8
 1303 008c 1B68     		ldr	r3, [r3]
 1304 008e FB60     		str	r3, [r7, #12]
 516:.\main.c      ****             prevCountM2 = countM2;
 1305              		.loc 1 516 0
 1306 0090 1D4B     		ldr	r3, .L69+12
 1307 0092 1B68     		ldr	r3, [r3]
 1308 0094 BB60     		str	r3, [r7, #8]
 517:.\main.c      ****             
 518:.\main.c      ****             // Reset flag
 519:.\main.c      ****             timer_flag = FALSE;
 1309              		.loc 1 519 0
 1310 0096 1A4B     		ldr	r3, .L69+4
 1311 0098 0022     		movs	r2, #0
 1312 009a 1A60     		str	r2, [r3]
 520:.\main.c      ****             
 521:.\main.c      ****             isr_TS_Enable();
 1313              		.loc 1 521 0
 1314 009c FFF7FEFF 		bl	isr_TS_Enable
 1315              	.L62:
 491:.\main.c      ****         if (adc_flag) {
 1316              		.loc 1 491 0
 1317 00a0 1A4B     		ldr	r3, .L69+16
 1318 00a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1319 00a4 002B     		cmp	r3, #0
 1320 00a6 B5D0     		beq	.L66
 522:.\main.c      ****         }
 523:.\main.c      ****         
 524:.\main.c      ****     }
 525:.\main.c      ****     
 526:.\main.c      ****     // make the turn
 527:.\main.c      ****     setWheelDirection(FALSE, TRUE);
 1321              		.loc 1 527 0
 1322 00a8 0020     		movs	r0, #0
 1323 00aa 0121     		movs	r1, #1
 1324 00ac FFF7FEFF 		bl	setWheelDirection
 528:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1325              		.loc 1 528 0
 1326 00b0 4FF4E170 		mov	r0, #450
 1327 00b4 FFF7FEFF 		bl	PWM_1_WriteCompare
 529:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1328              		.loc 1 529 0
 1329 00b8 4FF4E170 		mov	r0, #450
 1330 00bc FFF7FEFF 		bl	PWM_2_WriteCompare
 530:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1331              		.loc 1 530 0
 1332 00c0 08E0     		b	.L67
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 34


 1333              	.L68:
 531:.\main.c      ****         if (adc_flag) {
 1334              		.loc 1 531 0
 1335 00c2 0E4B     		ldr	r3, .L69
 1336 00c4 1B68     		ldr	r3, [r3]
 1337 00c6 002B     		cmp	r3, #0
 1338 00c8 04D0     		beq	.L67
 532:.\main.c      ****             updateSensorValues();
 1339              		.loc 1 532 0
 1340 00ca FFF7FEFF 		bl	updateSensorValues
 533:.\main.c      ****             adc_flag = FALSE;
 1341              		.loc 1 533 0
 1342 00ce 0B4B     		ldr	r3, .L69
 1343 00d0 0022     		movs	r2, #0
 1344 00d2 1A60     		str	r2, [r3]
 1345              	.L67:
 530:.\main.c      ****         if (adc_flag) {
 1346              		.loc 1 530 0
 1347 00d4 0D4B     		ldr	r3, .L69+16
 1348 00d6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1349 00d8 002B     		cmp	r3, #0
 1350 00da F2D0     		beq	.L68
 534:.\main.c      ****         }
 535:.\main.c      ****     }
 536:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1351              		.loc 1 536 0
 1352 00dc 0120     		movs	r0, #1
 1353 00de 0121     		movs	r1, #1
 1354 00e0 FFF7FEFF 		bl	setWheelDirection
 537:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1355              		.loc 1 537 0
 1356 00e4 4FF4E170 		mov	r0, #450
 1357 00e8 FFF7FEFF 		bl	PWM_1_WriteCompare
 538:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1358              		.loc 1 538 0
 1359 00ec 4FF4E170 		mov	r0, #450
 1360 00f0 FFF7FEFF 		bl	PWM_2_WriteCompare
 539:.\main.c      **** }
 1361              		.loc 1 539 0
 1362 00f4 1037     		adds	r7, r7, #16
 1363              		.cfi_def_cfa_offset 8
 1364 00f6 BD46     		mov	sp, r7
 1365              		.cfi_def_cfa_register 13
 1366              		@ sp needed
 1367 00f8 80BD     		pop	{r7, pc}
 1368              	.L70:
 1369 00fa 00BF     		.align	2
 1370              	.L69:
 1371 00fc 00000000 		.word	adc_flag
 1372 0100 00000000 		.word	timer_flag
 1373 0104 00000000 		.word	countM1
 1374 0108 00000000 		.word	countM2
 1375 010c 00000000 		.word	sensor_readings
 1376              		.cfi_endproc
 1377              	.LFE76:
 1378              		.size	sharpTurnLeft, .-sharpTurnLeft
 1379              		.section	.text.sharpTurnRight,"ax",%progbits
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 35


 1380              		.align	2
 1381              		.global	sharpTurnRight
 1382              		.thumb
 1383              		.thumb_func
 1384              		.type	sharpTurnRight, %function
 1385              	sharpTurnRight:
 1386              	.LFB77:
 540:.\main.c      **** 
 541:.\main.c      **** void sharpTurnRight(int *right_wheel_count, int *left_wheel_count) {
 1387              		.loc 1 541 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 16
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 80B5     		push	{r7, lr}
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 7, -8
 1394              		.cfi_offset 14, -4
 1395 0002 84B0     		sub	sp, sp, #16
 1396              		.cfi_def_cfa_offset 24
 1397 0004 00AF     		add	r7, sp, #0
 1398              		.cfi_def_cfa_register 7
 1399 0006 7860     		str	r0, [r7, #4]
 1400 0008 3960     		str	r1, [r7]
 542:.\main.c      ****     int prevCountM1 = 0;
 1401              		.loc 1 542 0
 1402 000a 0023     		movs	r3, #0
 1403 000c FB60     		str	r3, [r7, #12]
 543:.\main.c      ****     int prevCountM2 = 0;
 1404              		.loc 1 543 0
 1405 000e 0023     		movs	r3, #0
 1406 0010 BB60     		str	r3, [r7, #8]
 544:.\main.c      ****     
 545:.\main.c      ****     // go until we reach the line
 546:.\main.c      ****     while (!sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 1407              		.loc 1 546 0
 1408 0012 3CE0     		b	.L72
 1409              	.L75:
 547:.\main.c      ****         
 548:.\main.c      ****          // New count values from encoder are ready
 549:.\main.c      ****         if (timer_flag){
 1410              		.loc 1 549 0
 1411 0014 344B     		ldr	r3, .L78
 1412 0016 1B68     		ldr	r3, [r3]
 1413 0018 002B     		cmp	r3, #0
 1414 001a 38D0     		beq	.L72
 550:.\main.c      ****             isr_TS_Disable();
 1415              		.loc 1 550 0
 1416 001c FFF7FEFF 		bl	isr_TS_Disable
 551:.\main.c      ****             
 552:.\main.c      ****             // Correct speed
 553:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 1417              		.loc 1 553 0
 1418 0020 324B     		ldr	r3, .L78+4
 1419 0022 1A68     		ldr	r2, [r3]
 1420 0024 3B68     		ldr	r3, [r7]
 1421 0026 1B68     		ldr	r3, [r3]
 1422 0028 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 36


 1423 002a 1146     		mov	r1, r2
 1424 002c 1A46     		mov	r2, r3
 1425 002e 0123     		movs	r3, #1
 1426 0030 FFF7FEFF 		bl	correctSpeed
 554:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 1427              		.loc 1 554 0
 1428 0034 2E4B     		ldr	r3, .L78+8
 1429 0036 1A68     		ldr	r2, [r3]
 1430 0038 7B68     		ldr	r3, [r7, #4]
 1431 003a 1B68     		ldr	r3, [r3]
 1432 003c B868     		ldr	r0, [r7, #8]
 1433 003e 1146     		mov	r1, r2
 1434 0040 1A46     		mov	r2, r3
 1435 0042 0023     		movs	r3, #0
 1436 0044 FFF7FEFF 		bl	correctSpeed
 555:.\main.c      ****             
 556:.\main.c      ****             *left_wheel_count -= SLOW_DOWN_SPEED;
 1437              		.loc 1 556 0
 1438 0048 3B68     		ldr	r3, [r7]
 1439 004a 1B68     		ldr	r3, [r3]
 1440 004c 5A1E     		subs	r2, r3, #1
 1441 004e 3B68     		ldr	r3, [r7]
 1442 0050 1A60     		str	r2, [r3]
 557:.\main.c      ****             *right_wheel_count -= SLOW_DOWN_SPEED;
 1443              		.loc 1 557 0
 1444 0052 7B68     		ldr	r3, [r7, #4]
 1445 0054 1B68     		ldr	r3, [r3]
 1446 0056 5A1E     		subs	r2, r3, #1
 1447 0058 7B68     		ldr	r3, [r7, #4]
 1448 005a 1A60     		str	r2, [r3]
 558:.\main.c      ****             if (*right_wheel_count < MIN_SPEED) {
 1449              		.loc 1 558 0
 1450 005c 7B68     		ldr	r3, [r7, #4]
 1451 005e 1B68     		ldr	r3, [r3]
 1452 0060 032B     		cmp	r3, #3
 1453 0062 02DC     		bgt	.L73
 559:.\main.c      ****                 *right_wheel_count = MIN_SPEED;
 1454              		.loc 1 559 0
 1455 0064 7B68     		ldr	r3, [r7, #4]
 1456 0066 0422     		movs	r2, #4
 1457 0068 1A60     		str	r2, [r3]
 1458              	.L73:
 560:.\main.c      ****             }
 561:.\main.c      ****             if (*left_wheel_count < MIN_SPEED) {
 1459              		.loc 1 561 0
 1460 006a 3B68     		ldr	r3, [r7]
 1461 006c 1B68     		ldr	r3, [r3]
 1462 006e 032B     		cmp	r3, #3
 1463 0070 02DC     		bgt	.L74
 562:.\main.c      ****                 *left_wheel_count = MIN_SPEED;
 1464              		.loc 1 562 0
 1465 0072 3B68     		ldr	r3, [r7]
 1466 0074 0422     		movs	r2, #4
 1467 0076 1A60     		str	r2, [r3]
 1468              	.L74:
 563:.\main.c      ****             }
 564:.\main.c      ****             
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 37


 565:.\main.c      ****             // Update previous values
 566:.\main.c      ****             prevCountM1 = countM1;
 1469              		.loc 1 566 0
 1470 0078 1C4B     		ldr	r3, .L78+4
 1471 007a 1B68     		ldr	r3, [r3]
 1472 007c FB60     		str	r3, [r7, #12]
 567:.\main.c      ****             prevCountM2 = countM2;
 1473              		.loc 1 567 0
 1474 007e 1C4B     		ldr	r3, .L78+8
 1475 0080 1B68     		ldr	r3, [r3]
 1476 0082 BB60     		str	r3, [r7, #8]
 568:.\main.c      ****             
 569:.\main.c      ****             // Reset flag
 570:.\main.c      ****             timer_flag = FALSE;
 1477              		.loc 1 570 0
 1478 0084 184B     		ldr	r3, .L78
 1479 0086 0022     		movs	r2, #0
 1480 0088 1A60     		str	r2, [r3]
 571:.\main.c      ****             
 572:.\main.c      ****             isr_TS_Enable();
 1481              		.loc 1 572 0
 1482 008a FFF7FEFF 		bl	isr_TS_Enable
 1483              	.L72:
 546:.\main.c      ****         
 1484              		.loc 1 546 0
 1485 008e 194B     		ldr	r3, .L78+12
 1486 0090 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1487 0092 002B     		cmp	r3, #0
 1488 0094 BED0     		beq	.L75
 573:.\main.c      ****         }
 574:.\main.c      ****     }
 575:.\main.c      ****     
 576:.\main.c      ****     // make the turn
 577:.\main.c      ****     setWheelDirection(TRUE, FALSE);
 1489              		.loc 1 577 0
 1490 0096 0120     		movs	r0, #1
 1491 0098 0021     		movs	r1, #0
 1492 009a FFF7FEFF 		bl	setWheelDirection
 578:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1493              		.loc 1 578 0
 1494 009e 4FF4E170 		mov	r0, #450
 1495 00a2 FFF7FEFF 		bl	PWM_1_WriteCompare
 579:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1496              		.loc 1 579 0
 1497 00a6 4FF4E170 		mov	r0, #450
 1498 00aa FFF7FEFF 		bl	PWM_2_WriteCompare
 580:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1499              		.loc 1 580 0
 1500 00ae 08E0     		b	.L76
 1501              	.L77:
 581:.\main.c      ****         if (adc_flag) {
 1502              		.loc 1 581 0
 1503 00b0 114B     		ldr	r3, .L78+16
 1504 00b2 1B68     		ldr	r3, [r3]
 1505 00b4 002B     		cmp	r3, #0
 1506 00b6 04D0     		beq	.L76
 582:.\main.c      ****             updateSensorValues();
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 38


 1507              		.loc 1 582 0
 1508 00b8 FFF7FEFF 		bl	updateSensorValues
 583:.\main.c      ****             adc_flag = FALSE;
 1509              		.loc 1 583 0
 1510 00bc 0E4B     		ldr	r3, .L78+16
 1511 00be 0022     		movs	r2, #0
 1512 00c0 1A60     		str	r2, [r3]
 1513              	.L76:
 580:.\main.c      ****         if (adc_flag) {
 1514              		.loc 1 580 0
 1515 00c2 0C4B     		ldr	r3, .L78+12
 1516 00c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1517 00c6 002B     		cmp	r3, #0
 1518 00c8 F2D0     		beq	.L77
 584:.\main.c      ****         }
 585:.\main.c      ****     }
 586:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1519              		.loc 1 586 0
 1520 00ca 0120     		movs	r0, #1
 1521 00cc 0121     		movs	r1, #1
 1522 00ce FFF7FEFF 		bl	setWheelDirection
 587:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1523              		.loc 1 587 0
 1524 00d2 4FF4E170 		mov	r0, #450
 1525 00d6 FFF7FEFF 		bl	PWM_1_WriteCompare
 588:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1526              		.loc 1 588 0
 1527 00da 4FF4E170 		mov	r0, #450
 1528 00de FFF7FEFF 		bl	PWM_2_WriteCompare
 589:.\main.c      **** }
 1529              		.loc 1 589 0
 1530 00e2 1037     		adds	r7, r7, #16
 1531              		.cfi_def_cfa_offset 8
 1532 00e4 BD46     		mov	sp, r7
 1533              		.cfi_def_cfa_register 13
 1534              		@ sp needed
 1535 00e6 80BD     		pop	{r7, pc}
 1536              	.L79:
 1537              		.align	2
 1538              	.L78:
 1539 00e8 00000000 		.word	timer_flag
 1540 00ec 00000000 		.word	countM1
 1541 00f0 00000000 		.word	countM2
 1542 00f4 00000000 		.word	sensor_readings
 1543 00f8 00000000 		.word	adc_flag
 1544              		.cfi_endproc
 1545              	.LFE77:
 1546              		.size	sharpTurnRight, .-sharpTurnRight
 1547              		.section	.text.usbPutString,"ax",%progbits
 1548              		.align	2
 1549              		.global	usbPutString
 1550              		.thumb
 1551              		.thumb_func
 1552              		.type	usbPutString, %function
 1553              	usbPutString:
 1554              	.LFB78:
 590:.\main.c      **** //* ================== UNUSED FUNCTIONS ======================
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 39


 591:.\main.c      **** 
 592:.\main.c      **** /*
 593:.\main.c      **** * Function for performing a 90 degree turn
 594:.\main.c      **** * returns true once finished
 595:.\main.c      **** */
 596:.\main.c      **** //int8 performTurn(int isLeft){
 597:.\main.c      **** //    // Reset decoder measurements
 598:.\main.c      **** //    QuadDec_M1_SetCounter(0);
 599:.\main.c      **** //    QuadDec_M2_SetCounter(0);
 600:.\main.c      **** //    
 601:.\main.c      **** //    int M1_count, M2_count = 0;
 602:.\main.c      **** //    
 603:.\main.c      **** //    // Set PWMs to rotate
 604:.\main.c      **** //    PWM_1_WriteCompare(TURN_PWM_VAL);
 605:.\main.c      **** //    PWM_2_WriteCompare(TURN_PWM_VAL);
 606:.\main.c      **** //    
 607:.\main.c      **** //    // Set wheel direction for rotating on the spot
 608:.\main.c      **** //    if (isLeft){
 609:.\main.c      **** //        // left wheel moves backwarsd, right moves forwards
 610:.\main.c      **** //        setWheelDirection(FALSE, TRUE);}
 611:.\main.c      **** //    else {
 612:.\main.c      **** //        // right wheel moves forwards, left moves backwards
 613:.\main.c      **** //        setWheelDirection(TRUE, FALSE);
 614:.\main.c      **** //    }
 615:.\main.c      **** //    
 616:.\main.c      **** //    while (M1_count < TICKS_FOR_TURN || M2_count < TICKS_FOR_TURN) {
 617:.\main.c      **** //        M1_count = QuadDec_M1_GetCounter();
 618:.\main.c      **** //        M2_count = QuadDec_M2_GetCounter();
 619:.\main.c      **** //    }
 620:.\main.c      **** //    
 621:.\main.c      **** //    PWM_1_WriteCompare(0);
 622:.\main.c      **** //    PWM_2_WriteCompare(0);
 623:.\main.c      **** //    
 624:.\main.c      **** //    return TRUE;
 625:.\main.c      **** //}
 626:.\main.c      **** 
 627:.\main.c      **** 
 628:.\main.c      **** //* ========================================
 629:.\main.c      **** void usbPutString(char *s)
 630:.\main.c      **** {
 1555              		.loc 1 630 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 8
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559              		@ link register save eliminated.
 1560 0000 80B4     		push	{r7}
 1561              		.cfi_def_cfa_offset 4
 1562              		.cfi_offset 7, -4
 1563 0002 83B0     		sub	sp, sp, #12
 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
 1567 0006 7860     		str	r0, [r7, #4]
 631:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
 632:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
 633:.\main.c      **** //  length to 62 char (63rd char is a '!')
 634:.\main.c      ****     
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 40


 635:.\main.c      **** #ifdef PUTTY
 636:.\main.c      ****     
 637:.\main.c      ****     while (USBUART_CDCIsReady() == 0){ };
 638:.\main.c      ****     USBUART_PutData((uint8 *)s, strlen(s));
 639:.\main.c      ****     
 640:.\main.c      **** #endif
 641:.\main.c      **** 
 642:.\main.c      ****     (void)s;
 643:.\main.c      **** 
 644:.\main.c      ****     return;
 1568              		.loc 1 644 0
 1569 0008 00BF     		nop
 645:.\main.c      **** }
 1570              		.loc 1 645 0
 1571 000a 0C37     		adds	r7, r7, #12
 1572              		.cfi_def_cfa_offset 4
 1573 000c BD46     		mov	sp, r7
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 000e 5DF8047B 		ldr	r7, [sp], #4
 1577              		.cfi_restore 7
 1578              		.cfi_def_cfa_offset 0
 1579 0012 7047     		bx	lr
 1580              		.cfi_endproc
 1581              	.LFE78:
 1582              		.size	usbPutString, .-usbPutString
 1583              		.text
 1584              	.Letext0:
 1585              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1586              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1587              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1588              		.file 5 ".\\vars.h"
 1589              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1590              		.section	.debug_info,"",%progbits
 1591              	.Ldebug_info0:
 1592 0000 F2070000 		.4byte	0x7f2
 1593 0004 0400     		.2byte	0x4
 1594 0006 00000000 		.4byte	.Ldebug_abbrev0
 1595 000a 04       		.byte	0x4
 1596 000b 01       		.uleb128 0x1
 1597 000c 2E020000 		.4byte	.LASF109
 1598 0010 01       		.byte	0x1
 1599 0011 33000000 		.4byte	.LASF110
 1600 0015 C0000000 		.4byte	.LASF111
 1601 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1602 001d 00000000 		.4byte	0
 1603 0021 00000000 		.4byte	.Ldebug_line0
 1604 0025 02       		.uleb128 0x2
 1605 0026 01       		.byte	0x1
 1606 0027 06       		.byte	0x6
 1607 0028 4D030000 		.4byte	.LASF0
 1608 002c 02       		.uleb128 0x2
 1609 002d 01       		.byte	0x1
 1610 002e 08       		.byte	0x8
 1611 002f 17030000 		.4byte	.LASF1
 1612 0033 02       		.uleb128 0x2
 1613 0034 02       		.byte	0x2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 41


 1614 0035 05       		.byte	0x5
 1615 0036 60000000 		.4byte	.LASF2
 1616 003a 02       		.uleb128 0x2
 1617 003b 02       		.byte	0x2
 1618 003c 07       		.byte	0x7
 1619 003d D5030000 		.4byte	.LASF3
 1620 0041 03       		.uleb128 0x3
 1621 0042 24050000 		.4byte	.LASF11
 1622 0046 02       		.byte	0x2
 1623 0047 3F       		.byte	0x3f
 1624 0048 4C000000 		.4byte	0x4c
 1625 004c 02       		.uleb128 0x2
 1626 004d 04       		.byte	0x4
 1627 004e 05       		.byte	0x5
 1628 004f 09040000 		.4byte	.LASF4
 1629 0053 02       		.uleb128 0x2
 1630 0054 04       		.byte	0x4
 1631 0055 07       		.byte	0x7
 1632 0056 A8030000 		.4byte	.LASF5
 1633 005a 02       		.uleb128 0x2
 1634 005b 08       		.byte	0x8
 1635 005c 05       		.byte	0x5
 1636 005d C3010000 		.4byte	.LASF6
 1637 0061 02       		.uleb128 0x2
 1638 0062 08       		.byte	0x8
 1639 0063 07       		.byte	0x7
 1640 0064 67030000 		.4byte	.LASF7
 1641 0068 04       		.uleb128 0x4
 1642 0069 04       		.byte	0x4
 1643 006a 05       		.byte	0x5
 1644 006b 696E7400 		.ascii	"int\000"
 1645 006f 02       		.uleb128 0x2
 1646 0070 04       		.byte	0x4
 1647 0071 07       		.byte	0x7
 1648 0072 84030000 		.4byte	.LASF8
 1649 0076 02       		.uleb128 0x2
 1650 0077 04       		.byte	0x4
 1651 0078 07       		.byte	0x7
 1652 0079 77000000 		.4byte	.LASF9
 1653 007d 05       		.uleb128 0x5
 1654 007e 04       		.byte	0x4
 1655 007f 83000000 		.4byte	0x83
 1656 0083 02       		.uleb128 0x2
 1657 0084 01       		.byte	0x1
 1658 0085 08       		.byte	0x8
 1659 0086 FB030000 		.4byte	.LASF10
 1660 008a 03       		.uleb128 0x3
 1661 008b 2B040000 		.4byte	.LASF12
 1662 008f 03       		.byte	0x3
 1663 0090 2C       		.byte	0x2c
 1664 0091 41000000 		.4byte	0x41
 1665 0095 06       		.uleb128 0x6
 1666 0096 6A010000 		.4byte	.LASF13
 1667 009a 04       		.byte	0x4
 1668 009b 9201     		.2byte	0x192
 1669 009d 2C000000 		.4byte	0x2c
 1670 00a1 06       		.uleb128 0x6
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 42


 1671 00a2 57010000 		.4byte	.LASF14
 1672 00a6 04       		.byte	0x4
 1673 00a7 9301     		.2byte	0x193
 1674 00a9 3A000000 		.4byte	0x3a
 1675 00ad 06       		.uleb128 0x6
 1676 00ae DE010000 		.4byte	.LASF15
 1677 00b2 04       		.byte	0x4
 1678 00b3 9501     		.2byte	0x195
 1679 00b5 25000000 		.4byte	0x25
 1680 00b9 06       		.uleb128 0x6
 1681 00ba 64010000 		.4byte	.LASF16
 1682 00be 04       		.byte	0x4
 1683 00bf 9601     		.2byte	0x196
 1684 00c1 33000000 		.4byte	0x33
 1685 00c5 06       		.uleb128 0x6
 1686 00c6 D3040000 		.4byte	.LASF17
 1687 00ca 04       		.byte	0x4
 1688 00cb 9701     		.2byte	0x197
 1689 00cd 4C000000 		.4byte	0x4c
 1690 00d1 02       		.uleb128 0x2
 1691 00d2 04       		.byte	0x4
 1692 00d3 04       		.byte	0x4
 1693 00d4 BD010000 		.4byte	.LASF18
 1694 00d8 02       		.uleb128 0x2
 1695 00d9 08       		.byte	0x8
 1696 00da 04       		.byte	0x4
 1697 00db D9040000 		.4byte	.LASF19
 1698 00df 07       		.uleb128 0x7
 1699 00e0 E8030000 		.4byte	.LASF112
 1700 00e4 20       		.byte	0x20
 1701 00e5 05       		.byte	0x5
 1702 00e6 29       		.byte	0x29
 1703 00e7 B8010000 		.4byte	0x1b8
 1704 00eb 08       		.uleb128 0x8
 1705 00ec E4050000 		.4byte	.LASF20
 1706 00f0 05       		.byte	0x5
 1707 00f1 2A       		.byte	0x2a
 1708 00f2 AD000000 		.4byte	0xad
 1709 00f6 00       		.byte	0
 1710 00f7 08       		.uleb128 0x8
 1711 00f8 5E010000 		.4byte	.LASF21
 1712 00fc 05       		.byte	0x5
 1713 00fd 2B       		.byte	0x2b
 1714 00fe 95000000 		.4byte	0x95
 1715 0102 01       		.byte	0x1
 1716 0103 08       		.uleb128 0x8
 1717 0104 12040000 		.4byte	.LASF22
 1718 0108 05       		.byte	0x5
 1719 0109 2C       		.byte	0x2c
 1720 010a B9000000 		.4byte	0xb9
 1721 010e 02       		.byte	0x2
 1722 010f 08       		.uleb128 0x8
 1723 0110 B7050000 		.4byte	.LASF23
 1724 0114 05       		.byte	0x5
 1725 0115 2D       		.byte	0x2d
 1726 0116 B9000000 		.4byte	0xb9
 1727 011a 04       		.byte	0x4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 43


 1728 011b 08       		.uleb128 0x8
 1729 011c C7020000 		.4byte	.LASF24
 1730 0120 05       		.byte	0x5
 1731 0121 2E       		.byte	0x2e
 1732 0122 B9000000 		.4byte	0xb9
 1733 0126 06       		.byte	0x6
 1734 0127 08       		.uleb128 0x8
 1735 0128 A8040000 		.4byte	.LASF25
 1736 012c 05       		.byte	0x5
 1737 012d 2F       		.byte	0x2f
 1738 012e B9000000 		.4byte	0xb9
 1739 0132 08       		.byte	0x8
 1740 0133 08       		.uleb128 0x8
 1741 0134 56050000 		.4byte	.LASF26
 1742 0138 05       		.byte	0x5
 1743 0139 30       		.byte	0x30
 1744 013a B9000000 		.4byte	0xb9
 1745 013e 0A       		.byte	0xa
 1746 013f 08       		.uleb128 0x8
 1747 0140 2F030000 		.4byte	.LASF27
 1748 0144 05       		.byte	0x5
 1749 0145 31       		.byte	0x31
 1750 0146 B9000000 		.4byte	0xb9
 1751 014a 0C       		.byte	0xc
 1752 014b 08       		.uleb128 0x8
 1753 014c 0D020000 		.4byte	.LASF28
 1754 0150 05       		.byte	0x5
 1755 0151 32       		.byte	0x32
 1756 0152 B9000000 		.4byte	0xb9
 1757 0156 0E       		.byte	0xe
 1758 0157 08       		.uleb128 0x8
 1759 0158 CD030000 		.4byte	.LASF29
 1760 015c 05       		.byte	0x5
 1761 015d 33       		.byte	0x33
 1762 015e B9000000 		.4byte	0xb9
 1763 0162 10       		.byte	0x10
 1764 0163 08       		.uleb128 0x8
 1765 0164 33040000 		.4byte	.LASF30
 1766 0168 05       		.byte	0x5
 1767 0169 34       		.byte	0x34
 1768 016a B9000000 		.4byte	0xb9
 1769 016e 12       		.byte	0x12
 1770 016f 08       		.uleb128 0x8
 1771 0170 55040000 		.4byte	.LASF31
 1772 0174 05       		.byte	0x5
 1773 0175 35       		.byte	0x35
 1774 0176 B9000000 		.4byte	0xb9
 1775 017a 14       		.byte	0x14
 1776 017b 08       		.uleb128 0x8
 1777 017c 70010000 		.4byte	.LASF32
 1778 0180 05       		.byte	0x5
 1779 0181 36       		.byte	0x36
 1780 0182 B9000000 		.4byte	0xb9
 1781 0186 16       		.byte	0x16
 1782 0187 08       		.uleb128 0x8
 1783 0188 58000000 		.4byte	.LASF33
 1784 018c 05       		.byte	0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 44


 1785 018d 37       		.byte	0x37
 1786 018e B9000000 		.4byte	0xb9
 1787 0192 18       		.byte	0x18
 1788 0193 08       		.uleb128 0x8
 1789 0194 05020000 		.4byte	.LASF34
 1790 0198 05       		.byte	0x5
 1791 0199 38       		.byte	0x38
 1792 019a B9000000 		.4byte	0xb9
 1793 019e 1A       		.byte	0x1a
 1794 019f 08       		.uleb128 0x8
 1795 01a0 C4030000 		.4byte	.LASF35
 1796 01a4 05       		.byte	0x5
 1797 01a5 39       		.byte	0x39
 1798 01a6 B9000000 		.4byte	0xb9
 1799 01aa 1C       		.byte	0x1c
 1800 01ab 08       		.uleb128 0x8
 1801 01ac 3B040000 		.4byte	.LASF36
 1802 01b0 05       		.byte	0x5
 1803 01b1 3A       		.byte	0x3a
 1804 01b2 B9000000 		.4byte	0xb9
 1805 01b6 1E       		.byte	0x1e
 1806 01b7 00       		.byte	0
 1807 01b8 09       		.uleb128 0x9
 1808 01b9 69040000 		.4byte	.LASF46
 1809 01bd 01       		.byte	0x1
 1810 01be 01       		.byte	0x1
 1811 01bf 42       		.byte	0x42
 1812 01c0 FB010000 		.4byte	0x1fb
 1813 01c4 0A       		.uleb128 0xa
 1814 01c5 3C000000 		.4byte	.LASF37
 1815 01c9 00       		.sleb128 0
 1816 01ca 0A       		.uleb128 0xa
 1817 01cb A0000000 		.4byte	.LASF38
 1818 01cf 01       		.sleb128 1
 1819 01d0 0A       		.uleb128 0xa
 1820 01d1 06060000 		.4byte	.LASF39
 1821 01d5 02       		.sleb128 2
 1822 01d6 0A       		.uleb128 0xa
 1823 01d7 26000000 		.4byte	.LASF40
 1824 01db 03       		.sleb128 3
 1825 01dc 0A       		.uleb128 0xa
 1826 01dd 94040000 		.4byte	.LASF41
 1827 01e1 04       		.sleb128 4
 1828 01e2 0A       		.uleb128 0xa
 1829 01e3 BC020000 		.4byte	.LASF42
 1830 01e7 05       		.sleb128 5
 1831 01e8 0A       		.uleb128 0xa
 1832 01e9 25030000 		.4byte	.LASF43
 1833 01ed 06       		.sleb128 6
 1834 01ee 0A       		.uleb128 0xa
 1835 01ef 13050000 		.4byte	.LASF44
 1836 01f3 07       		.sleb128 7
 1837 01f4 0A       		.uleb128 0xa
 1838 01f5 29020000 		.4byte	.LASF45
 1839 01f9 08       		.sleb128 8
 1840 01fa 00       		.byte	0
 1841 01fb 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 45


 1842 01fc 69040000 		.4byte	.LASF46
 1843 0200 01       		.byte	0x1
 1844 0201 4C       		.byte	0x4c
 1845 0202 B8010000 		.4byte	0x1b8
 1846 0206 0B       		.uleb128 0xb
 1847 0207 41030000 		.4byte	.LASF47
 1848 020b 01       		.byte	0x1
 1849 020c 6F       		.byte	0x6f
 1850 020d 00000000 		.4byte	.LFB63
 1851 0211 30000000 		.4byte	.LFE63-.LFB63
 1852 0215 01       		.uleb128 0x1
 1853 0216 9C       		.byte	0x9c
 1854 0217 0C       		.uleb128 0xc
 1855 0218 03030000 		.4byte	.LASF48
 1856 021c 01       		.byte	0x1
 1857 021d 76       		.byte	0x76
 1858 021e 00000000 		.4byte	.LFB64
 1859 0222 18000000 		.4byte	.LFE64-.LFB64
 1860 0226 01       		.uleb128 0x1
 1861 0227 9C       		.byte	0x9c
 1862 0228 0D       		.uleb128 0xd
 1863 0229 AF000000 		.4byte	.LASF55
 1864 022d 01       		.byte	0x1
 1865 022e 8B       		.byte	0x8b
 1866 022f 68000000 		.4byte	0x68
 1867 0233 00000000 		.4byte	.LFB65
 1868 0237 90000000 		.4byte	.LFE65-.LFB65
 1869 023b 01       		.uleb128 0x1
 1870 023c 9C       		.byte	0x9c
 1871 023d A1020000 		.4byte	0x2a1
 1872 0241 0E       		.uleb128 0xe
 1873 0242 0B030000 		.4byte	.LASF49
 1874 0246 01       		.byte	0x1
 1875 0247 B1       		.byte	0xb1
 1876 0248 68000000 		.4byte	0x68
 1877 024c 02       		.uleb128 0x2
 1878 024d 91       		.byte	0x91
 1879 024e 74       		.sleb128 -12
 1880 024f 0E       		.uleb128 0xe
 1881 0250 7D010000 		.4byte	.LASF50
 1882 0254 01       		.byte	0x1
 1883 0255 B2       		.byte	0xb2
 1884 0256 68000000 		.4byte	0x68
 1885 025a 02       		.uleb128 0x2
 1886 025b 91       		.byte	0x91
 1887 025c 70       		.sleb128 -16
 1888 025d 0E       		.uleb128 0xe
 1889 025e B0040000 		.4byte	.LASF51
 1890 0262 01       		.byte	0x1
 1891 0263 B3       		.byte	0xb3
 1892 0264 68000000 		.4byte	0x68
 1893 0268 02       		.uleb128 0x2
 1894 0269 91       		.byte	0x91
 1895 026a 64       		.sleb128 -28
 1896 026b 0E       		.uleb128 0xe
 1897 026c C2040000 		.4byte	.LASF52
 1898 0270 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 46


 1899 0271 B4       		.byte	0xb4
 1900 0272 68000000 		.4byte	0x68
 1901 0276 02       		.uleb128 0x2
 1902 0277 91       		.byte	0x91
 1903 0278 60       		.sleb128 -32
 1904 0279 0E       		.uleb128 0xe
 1905 027a 3E050000 		.4byte	.LASF53
 1906 027e 01       		.byte	0x1
 1907 027f B5       		.byte	0xb5
 1908 0280 68000000 		.4byte	0x68
 1909 0284 02       		.uleb128 0x2
 1910 0285 91       		.byte	0x91
 1911 0286 6C       		.sleb128 -20
 1912 0287 0F       		.uleb128 0xf
 1913 0288 44000000 		.4byte	.LASF113
 1914 028c 01       		.byte	0x1
 1915 028d B7       		.byte	0xb7
 1916 028e FB010000 		.4byte	0x1fb
 1917 0292 0E       		.uleb128 0xe
 1918 0293 C2050000 		.4byte	.LASF54
 1919 0297 01       		.byte	0x1
 1920 0298 B8       		.byte	0xb8
 1921 0299 FB010000 		.4byte	0x1fb
 1922 029d 02       		.uleb128 0x2
 1923 029e 91       		.byte	0x91
 1924 029f 6B       		.sleb128 -21
 1925 02a0 00       		.byte	0
 1926 02a1 10       		.uleb128 0x10
 1927 02a2 B2010000 		.4byte	.LASF56
 1928 02a6 01       		.byte	0x1
 1929 02a7 2A01     		.2byte	0x12a
 1930 02a9 00000000 		.4byte	.LFB66
 1931 02ad 78010000 		.4byte	.LFE66-.LFB66
 1932 02b1 01       		.uleb128 0x1
 1933 02b2 9C       		.byte	0x9c
 1934 02b3 12030000 		.4byte	0x312
 1935 02b7 11       		.uleb128 0x11
 1936 02b8 83040000 		.4byte	.LASF57
 1937 02bc 01       		.byte	0x1
 1938 02bd 2A01     		.2byte	0x12a
 1939 02bf 68000000 		.4byte	0x68
 1940 02c3 02       		.uleb128 0x2
 1941 02c4 91       		.byte	0x91
 1942 02c5 64       		.sleb128 -28
 1943 02c6 11       		.uleb128 0x11
 1944 02c7 B0040000 		.4byte	.LASF51
 1945 02cb 01       		.byte	0x1
 1946 02cc 2A01     		.2byte	0x12a
 1947 02ce 12030000 		.4byte	0x312
 1948 02d2 02       		.uleb128 0x2
 1949 02d3 91       		.byte	0x91
 1950 02d4 60       		.sleb128 -32
 1951 02d5 11       		.uleb128 0x11
 1952 02d6 C2040000 		.4byte	.LASF52
 1953 02da 01       		.byte	0x1
 1954 02db 2A01     		.2byte	0x12a
 1955 02dd 12030000 		.4byte	0x312
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 47


 1956 02e1 02       		.uleb128 0x2
 1957 02e2 91       		.byte	0x91
 1958 02e3 5C       		.sleb128 -36
 1959 02e4 12       		.uleb128 0x12
 1960 02e5 0B030000 		.4byte	.LASF49
 1961 02e9 01       		.byte	0x1
 1962 02ea 2C01     		.2byte	0x12c
 1963 02ec 68000000 		.4byte	0x68
 1964 02f0 02       		.uleb128 0x2
 1965 02f1 91       		.byte	0x91
 1966 02f2 74       		.sleb128 -12
 1967 02f3 12       		.uleb128 0x12
 1968 02f4 7D010000 		.4byte	.LASF50
 1969 02f8 01       		.byte	0x1
 1970 02f9 2D01     		.2byte	0x12d
 1971 02fb 68000000 		.4byte	0x68
 1972 02ff 02       		.uleb128 0x2
 1973 0300 91       		.byte	0x91
 1974 0301 70       		.sleb128 -16
 1975 0302 12       		.uleb128 0x12
 1976 0303 F2030000 		.4byte	.LASF58
 1977 0307 01       		.byte	0x1
 1978 0308 3001     		.2byte	0x130
 1979 030a D1000000 		.4byte	0xd1
 1980 030e 02       		.uleb128 0x2
 1981 030f 91       		.byte	0x91
 1982 0310 6C       		.sleb128 -20
 1983 0311 00       		.byte	0
 1984 0312 05       		.uleb128 0x5
 1985 0313 04       		.byte	0x4
 1986 0314 68000000 		.4byte	0x68
 1987 0318 13       		.uleb128 0x13
 1988 0319 7D050000 		.4byte	.LASF61
 1989 031d 01       		.byte	0x1
 1990 031e 7701     		.2byte	0x177
 1991 0320 D1000000 		.4byte	0xd1
 1992 0324 00000000 		.4byte	.LFB67
 1993 0328 CC000000 		.4byte	.LFE67-.LFB67
 1994 032c 01       		.uleb128 0x1
 1995 032d 9C       		.byte	0x9c
 1996 032e 6F030000 		.4byte	0x36f
 1997 0332 11       		.uleb128 0x11
 1998 0333 0B030000 		.4byte	.LASF49
 1999 0337 01       		.byte	0x1
 2000 0338 7701     		.2byte	0x177
 2001 033a 68000000 		.4byte	0x68
 2002 033e 02       		.uleb128 0x2
 2003 033f 91       		.byte	0x91
 2004 0340 6C       		.sleb128 -20
 2005 0341 11       		.uleb128 0x11
 2006 0342 7D010000 		.4byte	.LASF50
 2007 0346 01       		.byte	0x1
 2008 0347 7701     		.2byte	0x177
 2009 0349 68000000 		.4byte	0x68
 2010 034d 02       		.uleb128 0x2
 2011 034e 91       		.byte	0x91
 2012 034f 68       		.sleb128 -24
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 48


 2013 0350 12       		.uleb128 0x12
 2014 0351 91030000 		.4byte	.LASF59
 2015 0355 01       		.byte	0x1
 2016 0356 7801     		.2byte	0x178
 2017 0358 D1000000 		.4byte	0xd1
 2018 035c 02       		.uleb128 0x2
 2019 035d 91       		.byte	0x91
 2020 035e 74       		.sleb128 -12
 2021 035f 12       		.uleb128 0x12
 2022 0360 12000000 		.4byte	.LASF60
 2023 0364 01       		.byte	0x1
 2024 0365 7901     		.2byte	0x179
 2025 0367 D1000000 		.4byte	0xd1
 2026 036b 02       		.uleb128 0x2
 2027 036c 91       		.byte	0x91
 2028 036d 70       		.sleb128 -16
 2029 036e 00       		.byte	0
 2030 036f 13       		.uleb128 0x13
 2031 0370 96010000 		.4byte	.LASF62
 2032 0374 01       		.byte	0x1
 2033 0375 7E01     		.2byte	0x17e
 2034 0377 C5000000 		.4byte	0xc5
 2035 037b 00000000 		.4byte	.LFB68
 2036 037f 24000000 		.4byte	.LFE68-.LFB68
 2037 0383 01       		.uleb128 0x1
 2038 0384 9C       		.byte	0x9c
 2039 0385 97030000 		.4byte	0x397
 2040 0389 14       		.uleb128 0x14
 2041 038a 6E00     		.ascii	"n\000"
 2042 038c 01       		.byte	0x1
 2043 038d 7E01     		.2byte	0x17e
 2044 038f B9000000 		.4byte	0xb9
 2045 0393 02       		.uleb128 0x2
 2046 0394 91       		.byte	0x91
 2047 0395 76       		.sleb128 -10
 2048 0396 00       		.byte	0
 2049 0397 15       		.uleb128 0x15
 2050 0398 E3010000 		.4byte	.LASF114
 2051 039c 01       		.byte	0x1
 2052 039d 8201     		.2byte	0x182
 2053 039f 00000000 		.4byte	.LFB69
 2054 03a3 B4000000 		.4byte	.LFE69-.LFB69
 2055 03a7 01       		.uleb128 0x1
 2056 03a8 9C       		.byte	0x9c
 2057 03a9 D4030000 		.4byte	0x3d4
 2058 03ad 16       		.uleb128 0x16
 2059 03ae 6900     		.ascii	"i\000"
 2060 03b0 01       		.byte	0x1
 2061 03b1 8401     		.2byte	0x184
 2062 03b3 68000000 		.4byte	0x68
 2063 03b7 02       		.uleb128 0x2
 2064 03b8 91       		.byte	0x91
 2065 03b9 74       		.sleb128 -12
 2066 03ba 17       		.uleb128 0x17
 2067 03bb 0C000000 		.4byte	.LBB2
 2068 03bf 26000000 		.4byte	.LBE2-.LBB2
 2069 03c3 12       		.uleb128 0x12
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 49


 2070 03c4 A0040000 		.4byte	.LASF63
 2071 03c8 01       		.byte	0x1
 2072 03c9 8601     		.2byte	0x186
 2073 03cb 68000000 		.4byte	0x68
 2074 03cf 02       		.uleb128 0x2
 2075 03d0 91       		.byte	0x91
 2076 03d1 70       		.sleb128 -16
 2077 03d2 00       		.byte	0
 2078 03d3 00       		.byte	0
 2079 03d4 10       		.uleb128 0x10
 2080 03d5 E0040000 		.4byte	.LASF64
 2081 03d9 01       		.byte	0x1
 2082 03da 9901     		.2byte	0x199
 2083 03dc 00000000 		.4byte	.LFB70
 2084 03e0 2A000000 		.4byte	.LFE70-.LFB70
 2085 03e4 01       		.uleb128 0x1
 2086 03e5 9C       		.byte	0x9c
 2087 03e6 09040000 		.4byte	0x409
 2088 03ea 11       		.uleb128 0x11
 2089 03eb CD050000 		.4byte	.LASF65
 2090 03ef 01       		.byte	0x1
 2091 03f0 9901     		.2byte	0x199
 2092 03f2 68000000 		.4byte	0x68
 2093 03f6 02       		.uleb128 0x2
 2094 03f7 91       		.byte	0x91
 2095 03f8 6C       		.sleb128 -20
 2096 03f9 12       		.uleb128 0x12
 2097 03fa 4C050000 		.4byte	.LASF66
 2098 03fe 01       		.byte	0x1
 2099 03ff 9A01     		.2byte	0x19a
 2100 0401 68000000 		.4byte	0x68
 2101 0405 02       		.uleb128 0x2
 2102 0406 91       		.byte	0x91
 2103 0407 74       		.sleb128 -12
 2104 0408 00       		.byte	0
 2105 0409 10       		.uleb128 0x10
 2106 040a 80000000 		.4byte	.LASF67
 2107 040e 01       		.byte	0x1
 2108 040f 9E01     		.2byte	0x19e
 2109 0411 00000000 		.4byte	.LFB71
 2110 0415 2A000000 		.4byte	.LFE71-.LFB71
 2111 0419 01       		.uleb128 0x1
 2112 041a 9C       		.byte	0x9c
 2113 041b 3E040000 		.4byte	0x43e
 2114 041f 11       		.uleb128 0x11
 2115 0420 CD050000 		.4byte	.LASF65
 2116 0424 01       		.byte	0x1
 2117 0425 9E01     		.2byte	0x19e
 2118 0427 68000000 		.4byte	0x68
 2119 042b 02       		.uleb128 0x2
 2120 042c 91       		.byte	0x91
 2121 042d 6C       		.sleb128 -20
 2122 042e 12       		.uleb128 0x12
 2123 042f 4C050000 		.4byte	.LASF66
 2124 0433 01       		.byte	0x1
 2125 0434 9F01     		.2byte	0x19f
 2126 0436 68000000 		.4byte	0x68
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 50


 2127 043a 02       		.uleb128 0x2
 2128 043b 91       		.byte	0x91
 2129 043c 74       		.sleb128 -12
 2130 043d 00       		.byte	0
 2131 043e 10       		.uleb128 0x10
 2132 043f 89010000 		.4byte	.LASF68
 2133 0443 01       		.byte	0x1
 2134 0444 A701     		.2byte	0x1a7
 2135 0446 00000000 		.4byte	.LFB72
 2136 044a 52000000 		.4byte	.LFE72-.LFB72
 2137 044e 01       		.uleb128 0x1
 2138 044f 9C       		.byte	0x9c
 2139 0450 C3040000 		.4byte	0x4c3
 2140 0454 11       		.uleb128 0x11
 2141 0455 BA030000 		.4byte	.LASF69
 2142 0459 01       		.byte	0x1
 2143 045a A701     		.2byte	0x1a7
 2144 045c 68000000 		.4byte	0x68
 2145 0460 03       		.uleb128 0x3
 2146 0461 91       		.byte	0x91
 2147 0462 AC7F     		.sleb128 -84
 2148 0464 11       		.uleb128 0x11
 2149 0465 0D050000 		.4byte	.LASF70
 2150 0469 01       		.byte	0x1
 2151 046a A701     		.2byte	0x1a7
 2152 046c 68000000 		.4byte	0x68
 2153 0470 03       		.uleb128 0x3
 2154 0471 91       		.byte	0x91
 2155 0472 A87F     		.sleb128 -88
 2156 0474 11       		.uleb128 0x11
 2157 0475 59030000 		.4byte	.LASF71
 2158 0479 01       		.byte	0x1
 2159 047a A701     		.2byte	0x1a7
 2160 047c 68000000 		.4byte	0x68
 2161 0480 03       		.uleb128 0x3
 2162 0481 91       		.byte	0x91
 2163 0482 A47F     		.sleb128 -92
 2164 0484 11       		.uleb128 0x11
 2165 0485 B4000000 		.4byte	.LASF72
 2166 0489 01       		.byte	0x1
 2167 048a A701     		.2byte	0x1a7
 2168 048c 68000000 		.4byte	0x68
 2169 0490 03       		.uleb128 0x3
 2170 0491 91       		.byte	0x91
 2171 0492 A07F     		.sleb128 -96
 2172 0494 12       		.uleb128 0x12
 2173 0495 5E040000 		.4byte	.LASF73
 2174 0499 01       		.byte	0x1
 2175 049a AC01     		.2byte	0x1ac
 2176 049c 68000000 		.4byte	0x68
 2177 04a0 02       		.uleb128 0x2
 2178 04a1 91       		.byte	0x91
 2179 04a2 74       		.sleb128 -12
 2180 04a3 16       		.uleb128 0x16
 2181 04a4 6D736700 		.ascii	"msg\000"
 2182 04a8 01       		.byte	0x1
 2183 04a9 B101     		.2byte	0x1b1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 51


 2184 04ab C3040000 		.4byte	0x4c3
 2185 04af 03       		.uleb128 0x3
 2186 04b0 91       		.byte	0x91
 2187 04b1 B07F     		.sleb128 -80
 2188 04b3 12       		.uleb128 0x12
 2189 04b4 00000000 		.4byte	.LASF74
 2190 04b8 01       		.byte	0x1
 2191 04b9 B801     		.2byte	0x1b8
 2192 04bb 68000000 		.4byte	0x68
 2193 04bf 02       		.uleb128 0x2
 2194 04c0 91       		.byte	0x91
 2195 04c1 70       		.sleb128 -16
 2196 04c2 00       		.byte	0
 2197 04c3 18       		.uleb128 0x18
 2198 04c4 83000000 		.4byte	0x83
 2199 04c8 D3040000 		.4byte	0x4d3
 2200 04cc 19       		.uleb128 0x19
 2201 04cd 76000000 		.4byte	0x76
 2202 04d1 3F       		.byte	0x3f
 2203 04d2 00       		.byte	0
 2204 04d3 10       		.uleb128 0x10
 2205 04d4 89050000 		.4byte	.LASF75
 2206 04d8 01       		.byte	0x1
 2207 04d9 C901     		.2byte	0x1c9
 2208 04db 00000000 		.4byte	.LFB73
 2209 04df 2C000000 		.4byte	.LFE73-.LFB73
 2210 04e3 01       		.uleb128 0x1
 2211 04e4 9C       		.byte	0x9c
 2212 04e5 08050000 		.4byte	0x508
 2213 04e9 11       		.uleb128 0x11
 2214 04ea E9050000 		.4byte	.LASF76
 2215 04ee 01       		.byte	0x1
 2216 04ef C901     		.2byte	0x1c9
 2217 04f1 68000000 		.4byte	0x68
 2218 04f5 02       		.uleb128 0x2
 2219 04f6 91       		.byte	0x91
 2220 04f7 74       		.sleb128 -12
 2221 04f8 11       		.uleb128 0x11
 2222 04f9 1A020000 		.4byte	.LASF77
 2223 04fd 01       		.byte	0x1
 2224 04fe C901     		.2byte	0x1c9
 2225 0500 68000000 		.4byte	0x68
 2226 0504 02       		.uleb128 0x2
 2227 0505 91       		.byte	0x91
 2228 0506 70       		.sleb128 -16
 2229 0507 00       		.byte	0
 2230 0508 1A       		.uleb128 0x1a
 2231 0509 38030000 		.4byte	.LASF78
 2232 050d 01       		.byte	0x1
 2233 050e CE01     		.2byte	0x1ce
 2234 0510 00000000 		.4byte	.LFB74
 2235 0514 40000000 		.4byte	.LFE74-.LFB74
 2236 0518 01       		.uleb128 0x1
 2237 0519 9C       		.byte	0x9c
 2238 051a 1A       		.uleb128 0x1a
 2239 051b 5E050000 		.4byte	.LASF79
 2240 051f 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 52


 2241 0520 DA01     		.2byte	0x1da
 2242 0522 00000000 		.4byte	.LFB75
 2243 0526 40000000 		.4byte	.LFE75-.LFB75
 2244 052a 01       		.uleb128 0x1
 2245 052b 9C       		.byte	0x9c
 2246 052c 10       		.uleb128 0x10
 2247 052d 1D040000 		.4byte	.LASF80
 2248 0531 01       		.byte	0x1
 2249 0532 E601     		.2byte	0x1e6
 2250 0534 00000000 		.4byte	.LFB76
 2251 0538 10010000 		.4byte	.LFE76-.LFB76
 2252 053c 01       		.uleb128 0x1
 2253 053d 9C       		.byte	0x9c
 2254 053e 7F050000 		.4byte	0x57f
 2255 0542 11       		.uleb128 0x11
 2256 0543 B0040000 		.4byte	.LASF51
 2257 0547 01       		.byte	0x1
 2258 0548 E601     		.2byte	0x1e6
 2259 054a 12030000 		.4byte	0x312
 2260 054e 02       		.uleb128 0x2
 2261 054f 91       		.byte	0x91
 2262 0550 6C       		.sleb128 -20
 2263 0551 11       		.uleb128 0x11
 2264 0552 C2040000 		.4byte	.LASF52
 2265 0556 01       		.byte	0x1
 2266 0557 E601     		.2byte	0x1e6
 2267 0559 12030000 		.4byte	0x312
 2268 055d 02       		.uleb128 0x2
 2269 055e 91       		.byte	0x91
 2270 055f 68       		.sleb128 -24
 2271 0560 12       		.uleb128 0x12
 2272 0561 0B030000 		.4byte	.LASF49
 2273 0565 01       		.byte	0x1
 2274 0566 E701     		.2byte	0x1e7
 2275 0568 68000000 		.4byte	0x68
 2276 056c 02       		.uleb128 0x2
 2277 056d 91       		.byte	0x91
 2278 056e 74       		.sleb128 -12
 2279 056f 12       		.uleb128 0x12
 2280 0570 7D010000 		.4byte	.LASF50
 2281 0574 01       		.byte	0x1
 2282 0575 E801     		.2byte	0x1e8
 2283 0577 68000000 		.4byte	0x68
 2284 057b 02       		.uleb128 0x2
 2285 057c 91       		.byte	0x91
 2286 057d 70       		.sleb128 -16
 2287 057e 00       		.byte	0
 2288 057f 10       		.uleb128 0x10
 2289 0580 F7050000 		.4byte	.LASF81
 2290 0584 01       		.byte	0x1
 2291 0585 1D02     		.2byte	0x21d
 2292 0587 00000000 		.4byte	.LFB77
 2293 058b FC000000 		.4byte	.LFE77-.LFB77
 2294 058f 01       		.uleb128 0x1
 2295 0590 9C       		.byte	0x9c
 2296 0591 D2050000 		.4byte	0x5d2
 2297 0595 11       		.uleb128 0x11
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 53


 2298 0596 B0040000 		.4byte	.LASF51
 2299 059a 01       		.byte	0x1
 2300 059b 1D02     		.2byte	0x21d
 2301 059d 12030000 		.4byte	0x312
 2302 05a1 02       		.uleb128 0x2
 2303 05a2 91       		.byte	0x91
 2304 05a3 6C       		.sleb128 -20
 2305 05a4 11       		.uleb128 0x11
 2306 05a5 C2040000 		.4byte	.LASF52
 2307 05a9 01       		.byte	0x1
 2308 05aa 1D02     		.2byte	0x21d
 2309 05ac 12030000 		.4byte	0x312
 2310 05b0 02       		.uleb128 0x2
 2311 05b1 91       		.byte	0x91
 2312 05b2 68       		.sleb128 -24
 2313 05b3 12       		.uleb128 0x12
 2314 05b4 0B030000 		.4byte	.LASF49
 2315 05b8 01       		.byte	0x1
 2316 05b9 1E02     		.2byte	0x21e
 2317 05bb 68000000 		.4byte	0x68
 2318 05bf 02       		.uleb128 0x2
 2319 05c0 91       		.byte	0x91
 2320 05c1 74       		.sleb128 -12
 2321 05c2 12       		.uleb128 0x12
 2322 05c3 7D010000 		.4byte	.LASF50
 2323 05c7 01       		.byte	0x1
 2324 05c8 1F02     		.2byte	0x21f
 2325 05ca 68000000 		.4byte	0x68
 2326 05ce 02       		.uleb128 0x2
 2327 05cf 91       		.byte	0x91
 2328 05d0 70       		.sleb128 -16
 2329 05d1 00       		.byte	0
 2330 05d2 1B       		.uleb128 0x1b
 2331 05d3 D1010000 		.4byte	.LASF82
 2332 05d7 01       		.byte	0x1
 2333 05d8 7502     		.2byte	0x275
 2334 05da 00000000 		.4byte	.LFB78
 2335 05de 14000000 		.4byte	.LFE78-.LFB78
 2336 05e2 01       		.uleb128 0x1
 2337 05e3 9C       		.byte	0x9c
 2338 05e4 F6050000 		.4byte	0x5f6
 2339 05e8 14       		.uleb128 0x14
 2340 05e9 7300     		.ascii	"s\000"
 2341 05eb 01       		.byte	0x1
 2342 05ec 7502     		.2byte	0x275
 2343 05ee 7D000000 		.4byte	0x7d
 2344 05f2 02       		.uleb128 0x2
 2345 05f3 91       		.byte	0x91
 2346 05f4 74       		.sleb128 -12
 2347 05f5 00       		.byte	0
 2348 05f6 1C       		.uleb128 0x1c
 2349 05f7 4A010000 		.4byte	.LASF83
 2350 05fb 06       		.byte	0x6
 2351 05fc 9606     		.2byte	0x696
 2352 05fe 02060000 		.4byte	0x602
 2353 0602 1D       		.uleb128 0x1d
 2354 0603 8A000000 		.4byte	0x8a
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 54


 2355 0607 1E       		.uleb128 0x1e
 2356 0608 747300   		.ascii	"ts\000"
 2357 060b 05       		.byte	0x5
 2358 060c 10       		.byte	0x10
 2359 060d 95000000 		.4byte	0x95
 2360 0611 05       		.uleb128 0x5
 2361 0612 03       		.byte	0x3
 2362 0613 00000000 		.4byte	ts
 2363 0617 1F       		.uleb128 0x1f
 2364 0618 0B000000 		.4byte	.LASF84
 2365 061c 05       		.byte	0x5
 2366 061d 11       		.byte	0x11
 2367 061e A1000000 		.4byte	0xa1
 2368 0622 05       		.uleb128 0x5
 2369 0623 03       		.byte	0x3
 2370 0624 00000000 		.4byte	ts_enc
 2371 0628 1F       		.uleb128 0x1f
 2372 0629 73050000 		.4byte	.LASF85
 2373 062d 05       		.byte	0x5
 2374 062e 12       		.byte	0x12
 2375 062f A1000000 		.4byte	0xa1
 2376 0633 05       		.uleb128 0x5
 2377 0634 03       		.byte	0x3
 2378 0635 00000000 		.4byte	ts_update
 2379 0639 1F       		.uleb128 0x1f
 2380 063a 04050000 		.4byte	.LASF86
 2381 063e 05       		.byte	0x5
 2382 063f 13       		.byte	0x13
 2383 0640 A1000000 		.4byte	0xa1
 2384 0644 05       		.uleb128 0x5
 2385 0645 03       		.byte	0x3
 2386 0646 00000000 		.4byte	ts_speed
 2387 064a 1F       		.uleb128 0x1f
 2388 064b 68050000 		.4byte	.LASF87
 2389 064f 05       		.byte	0x5
 2390 0650 14       		.byte	0x14
 2391 0651 A1000000 		.4byte	0xa1
 2392 0655 05       		.uleb128 0x5
 2393 0656 03       		.byte	0x3
 2394 0657 00000000 		.4byte	ts_display
 2395 065b 1F       		.uleb128 0x1f
 2396 065c 18050000 		.4byte	.LASF88
 2397 0660 05       		.byte	0x5
 2398 0661 16       		.byte	0x16
 2399 0662 95000000 		.4byte	0x95
 2400 0666 05       		.uleb128 0x5
 2401 0667 03       		.byte	0x3
 2402 0668 00000000 		.4byte	flag_ts_enc
 2403 066c 1F       		.uleb128 0x1f
 2404 066d F6010000 		.4byte	.LASF89
 2405 0671 05       		.byte	0x5
 2406 0672 17       		.byte	0x17
 2407 0673 95000000 		.4byte	0x95
 2408 0677 05       		.uleb128 0x5
 2409 0678 03       		.byte	0x3
 2410 0679 00000000 		.4byte	flag_ts_update
 2411 067d 1F       		.uleb128 0x1f
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 55


 2412 067e 4A000000 		.4byte	.LASF90
 2413 0682 05       		.byte	0x5
 2414 0683 18       		.byte	0x18
 2415 0684 95000000 		.4byte	0x95
 2416 0688 05       		.uleb128 0x5
 2417 0689 03       		.byte	0x3
 2418 068a 00000000 		.4byte	flag_ts_speed
 2419 068e 1F       		.uleb128 0x1f
 2420 068f DE020000 		.4byte	.LASF91
 2421 0693 05       		.byte	0x5
 2422 0694 19       		.byte	0x19
 2423 0695 95000000 		.4byte	0x95
 2424 0699 05       		.uleb128 0x5
 2425 069a 03       		.byte	0x3
 2426 069b 00000000 		.4byte	flag_ts_display
 2427 069f 1F       		.uleb128 0x1f
 2428 06a0 EE020000 		.4byte	.LASF92
 2429 06a4 05       		.byte	0x5
 2430 06a5 1C       		.byte	0x1c
 2431 06a6 95000000 		.4byte	0x95
 2432 06aa 05       		.uleb128 0x5
 2433 06ab 03       		.byte	0x3
 2434 06ac 00000000 		.4byte	flag_rx
 2435 06b0 1F       		.uleb128 0x1f
 2436 06b1 1A000000 		.4byte	.LASF93
 2437 06b5 05       		.byte	0x5
 2438 06b6 1D       		.byte	0x1d
 2439 06b7 95000000 		.4byte	0x95
 2440 06bb 05       		.uleb128 0x5
 2441 06bc 03       		.byte	0x3
 2442 06bd 00000000 		.4byte	flag_packet
 2443 06c1 1F       		.uleb128 0x1f
 2444 06c2 99030000 		.4byte	.LASF94
 2445 06c6 05       		.byte	0x5
 2446 06c7 1E       		.byte	0x1e
 2447 06c8 95000000 		.4byte	0x95
 2448 06cc 05       		.uleb128 0x5
 2449 06cd 03       		.byte	0x3
 2450 06ce 00000000 		.4byte	flag_KB_string
 2451 06d2 1F       		.uleb128 0x1f
 2452 06d3 F5040000 		.4byte	.LASF95
 2453 06d7 05       		.byte	0x5
 2454 06d8 20       		.byte	0x20
 2455 06d9 95000000 		.4byte	0x95
 2456 06dd 05       		.uleb128 0x5
 2457 06de 03       		.byte	0x3
 2458 06df 00000000 		.4byte	dataready_flag
 2459 06e3 1F       		.uleb128 0x1f
 2460 06e4 9B050000 		.4byte	.LASF96
 2461 06e8 05       		.byte	0x5
 2462 06e9 22       		.byte	0x22
 2463 06ea 95000000 		.4byte	0x95
 2464 06ee 05       		.uleb128 0x5
 2465 06ef 03       		.byte	0x3
 2466 06f0 00000000 		.4byte	flag_rf_transmission_active
 2467 06f4 1F       		.uleb128 0x1f
 2468 06f5 75040000 		.4byte	.LASF97
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 56


 2469 06f9 05       		.byte	0x5
 2470 06fa 25       		.byte	0x25
 2471 06fb C3040000 		.4byte	0x4c3
 2472 06ff 05       		.uleb128 0x5
 2473 0700 03       		.byte	0x3
 2474 0701 00000000 		.4byte	displaystring
 2475 0705 1F       		.uleb128 0x1f
 2476 0706 D9020000 		.4byte	.LASF98
 2477 070a 05       		.byte	0x5
 2478 070b 26       		.byte	0x26
 2479 070c C3040000 		.4byte	0x4c3
 2480 0710 05       		.uleb128 0x5
 2481 0711 03       		.byte	0x3
 2482 0712 00000000 		.4byte	line
 2483 0716 1F       		.uleb128 0x1f
 2484 0717 7E030000 		.4byte	.LASF99
 2485 071b 05       		.byte	0x5
 2486 071c 26       		.byte	0x26
 2487 071d C3040000 		.4byte	0x4c3
 2488 0721 05       		.uleb128 0x5
 2489 0722 03       		.byte	0x3
 2490 0723 00000000 		.4byte	entry
 2491 0727 18       		.uleb128 0x18
 2492 0728 95000000 		.4byte	0x95
 2493 072c 37070000 		.4byte	0x737
 2494 0730 19       		.uleb128 0x19
 2495 0731 76000000 		.4byte	0x76
 2496 0735 3F       		.byte	0x3f
 2497 0736 00       		.byte	0
 2498 0737 1F       		.uleb128 0x1f
 2499 0738 96000000 		.4byte	.LASF100
 2500 073c 05       		.byte	0x5
 2501 073d 27       		.byte	0x27
 2502 073e 27070000 		.4byte	0x727
 2503 0742 05       		.uleb128 0x5
 2504 0743 03       		.byte	0x3
 2505 0744 00000000 		.4byte	usbBuffer
 2506 0748 1F       		.uleb128 0x1f
 2507 0749 6A000000 		.4byte	.LASF101
 2508 074d 05       		.byte	0x5
 2509 074e 3C       		.byte	0x3c
 2510 074f DF000000 		.4byte	0xdf
 2511 0753 05       		.uleb128 0x5
 2512 0754 03       		.byte	0x3
 2513 0755 00000000 		.4byte	system_state
 2514 0759 18       		.uleb128 0x18
 2515 075a AD000000 		.4byte	0xad
 2516 075e 69070000 		.4byte	0x769
 2517 0762 19       		.uleb128 0x19
 2518 0763 76000000 		.4byte	0x76
 2519 0767 05       		.byte	0x5
 2520 0768 00       		.byte	0
 2521 0769 1F       		.uleb128 0x1f
 2522 076a D4050000 		.4byte	.LASF102
 2523 076e 01       		.byte	0x1
 2524 076f 66       		.byte	0x66
 2525 0770 59070000 		.4byte	0x759
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 57


 2526 0774 05       		.uleb128 0x5
 2527 0775 03       		.byte	0x3
 2528 0776 00000000 		.4byte	sensor_readings
 2529 077a 1F       		.uleb128 0x1f
 2530 077b 00040000 		.4byte	.LASF103
 2531 077f 01       		.byte	0x1
 2532 0780 67       		.byte	0x67
 2533 0781 8B070000 		.4byte	0x78b
 2534 0785 05       		.uleb128 0x5
 2535 0786 03       		.byte	0x3
 2536 0787 00000000 		.4byte	adc_flag
 2537 078b 1D       		.uleb128 0x1d
 2538 078c 68000000 		.4byte	0x68
 2539 0790 18       		.uleb128 0x18
 2540 0791 68000000 		.4byte	0x68
 2541 0795 A0070000 		.4byte	0x7a0
 2542 0799 19       		.uleb128 0x19
 2543 079a 76000000 		.4byte	0x76
 2544 079e 05       		.byte	0x5
 2545 079f 00       		.byte	0
 2546 07a0 1F       		.uleb128 0x1f
 2547 07a1 F6020000 		.4byte	.LASF104
 2548 07a5 01       		.byte	0x1
 2549 07a6 68       		.byte	0x68
 2550 07a7 90070000 		.4byte	0x790
 2551 07ab 05       		.uleb128 0x5
 2552 07ac 03       		.byte	0x3
 2553 07ad 00000000 		.4byte	adc_readings
 2554 07b1 1F       		.uleb128 0x1f
 2555 07b2 48040000 		.4byte	.LASF105
 2556 07b6 01       		.byte	0x1
 2557 07b7 69       		.byte	0x69
 2558 07b8 68000000 		.4byte	0x68
 2559 07bc 05       		.uleb128 0x5
 2560 07bd 03       		.byte	0x3
 2561 07be 00000000 		.4byte	sample_count
 2562 07c2 1F       		.uleb128 0x1f
 2563 07c3 2E050000 		.4byte	.LASF106
 2564 07c7 01       		.byte	0x1
 2565 07c8 6B       		.byte	0x6b
 2566 07c9 8B070000 		.4byte	0x78b
 2567 07cd 05       		.uleb128 0x5
 2568 07ce 03       		.byte	0x3
 2569 07cf 00000000 		.4byte	countM1
 2570 07d3 1F       		.uleb128 0x1f
 2571 07d4 36050000 		.4byte	.LASF107
 2572 07d8 01       		.byte	0x1
 2573 07d9 6C       		.byte	0x6c
 2574 07da 8B070000 		.4byte	0x78b
 2575 07de 05       		.uleb128 0x5
 2576 07df 03       		.byte	0x3
 2577 07e0 00000000 		.4byte	countM2
 2578 07e4 1F       		.uleb128 0x1f
 2579 07e5 A7010000 		.4byte	.LASF108
 2580 07e9 01       		.byte	0x1
 2581 07ea 6D       		.byte	0x6d
 2582 07eb 8B070000 		.4byte	0x78b
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 58


 2583 07ef 05       		.uleb128 0x5
 2584 07f0 03       		.byte	0x3
 2585 07f1 00000000 		.4byte	timer_flag
 2586 07f5 00       		.byte	0
 2587              		.section	.debug_abbrev,"",%progbits
 2588              	.Ldebug_abbrev0:
 2589 0000 01       		.uleb128 0x1
 2590 0001 11       		.uleb128 0x11
 2591 0002 01       		.byte	0x1
 2592 0003 25       		.uleb128 0x25
 2593 0004 0E       		.uleb128 0xe
 2594 0005 13       		.uleb128 0x13
 2595 0006 0B       		.uleb128 0xb
 2596 0007 03       		.uleb128 0x3
 2597 0008 0E       		.uleb128 0xe
 2598 0009 1B       		.uleb128 0x1b
 2599 000a 0E       		.uleb128 0xe
 2600 000b 55       		.uleb128 0x55
 2601 000c 17       		.uleb128 0x17
 2602 000d 11       		.uleb128 0x11
 2603 000e 01       		.uleb128 0x1
 2604 000f 10       		.uleb128 0x10
 2605 0010 17       		.uleb128 0x17
 2606 0011 00       		.byte	0
 2607 0012 00       		.byte	0
 2608 0013 02       		.uleb128 0x2
 2609 0014 24       		.uleb128 0x24
 2610 0015 00       		.byte	0
 2611 0016 0B       		.uleb128 0xb
 2612 0017 0B       		.uleb128 0xb
 2613 0018 3E       		.uleb128 0x3e
 2614 0019 0B       		.uleb128 0xb
 2615 001a 03       		.uleb128 0x3
 2616 001b 0E       		.uleb128 0xe
 2617 001c 00       		.byte	0
 2618 001d 00       		.byte	0
 2619 001e 03       		.uleb128 0x3
 2620 001f 16       		.uleb128 0x16
 2621 0020 00       		.byte	0
 2622 0021 03       		.uleb128 0x3
 2623 0022 0E       		.uleb128 0xe
 2624 0023 3A       		.uleb128 0x3a
 2625 0024 0B       		.uleb128 0xb
 2626 0025 3B       		.uleb128 0x3b
 2627 0026 0B       		.uleb128 0xb
 2628 0027 49       		.uleb128 0x49
 2629 0028 13       		.uleb128 0x13
 2630 0029 00       		.byte	0
 2631 002a 00       		.byte	0
 2632 002b 04       		.uleb128 0x4
 2633 002c 24       		.uleb128 0x24
 2634 002d 00       		.byte	0
 2635 002e 0B       		.uleb128 0xb
 2636 002f 0B       		.uleb128 0xb
 2637 0030 3E       		.uleb128 0x3e
 2638 0031 0B       		.uleb128 0xb
 2639 0032 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 59


 2640 0033 08       		.uleb128 0x8
 2641 0034 00       		.byte	0
 2642 0035 00       		.byte	0
 2643 0036 05       		.uleb128 0x5
 2644 0037 0F       		.uleb128 0xf
 2645 0038 00       		.byte	0
 2646 0039 0B       		.uleb128 0xb
 2647 003a 0B       		.uleb128 0xb
 2648 003b 49       		.uleb128 0x49
 2649 003c 13       		.uleb128 0x13
 2650 003d 00       		.byte	0
 2651 003e 00       		.byte	0
 2652 003f 06       		.uleb128 0x6
 2653 0040 16       		.uleb128 0x16
 2654 0041 00       		.byte	0
 2655 0042 03       		.uleb128 0x3
 2656 0043 0E       		.uleb128 0xe
 2657 0044 3A       		.uleb128 0x3a
 2658 0045 0B       		.uleb128 0xb
 2659 0046 3B       		.uleb128 0x3b
 2660 0047 05       		.uleb128 0x5
 2661 0048 49       		.uleb128 0x49
 2662 0049 13       		.uleb128 0x13
 2663 004a 00       		.byte	0
 2664 004b 00       		.byte	0
 2665 004c 07       		.uleb128 0x7
 2666 004d 13       		.uleb128 0x13
 2667 004e 01       		.byte	0x1
 2668 004f 03       		.uleb128 0x3
 2669 0050 0E       		.uleb128 0xe
 2670 0051 0B       		.uleb128 0xb
 2671 0052 0B       		.uleb128 0xb
 2672 0053 3A       		.uleb128 0x3a
 2673 0054 0B       		.uleb128 0xb
 2674 0055 3B       		.uleb128 0x3b
 2675 0056 0B       		.uleb128 0xb
 2676 0057 01       		.uleb128 0x1
 2677 0058 13       		.uleb128 0x13
 2678 0059 00       		.byte	0
 2679 005a 00       		.byte	0
 2680 005b 08       		.uleb128 0x8
 2681 005c 0D       		.uleb128 0xd
 2682 005d 00       		.byte	0
 2683 005e 03       		.uleb128 0x3
 2684 005f 0E       		.uleb128 0xe
 2685 0060 3A       		.uleb128 0x3a
 2686 0061 0B       		.uleb128 0xb
 2687 0062 3B       		.uleb128 0x3b
 2688 0063 0B       		.uleb128 0xb
 2689 0064 49       		.uleb128 0x49
 2690 0065 13       		.uleb128 0x13
 2691 0066 38       		.uleb128 0x38
 2692 0067 0B       		.uleb128 0xb
 2693 0068 00       		.byte	0
 2694 0069 00       		.byte	0
 2695 006a 09       		.uleb128 0x9
 2696 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 60


 2697 006c 01       		.byte	0x1
 2698 006d 03       		.uleb128 0x3
 2699 006e 0E       		.uleb128 0xe
 2700 006f 0B       		.uleb128 0xb
 2701 0070 0B       		.uleb128 0xb
 2702 0071 3A       		.uleb128 0x3a
 2703 0072 0B       		.uleb128 0xb
 2704 0073 3B       		.uleb128 0x3b
 2705 0074 0B       		.uleb128 0xb
 2706 0075 01       		.uleb128 0x1
 2707 0076 13       		.uleb128 0x13
 2708 0077 00       		.byte	0
 2709 0078 00       		.byte	0
 2710 0079 0A       		.uleb128 0xa
 2711 007a 28       		.uleb128 0x28
 2712 007b 00       		.byte	0
 2713 007c 03       		.uleb128 0x3
 2714 007d 0E       		.uleb128 0xe
 2715 007e 1C       		.uleb128 0x1c
 2716 007f 0D       		.uleb128 0xd
 2717 0080 00       		.byte	0
 2718 0081 00       		.byte	0
 2719 0082 0B       		.uleb128 0xb
 2720 0083 2E       		.uleb128 0x2e
 2721 0084 00       		.byte	0
 2722 0085 3F       		.uleb128 0x3f
 2723 0086 19       		.uleb128 0x19
 2724 0087 03       		.uleb128 0x3
 2725 0088 0E       		.uleb128 0xe
 2726 0089 3A       		.uleb128 0x3a
 2727 008a 0B       		.uleb128 0xb
 2728 008b 3B       		.uleb128 0x3b
 2729 008c 0B       		.uleb128 0xb
 2730 008d 27       		.uleb128 0x27
 2731 008e 19       		.uleb128 0x19
 2732 008f 11       		.uleb128 0x11
 2733 0090 01       		.uleb128 0x1
 2734 0091 12       		.uleb128 0x12
 2735 0092 06       		.uleb128 0x6
 2736 0093 40       		.uleb128 0x40
 2737 0094 18       		.uleb128 0x18
 2738 0095 9642     		.uleb128 0x2116
 2739 0097 19       		.uleb128 0x19
 2740 0098 00       		.byte	0
 2741 0099 00       		.byte	0
 2742 009a 0C       		.uleb128 0xc
 2743 009b 2E       		.uleb128 0x2e
 2744 009c 00       		.byte	0
 2745 009d 3F       		.uleb128 0x3f
 2746 009e 19       		.uleb128 0x19
 2747 009f 03       		.uleb128 0x3
 2748 00a0 0E       		.uleb128 0xe
 2749 00a1 3A       		.uleb128 0x3a
 2750 00a2 0B       		.uleb128 0xb
 2751 00a3 3B       		.uleb128 0x3b
 2752 00a4 0B       		.uleb128 0xb
 2753 00a5 27       		.uleb128 0x27
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 61


 2754 00a6 19       		.uleb128 0x19
 2755 00a7 11       		.uleb128 0x11
 2756 00a8 01       		.uleb128 0x1
 2757 00a9 12       		.uleb128 0x12
 2758 00aa 06       		.uleb128 0x6
 2759 00ab 40       		.uleb128 0x40
 2760 00ac 18       		.uleb128 0x18
 2761 00ad 9742     		.uleb128 0x2117
 2762 00af 19       		.uleb128 0x19
 2763 00b0 00       		.byte	0
 2764 00b1 00       		.byte	0
 2765 00b2 0D       		.uleb128 0xd
 2766 00b3 2E       		.uleb128 0x2e
 2767 00b4 01       		.byte	0x1
 2768 00b5 3F       		.uleb128 0x3f
 2769 00b6 19       		.uleb128 0x19
 2770 00b7 03       		.uleb128 0x3
 2771 00b8 0E       		.uleb128 0xe
 2772 00b9 3A       		.uleb128 0x3a
 2773 00ba 0B       		.uleb128 0xb
 2774 00bb 3B       		.uleb128 0x3b
 2775 00bc 0B       		.uleb128 0xb
 2776 00bd 49       		.uleb128 0x49
 2777 00be 13       		.uleb128 0x13
 2778 00bf 11       		.uleb128 0x11
 2779 00c0 01       		.uleb128 0x1
 2780 00c1 12       		.uleb128 0x12
 2781 00c2 06       		.uleb128 0x6
 2782 00c3 40       		.uleb128 0x40
 2783 00c4 18       		.uleb128 0x18
 2784 00c5 9642     		.uleb128 0x2116
 2785 00c7 19       		.uleb128 0x19
 2786 00c8 01       		.uleb128 0x1
 2787 00c9 13       		.uleb128 0x13
 2788 00ca 00       		.byte	0
 2789 00cb 00       		.byte	0
 2790 00cc 0E       		.uleb128 0xe
 2791 00cd 34       		.uleb128 0x34
 2792 00ce 00       		.byte	0
 2793 00cf 03       		.uleb128 0x3
 2794 00d0 0E       		.uleb128 0xe
 2795 00d1 3A       		.uleb128 0x3a
 2796 00d2 0B       		.uleb128 0xb
 2797 00d3 3B       		.uleb128 0x3b
 2798 00d4 0B       		.uleb128 0xb
 2799 00d5 49       		.uleb128 0x49
 2800 00d6 13       		.uleb128 0x13
 2801 00d7 02       		.uleb128 0x2
 2802 00d8 18       		.uleb128 0x18
 2803 00d9 00       		.byte	0
 2804 00da 00       		.byte	0
 2805 00db 0F       		.uleb128 0xf
 2806 00dc 34       		.uleb128 0x34
 2807 00dd 00       		.byte	0
 2808 00de 03       		.uleb128 0x3
 2809 00df 0E       		.uleb128 0xe
 2810 00e0 3A       		.uleb128 0x3a
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 62


 2811 00e1 0B       		.uleb128 0xb
 2812 00e2 3B       		.uleb128 0x3b
 2813 00e3 0B       		.uleb128 0xb
 2814 00e4 49       		.uleb128 0x49
 2815 00e5 13       		.uleb128 0x13
 2816 00e6 00       		.byte	0
 2817 00e7 00       		.byte	0
 2818 00e8 10       		.uleb128 0x10
 2819 00e9 2E       		.uleb128 0x2e
 2820 00ea 01       		.byte	0x1
 2821 00eb 3F       		.uleb128 0x3f
 2822 00ec 19       		.uleb128 0x19
 2823 00ed 03       		.uleb128 0x3
 2824 00ee 0E       		.uleb128 0xe
 2825 00ef 3A       		.uleb128 0x3a
 2826 00f0 0B       		.uleb128 0xb
 2827 00f1 3B       		.uleb128 0x3b
 2828 00f2 05       		.uleb128 0x5
 2829 00f3 27       		.uleb128 0x27
 2830 00f4 19       		.uleb128 0x19
 2831 00f5 11       		.uleb128 0x11
 2832 00f6 01       		.uleb128 0x1
 2833 00f7 12       		.uleb128 0x12
 2834 00f8 06       		.uleb128 0x6
 2835 00f9 40       		.uleb128 0x40
 2836 00fa 18       		.uleb128 0x18
 2837 00fb 9642     		.uleb128 0x2116
 2838 00fd 19       		.uleb128 0x19
 2839 00fe 01       		.uleb128 0x1
 2840 00ff 13       		.uleb128 0x13
 2841 0100 00       		.byte	0
 2842 0101 00       		.byte	0
 2843 0102 11       		.uleb128 0x11
 2844 0103 05       		.uleb128 0x5
 2845 0104 00       		.byte	0
 2846 0105 03       		.uleb128 0x3
 2847 0106 0E       		.uleb128 0xe
 2848 0107 3A       		.uleb128 0x3a
 2849 0108 0B       		.uleb128 0xb
 2850 0109 3B       		.uleb128 0x3b
 2851 010a 05       		.uleb128 0x5
 2852 010b 49       		.uleb128 0x49
 2853 010c 13       		.uleb128 0x13
 2854 010d 02       		.uleb128 0x2
 2855 010e 18       		.uleb128 0x18
 2856 010f 00       		.byte	0
 2857 0110 00       		.byte	0
 2858 0111 12       		.uleb128 0x12
 2859 0112 34       		.uleb128 0x34
 2860 0113 00       		.byte	0
 2861 0114 03       		.uleb128 0x3
 2862 0115 0E       		.uleb128 0xe
 2863 0116 3A       		.uleb128 0x3a
 2864 0117 0B       		.uleb128 0xb
 2865 0118 3B       		.uleb128 0x3b
 2866 0119 05       		.uleb128 0x5
 2867 011a 49       		.uleb128 0x49
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 63


 2868 011b 13       		.uleb128 0x13
 2869 011c 02       		.uleb128 0x2
 2870 011d 18       		.uleb128 0x18
 2871 011e 00       		.byte	0
 2872 011f 00       		.byte	0
 2873 0120 13       		.uleb128 0x13
 2874 0121 2E       		.uleb128 0x2e
 2875 0122 01       		.byte	0x1
 2876 0123 3F       		.uleb128 0x3f
 2877 0124 19       		.uleb128 0x19
 2878 0125 03       		.uleb128 0x3
 2879 0126 0E       		.uleb128 0xe
 2880 0127 3A       		.uleb128 0x3a
 2881 0128 0B       		.uleb128 0xb
 2882 0129 3B       		.uleb128 0x3b
 2883 012a 05       		.uleb128 0x5
 2884 012b 27       		.uleb128 0x27
 2885 012c 19       		.uleb128 0x19
 2886 012d 49       		.uleb128 0x49
 2887 012e 13       		.uleb128 0x13
 2888 012f 11       		.uleb128 0x11
 2889 0130 01       		.uleb128 0x1
 2890 0131 12       		.uleb128 0x12
 2891 0132 06       		.uleb128 0x6
 2892 0133 40       		.uleb128 0x40
 2893 0134 18       		.uleb128 0x18
 2894 0135 9642     		.uleb128 0x2116
 2895 0137 19       		.uleb128 0x19
 2896 0138 01       		.uleb128 0x1
 2897 0139 13       		.uleb128 0x13
 2898 013a 00       		.byte	0
 2899 013b 00       		.byte	0
 2900 013c 14       		.uleb128 0x14
 2901 013d 05       		.uleb128 0x5
 2902 013e 00       		.byte	0
 2903 013f 03       		.uleb128 0x3
 2904 0140 08       		.uleb128 0x8
 2905 0141 3A       		.uleb128 0x3a
 2906 0142 0B       		.uleb128 0xb
 2907 0143 3B       		.uleb128 0x3b
 2908 0144 05       		.uleb128 0x5
 2909 0145 49       		.uleb128 0x49
 2910 0146 13       		.uleb128 0x13
 2911 0147 02       		.uleb128 0x2
 2912 0148 18       		.uleb128 0x18
 2913 0149 00       		.byte	0
 2914 014a 00       		.byte	0
 2915 014b 15       		.uleb128 0x15
 2916 014c 2E       		.uleb128 0x2e
 2917 014d 01       		.byte	0x1
 2918 014e 3F       		.uleb128 0x3f
 2919 014f 19       		.uleb128 0x19
 2920 0150 03       		.uleb128 0x3
 2921 0151 0E       		.uleb128 0xe
 2922 0152 3A       		.uleb128 0x3a
 2923 0153 0B       		.uleb128 0xb
 2924 0154 3B       		.uleb128 0x3b
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 64


 2925 0155 05       		.uleb128 0x5
 2926 0156 11       		.uleb128 0x11
 2927 0157 01       		.uleb128 0x1
 2928 0158 12       		.uleb128 0x12
 2929 0159 06       		.uleb128 0x6
 2930 015a 40       		.uleb128 0x40
 2931 015b 18       		.uleb128 0x18
 2932 015c 9642     		.uleb128 0x2116
 2933 015e 19       		.uleb128 0x19
 2934 015f 01       		.uleb128 0x1
 2935 0160 13       		.uleb128 0x13
 2936 0161 00       		.byte	0
 2937 0162 00       		.byte	0
 2938 0163 16       		.uleb128 0x16
 2939 0164 34       		.uleb128 0x34
 2940 0165 00       		.byte	0
 2941 0166 03       		.uleb128 0x3
 2942 0167 08       		.uleb128 0x8
 2943 0168 3A       		.uleb128 0x3a
 2944 0169 0B       		.uleb128 0xb
 2945 016a 3B       		.uleb128 0x3b
 2946 016b 05       		.uleb128 0x5
 2947 016c 49       		.uleb128 0x49
 2948 016d 13       		.uleb128 0x13
 2949 016e 02       		.uleb128 0x2
 2950 016f 18       		.uleb128 0x18
 2951 0170 00       		.byte	0
 2952 0171 00       		.byte	0
 2953 0172 17       		.uleb128 0x17
 2954 0173 0B       		.uleb128 0xb
 2955 0174 01       		.byte	0x1
 2956 0175 11       		.uleb128 0x11
 2957 0176 01       		.uleb128 0x1
 2958 0177 12       		.uleb128 0x12
 2959 0178 06       		.uleb128 0x6
 2960 0179 00       		.byte	0
 2961 017a 00       		.byte	0
 2962 017b 18       		.uleb128 0x18
 2963 017c 01       		.uleb128 0x1
 2964 017d 01       		.byte	0x1
 2965 017e 49       		.uleb128 0x49
 2966 017f 13       		.uleb128 0x13
 2967 0180 01       		.uleb128 0x1
 2968 0181 13       		.uleb128 0x13
 2969 0182 00       		.byte	0
 2970 0183 00       		.byte	0
 2971 0184 19       		.uleb128 0x19
 2972 0185 21       		.uleb128 0x21
 2973 0186 00       		.byte	0
 2974 0187 49       		.uleb128 0x49
 2975 0188 13       		.uleb128 0x13
 2976 0189 2F       		.uleb128 0x2f
 2977 018a 0B       		.uleb128 0xb
 2978 018b 00       		.byte	0
 2979 018c 00       		.byte	0
 2980 018d 1A       		.uleb128 0x1a
 2981 018e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 65


 2982 018f 00       		.byte	0
 2983 0190 3F       		.uleb128 0x3f
 2984 0191 19       		.uleb128 0x19
 2985 0192 03       		.uleb128 0x3
 2986 0193 0E       		.uleb128 0xe
 2987 0194 3A       		.uleb128 0x3a
 2988 0195 0B       		.uleb128 0xb
 2989 0196 3B       		.uleb128 0x3b
 2990 0197 05       		.uleb128 0x5
 2991 0198 11       		.uleb128 0x11
 2992 0199 01       		.uleb128 0x1
 2993 019a 12       		.uleb128 0x12
 2994 019b 06       		.uleb128 0x6
 2995 019c 40       		.uleb128 0x40
 2996 019d 18       		.uleb128 0x18
 2997 019e 9642     		.uleb128 0x2116
 2998 01a0 19       		.uleb128 0x19
 2999 01a1 00       		.byte	0
 3000 01a2 00       		.byte	0
 3001 01a3 1B       		.uleb128 0x1b
 3002 01a4 2E       		.uleb128 0x2e
 3003 01a5 01       		.byte	0x1
 3004 01a6 3F       		.uleb128 0x3f
 3005 01a7 19       		.uleb128 0x19
 3006 01a8 03       		.uleb128 0x3
 3007 01a9 0E       		.uleb128 0xe
 3008 01aa 3A       		.uleb128 0x3a
 3009 01ab 0B       		.uleb128 0xb
 3010 01ac 3B       		.uleb128 0x3b
 3011 01ad 05       		.uleb128 0x5
 3012 01ae 27       		.uleb128 0x27
 3013 01af 19       		.uleb128 0x19
 3014 01b0 11       		.uleb128 0x11
 3015 01b1 01       		.uleb128 0x1
 3016 01b2 12       		.uleb128 0x12
 3017 01b3 06       		.uleb128 0x6
 3018 01b4 40       		.uleb128 0x40
 3019 01b5 18       		.uleb128 0x18
 3020 01b6 9742     		.uleb128 0x2117
 3021 01b8 19       		.uleb128 0x19
 3022 01b9 01       		.uleb128 0x1
 3023 01ba 13       		.uleb128 0x13
 3024 01bb 00       		.byte	0
 3025 01bc 00       		.byte	0
 3026 01bd 1C       		.uleb128 0x1c
 3027 01be 34       		.uleb128 0x34
 3028 01bf 00       		.byte	0
 3029 01c0 03       		.uleb128 0x3
 3030 01c1 0E       		.uleb128 0xe
 3031 01c2 3A       		.uleb128 0x3a
 3032 01c3 0B       		.uleb128 0xb
 3033 01c4 3B       		.uleb128 0x3b
 3034 01c5 05       		.uleb128 0x5
 3035 01c6 49       		.uleb128 0x49
 3036 01c7 13       		.uleb128 0x13
 3037 01c8 3F       		.uleb128 0x3f
 3038 01c9 19       		.uleb128 0x19
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 66


 3039 01ca 3C       		.uleb128 0x3c
 3040 01cb 19       		.uleb128 0x19
 3041 01cc 00       		.byte	0
 3042 01cd 00       		.byte	0
 3043 01ce 1D       		.uleb128 0x1d
 3044 01cf 35       		.uleb128 0x35
 3045 01d0 00       		.byte	0
 3046 01d1 49       		.uleb128 0x49
 3047 01d2 13       		.uleb128 0x13
 3048 01d3 00       		.byte	0
 3049 01d4 00       		.byte	0
 3050 01d5 1E       		.uleb128 0x1e
 3051 01d6 34       		.uleb128 0x34
 3052 01d7 00       		.byte	0
 3053 01d8 03       		.uleb128 0x3
 3054 01d9 08       		.uleb128 0x8
 3055 01da 3A       		.uleb128 0x3a
 3056 01db 0B       		.uleb128 0xb
 3057 01dc 3B       		.uleb128 0x3b
 3058 01dd 0B       		.uleb128 0xb
 3059 01de 49       		.uleb128 0x49
 3060 01df 13       		.uleb128 0x13
 3061 01e0 3F       		.uleb128 0x3f
 3062 01e1 19       		.uleb128 0x19
 3063 01e2 02       		.uleb128 0x2
 3064 01e3 18       		.uleb128 0x18
 3065 01e4 00       		.byte	0
 3066 01e5 00       		.byte	0
 3067 01e6 1F       		.uleb128 0x1f
 3068 01e7 34       		.uleb128 0x34
 3069 01e8 00       		.byte	0
 3070 01e9 03       		.uleb128 0x3
 3071 01ea 0E       		.uleb128 0xe
 3072 01eb 3A       		.uleb128 0x3a
 3073 01ec 0B       		.uleb128 0xb
 3074 01ed 3B       		.uleb128 0x3b
 3075 01ee 0B       		.uleb128 0xb
 3076 01ef 49       		.uleb128 0x49
 3077 01f0 13       		.uleb128 0x13
 3078 01f1 3F       		.uleb128 0x3f
 3079 01f2 19       		.uleb128 0x19
 3080 01f3 02       		.uleb128 0x2
 3081 01f4 18       		.uleb128 0x18
 3082 01f5 00       		.byte	0
 3083 01f6 00       		.byte	0
 3084 01f7 00       		.byte	0
 3085              		.section	.debug_aranges,"",%progbits
 3086 0000 94000000 		.4byte	0x94
 3087 0004 0200     		.2byte	0x2
 3088 0006 00000000 		.4byte	.Ldebug_info0
 3089 000a 04       		.byte	0x4
 3090 000b 00       		.byte	0
 3091 000c 0000     		.2byte	0
 3092 000e 0000     		.2byte	0
 3093 0010 00000000 		.4byte	.LFB63
 3094 0014 30000000 		.4byte	.LFE63-.LFB63
 3095 0018 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 67


 3096 001c 18000000 		.4byte	.LFE64-.LFB64
 3097 0020 00000000 		.4byte	.LFB65
 3098 0024 90000000 		.4byte	.LFE65-.LFB65
 3099 0028 00000000 		.4byte	.LFB66
 3100 002c 78010000 		.4byte	.LFE66-.LFB66
 3101 0030 00000000 		.4byte	.LFB67
 3102 0034 CC000000 		.4byte	.LFE67-.LFB67
 3103 0038 00000000 		.4byte	.LFB68
 3104 003c 24000000 		.4byte	.LFE68-.LFB68
 3105 0040 00000000 		.4byte	.LFB69
 3106 0044 B4000000 		.4byte	.LFE69-.LFB69
 3107 0048 00000000 		.4byte	.LFB70
 3108 004c 2A000000 		.4byte	.LFE70-.LFB70
 3109 0050 00000000 		.4byte	.LFB71
 3110 0054 2A000000 		.4byte	.LFE71-.LFB71
 3111 0058 00000000 		.4byte	.LFB72
 3112 005c 52000000 		.4byte	.LFE72-.LFB72
 3113 0060 00000000 		.4byte	.LFB73
 3114 0064 2C000000 		.4byte	.LFE73-.LFB73
 3115 0068 00000000 		.4byte	.LFB74
 3116 006c 40000000 		.4byte	.LFE74-.LFB74
 3117 0070 00000000 		.4byte	.LFB75
 3118 0074 40000000 		.4byte	.LFE75-.LFB75
 3119 0078 00000000 		.4byte	.LFB76
 3120 007c 10010000 		.4byte	.LFE76-.LFB76
 3121 0080 00000000 		.4byte	.LFB77
 3122 0084 FC000000 		.4byte	.LFE77-.LFB77
 3123 0088 00000000 		.4byte	.LFB78
 3124 008c 14000000 		.4byte	.LFE78-.LFB78
 3125 0090 00000000 		.4byte	0
 3126 0094 00000000 		.4byte	0
 3127              		.section	.debug_ranges,"",%progbits
 3128              	.Ldebug_ranges0:
 3129 0000 00000000 		.4byte	.LFB63
 3130 0004 30000000 		.4byte	.LFE63
 3131 0008 00000000 		.4byte	.LFB64
 3132 000c 18000000 		.4byte	.LFE64
 3133 0010 00000000 		.4byte	.LFB65
 3134 0014 90000000 		.4byte	.LFE65
 3135 0018 00000000 		.4byte	.LFB66
 3136 001c 78010000 		.4byte	.LFE66
 3137 0020 00000000 		.4byte	.LFB67
 3138 0024 CC000000 		.4byte	.LFE67
 3139 0028 00000000 		.4byte	.LFB68
 3140 002c 24000000 		.4byte	.LFE68
 3141 0030 00000000 		.4byte	.LFB69
 3142 0034 B4000000 		.4byte	.LFE69
 3143 0038 00000000 		.4byte	.LFB70
 3144 003c 2A000000 		.4byte	.LFE70
 3145 0040 00000000 		.4byte	.LFB71
 3146 0044 2A000000 		.4byte	.LFE71
 3147 0048 00000000 		.4byte	.LFB72
 3148 004c 52000000 		.4byte	.LFE72
 3149 0050 00000000 		.4byte	.LFB73
 3150 0054 2C000000 		.4byte	.LFE73
 3151 0058 00000000 		.4byte	.LFB74
 3152 005c 40000000 		.4byte	.LFE74
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 68


 3153 0060 00000000 		.4byte	.LFB75
 3154 0064 40000000 		.4byte	.LFE75
 3155 0068 00000000 		.4byte	.LFB76
 3156 006c 10010000 		.4byte	.LFE76
 3157 0070 00000000 		.4byte	.LFB77
 3158 0074 FC000000 		.4byte	.LFE77
 3159 0078 00000000 		.4byte	.LFB78
 3160 007c 14000000 		.4byte	.LFE78
 3161 0080 00000000 		.4byte	0
 3162 0084 00000000 		.4byte	0
 3163              		.section	.debug_line,"",%progbits
 3164              	.Ldebug_line0:
 3165 0000 76030000 		.section	.debug_str,"MS",%progbits,1
 3165      02005501 
 3165      00000201 
 3165      FB0E0D00 
 3165      01010101 
 3166              	.LASF74:
 3167 0000 636F7272 		.ascii	"correction\000"
 3167      65637469 
 3167      6F6E00
 3168              	.LASF84:
 3169 000b 74735F65 		.ascii	"ts_enc\000"
 3169      6E6300
 3170              	.LASF60:
 3171 0012 6D325F64 		.ascii	"m2_dist\000"
 3171      69737400 
 3172              	.LASF93:
 3173 001a 666C6167 		.ascii	"flag_packet\000"
 3173      5F706163 
 3173      6B657400 
 3174              	.LASF40:
 3175 0026 4D454449 		.ascii	"MEDIUM_RIGHT\000"
 3175      554D5F52 
 3175      49474854 
 3175      00
 3176              	.LASF110:
 3177 0033 2E5C6D61 		.ascii	".\\main.c\000"
 3177      696E2E63 
 3177      00
 3178              	.LASF37:
 3179 003c 434F5252 		.ascii	"CORRECT\000"
 3179      45435400 
 3180              	.LASF113:
 3181 0044 73746174 		.ascii	"state\000"
 3181      6500
 3182              	.LASF90:
 3183 004a 666C6167 		.ascii	"flag_ts_speed\000"
 3183      5F74735F 
 3183      73706565 
 3183      6400
 3184              	.LASF33:
 3185 0058 67325F78 		.ascii	"g2_xpos\000"
 3185      706F7300 
 3186              	.LASF2:
 3187 0060 73686F72 		.ascii	"short int\000"
 3187      7420696E 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 69


 3187      7400
 3188              	.LASF101:
 3189 006a 73797374 		.ascii	"system_state\000"
 3189      656D5F73 
 3189      74617465 
 3189      00
 3190              	.LASF9:
 3191 0077 73697A65 		.ascii	"sizetype\000"
 3191      74797065 
 3191      00
 3192              	.LASF67:
 3193 0080 6368616E 		.ascii	"changeRightWheelSpeed\000"
 3193      67655269 
 3193      67687457 
 3193      6865656C 
 3193      53706565 
 3194              	.LASF100:
 3195 0096 75736242 		.ascii	"usbBuffer\000"
 3195      75666665 
 3195      7200
 3196              	.LASF38:
 3197 00a0 534C4947 		.ascii	"SLIGHTLY_RIGHT\000"
 3197      48544C59 
 3197      5F524947 
 3197      485400
 3198              	.LASF55:
 3199 00af 6D61696E 		.ascii	"main\000"
 3199      00
 3200              	.LASF72:
 3201 00b4 69734C65 		.ascii	"isLeftWheel\000"
 3201      66745768 
 3201      65656C00 
 3202              	.LASF111:
 3203 00c0 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Desktop\\Flik\\CS"
 3203      6C65732E 
 3203      6175636B 
 3203      6C616E64 
 3203      2E61632E 
 3204 00ed 3330315F 		.ascii	"301_Class.cyprj.Archive01-20190825T234813Z-001\\CS3"
 3204      436C6173 
 3204      732E6379 
 3204      70726A2E 
 3204      41726368 
 3205 011f 30315F43 		.ascii	"01_Class.cyprj.Archive01\\CS301_Class.cydsn\000"
 3205      6C617373 
 3205      2E637970 
 3205      726A2E41 
 3205      72636869 
 3206              	.LASF83:
 3207 014a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3207      52784275 
 3207      66666572 
 3207      00
 3208              	.LASF14:
 3209 0157 75696E74 		.ascii	"uint16\000"
 3209      313600
 3210              	.LASF21:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 70


 3211 015e 696E6465 		.ascii	"index\000"
 3211      7800
 3212              	.LASF16:
 3213 0164 696E7431 		.ascii	"int16\000"
 3213      3600
 3214              	.LASF13:
 3215 016a 75696E74 		.ascii	"uint8\000"
 3215      3800
 3216              	.LASF32:
 3217 0170 67315F64 		.ascii	"g1_direction\000"
 3217      69726563 
 3217      74696F6E 
 3217      00
 3218              	.LASF50:
 3219 017d 70726576 		.ascii	"prevCountM2\000"
 3219      436F756E 
 3219      744D3200 
 3220              	.LASF68:
 3221 0189 636F7272 		.ascii	"correctSpeed\000"
 3221      65637453 
 3221      70656564 
 3221      00
 3222              	.LASF62:
 3223 0196 67657456 		.ascii	"getValForChannel\000"
 3223      616C466F 
 3223      72436861 
 3223      6E6E656C 
 3223      00
 3224              	.LASF108:
 3225 01a7 74696D65 		.ascii	"timer_flag\000"
 3225      725F666C 
 3225      616700
 3226              	.LASF56:
 3227 01b2 676F5374 		.ascii	"goStraight\000"
 3227      72616967 
 3227      687400
 3228              	.LASF18:
 3229 01bd 666C6F61 		.ascii	"float\000"
 3229      7400
 3230              	.LASF6:
 3231 01c3 6C6F6E67 		.ascii	"long long int\000"
 3231      206C6F6E 
 3231      6720696E 
 3231      7400
 3232              	.LASF82:
 3233 01d1 75736250 		.ascii	"usbPutString\000"
 3233      75745374 
 3233      72696E67 
 3233      00
 3234              	.LASF15:
 3235 01de 696E7438 		.ascii	"int8\000"
 3235      00
 3236              	.LASF114:
 3237 01e3 75706461 		.ascii	"updateSensorValues\000"
 3237      74655365 
 3237      6E736F72 
 3237      56616C75 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 71


 3237      657300
 3238              	.LASF89:
 3239 01f6 666C6167 		.ascii	"flag_ts_update\000"
 3239      5F74735F 
 3239      75706461 
 3239      746500
 3240              	.LASF34:
 3241 0205 67325F79 		.ascii	"g2_ypos\000"
 3241      706F7300 
 3242              	.LASF28:
 3243 020d 67305F64 		.ascii	"g0_direction\000"
 3243      69726563 
 3243      74696F6E 
 3243      00
 3244              	.LASF77:
 3245 021a 72696768 		.ascii	"rightIsForward\000"
 3245      74497346 
 3245      6F727761 
 3245      726400
 3246              	.LASF45:
 3247 0229 50415353 		.ascii	"PASS\000"
 3247      00
 3248              	.LASF109:
 3249 022e 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3249      4320342E 
 3249      392E3320 
 3249      32303135 
 3249      30333033 
 3250 0261 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3250      20726576 
 3250      6973696F 
 3250      6E203232 
 3250      31323230 
 3251 0294 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3251      66756E63 
 3251      74696F6E 
 3251      2D736563 
 3251      74696F6E 
 3252              	.LASF42:
 3253 02bc 5455524E 		.ascii	"TURN_RIGHT\000"
 3253      5F524947 
 3253      485400
 3254              	.LASF24:
 3255 02c7 726F626F 		.ascii	"robot_orientation\000"
 3255      745F6F72 
 3255      69656E74 
 3255      6174696F 
 3255      6E00
 3256              	.LASF98:
 3257 02d9 6C696E65 		.ascii	"line\000"
 3257      00
 3258              	.LASF91:
 3259 02de 666C6167 		.ascii	"flag_ts_display\000"
 3259      5F74735F 
 3259      64697370 
 3259      6C617900 
 3260              	.LASF92:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 72


 3261 02ee 666C6167 		.ascii	"flag_rx\000"
 3261      5F727800 
 3262              	.LASF104:
 3263 02f6 6164635F 		.ascii	"adc_readings\000"
 3263      72656164 
 3263      696E6773 
 3263      00
 3264              	.LASF48:
 3265 0303 4144435F 		.ascii	"ADC_ISR\000"
 3265      49535200 
 3266              	.LASF49:
 3267 030b 70726576 		.ascii	"prevCountM1\000"
 3267      436F756E 
 3267      744D3100 
 3268              	.LASF1:
 3269 0317 756E7369 		.ascii	"unsigned char\000"
 3269      676E6564 
 3269      20636861 
 3269      7200
 3270              	.LASF43:
 3271 0325 5455524E 		.ascii	"TURN_LEFT\000"
 3271      5F4C4546 
 3271      5400
 3272              	.LASF27:
 3273 032f 67305F73 		.ascii	"g0_speed\000"
 3273      70656564 
 3273      00
 3274              	.LASF78:
 3275 0338 7475726E 		.ascii	"turnLeft\000"
 3275      4C656674 
 3275      00
 3276              	.LASF47:
 3277 0341 454E434F 		.ascii	"ENCODER_ISR\000"
 3277      4445525F 
 3277      49535200 
 3278              	.LASF0:
 3279 034d 7369676E 		.ascii	"signed char\000"
 3279      65642063 
 3279      68617200 
 3280              	.LASF71:
 3281 0359 64657369 		.ascii	"desired_count\000"
 3281      7265645F 
 3281      636F756E 
 3281      7400
 3282              	.LASF7:
 3283 0367 6C6F6E67 		.ascii	"long long unsigned int\000"
 3283      206C6F6E 
 3283      6720756E 
 3283      7369676E 
 3283      65642069 
 3284              	.LASF99:
 3285 037e 656E7472 		.ascii	"entry\000"
 3285      7900
 3286              	.LASF8:
 3287 0384 756E7369 		.ascii	"unsigned int\000"
 3287      676E6564 
 3287      20696E74 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 73


 3287      00
 3288              	.LASF59:
 3289 0391 6D315F64 		.ascii	"m1_dist\000"
 3289      69737400 
 3290              	.LASF94:
 3291 0399 666C6167 		.ascii	"flag_KB_string\000"
 3291      5F4B425F 
 3291      73747269 
 3291      6E6700
 3292              	.LASF5:
 3293 03a8 6C6F6E67 		.ascii	"long unsigned int\000"
 3293      20756E73 
 3293      69676E65 
 3293      6420696E 
 3293      7400
 3294              	.LASF69:
 3295 03ba 70726576 		.ascii	"prevCount\000"
 3295      436F756E 
 3295      7400
 3296              	.LASF35:
 3297 03c4 67325F73 		.ascii	"g2_speed\000"
 3297      70656564 
 3297      00
 3298              	.LASF29:
 3299 03cd 67315F78 		.ascii	"g1_xpos\000"
 3299      706F7300 
 3300              	.LASF3:
 3301 03d5 73686F72 		.ascii	"short unsigned int\000"
 3301      7420756E 
 3301      7369676E 
 3301      65642069 
 3301      6E7400
 3302              	.LASF112:
 3303 03e8 64617461 		.ascii	"data_main\000"
 3303      5F6D6169 
 3303      6E00
 3304              	.LASF58:
 3305 03f2 64697374 		.ascii	"distance\000"
 3305      616E6365 
 3305      00
 3306              	.LASF10:
 3307 03fb 63686172 		.ascii	"char\000"
 3307      00
 3308              	.LASF103:
 3309 0400 6164635F 		.ascii	"adc_flag\000"
 3309      666C6167 
 3309      00
 3310              	.LASF4:
 3311 0409 6C6F6E67 		.ascii	"long int\000"
 3311      20696E74 
 3311      00
 3312              	.LASF22:
 3313 0412 726F626F 		.ascii	"robot_xpos\000"
 3313      745F7870 
 3313      6F7300
 3314              	.LASF80:
 3315 041d 73686172 		.ascii	"sharpTurnLeft\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 74


 3315      70547572 
 3315      6E4C6566 
 3315      7400
 3316              	.LASF12:
 3317 042b 696E7433 		.ascii	"int32_t\000"
 3317      325F7400 
 3318              	.LASF30:
 3319 0433 67315F79 		.ascii	"g1_ypos\000"
 3319      706F7300 
 3320              	.LASF36:
 3321 043b 67325F64 		.ascii	"g2_direction\000"
 3321      69726563 
 3321      74696F6E 
 3321      00
 3322              	.LASF105:
 3323 0448 73616D70 		.ascii	"sample_count\000"
 3323      6C655F63 
 3323      6F756E74 
 3323      00
 3324              	.LASF31:
 3325 0455 67315F73 		.ascii	"g1_speed\000"
 3325      70656564 
 3325      00
 3326              	.LASF73:
 3327 045e 64696666 		.ascii	"diff_count\000"
 3327      5F636F75 
 3327      6E7400
 3328              	.LASF46:
 3329 0469 726F626F 		.ascii	"robot_state\000"
 3329      745F7374 
 3329      61746500 
 3330              	.LASF97:
 3331 0475 64697370 		.ascii	"displaystring\000"
 3331      6C617973 
 3331      7472696E 
 3331      6700
 3332              	.LASF57:
 3333 0483 64657369 		.ascii	"desired_distance\000"
 3333      7265645F 
 3333      64697374 
 3333      616E6365 
 3333      00
 3334              	.LASF41:
 3335 0494 4D454449 		.ascii	"MEDIUM_LEFT\000"
 3335      554D5F4C 
 3335      45465400 
 3336              	.LASF63:
 3337 04a0 72656164 		.ascii	"reading\000"
 3337      696E6700 
 3338              	.LASF25:
 3339 04a8 67305F78 		.ascii	"g0_xpos\000"
 3339      706F7300 
 3340              	.LASF51:
 3341 04b0 72696768 		.ascii	"right_wheel_count\000"
 3341      745F7768 
 3341      65656C5F 
 3341      636F756E 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 75


 3341      7400
 3342              	.LASF52:
 3343 04c2 6C656674 		.ascii	"left_wheel_count\000"
 3343      5F776865 
 3343      656C5F63 
 3343      6F756E74 
 3343      00
 3344              	.LASF17:
 3345 04d3 696E7433 		.ascii	"int32\000"
 3345      3200
 3346              	.LASF19:
 3347 04d9 646F7562 		.ascii	"double\000"
 3347      6C6500
 3348              	.LASF64:
 3349 04e0 6368616E 		.ascii	"changeLeftWheelSpeed\000"
 3349      67654C65 
 3349      66745768 
 3349      65656C53 
 3349      70656564 
 3350              	.LASF95:
 3351 04f5 64617461 		.ascii	"dataready_flag\000"
 3351      72656164 
 3351      795F666C 
 3351      616700
 3352              	.LASF86:
 3353 0504 74735F73 		.ascii	"ts_speed\000"
 3353      70656564 
 3353      00
 3354              	.LASF70:
 3355 050d 636F756E 		.ascii	"count\000"
 3355      7400
 3356              	.LASF44:
 3357 0513 534C4F57 		.ascii	"SLOW\000"
 3357      00
 3358              	.LASF88:
 3359 0518 666C6167 		.ascii	"flag_ts_enc\000"
 3359      5F74735F 
 3359      656E6300 
 3360              	.LASF11:
 3361 0524 5F5F696E 		.ascii	"__int32_t\000"
 3361      7433325F 
 3361      7400
 3362              	.LASF106:
 3363 052e 636F756E 		.ascii	"countM1\000"
 3363      744D3100 
 3364              	.LASF107:
 3365 0536 636F756E 		.ascii	"countM2\000"
 3365      744D3200 
 3366              	.LASF53:
 3367 053e 706F6C6C 		.ascii	"polling_count\000"
 3367      696E675F 
 3367      636F756E 
 3367      7400
 3368              	.LASF66:
 3369 054c 6E65775F 		.ascii	"new_value\000"
 3369      76616C75 
 3369      6500
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 76


 3370              	.LASF26:
 3371 0556 67305F79 		.ascii	"g0_ypos\000"
 3371      706F7300 
 3372              	.LASF79:
 3373 055e 7475726E 		.ascii	"turnRight\000"
 3373      52696768 
 3373      7400
 3374              	.LASF87:
 3375 0568 74735F64 		.ascii	"ts_display\000"
 3375      6973706C 
 3375      617900
 3376              	.LASF85:
 3377 0573 74735F75 		.ascii	"ts_update\000"
 3377      70646174 
 3377      6500
 3378              	.LASF61:
 3379 057d 67657444 		.ascii	"getDistance\000"
 3379      69737461 
 3379      6E636500 
 3380              	.LASF75:
 3381 0589 73657457 		.ascii	"setWheelDirection\000"
 3381      6865656C 
 3381      44697265 
 3381      6374696F 
 3381      6E00
 3382              	.LASF96:
 3383 059b 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3383      5F72665F 
 3383      7472616E 
 3383      736D6973 
 3383      73696F6E 
 3384              	.LASF23:
 3385 05b7 726F626F 		.ascii	"robot_ypos\000"
 3385      745F7970 
 3385      6F7300
 3386              	.LASF54:
 3387 05c2 70726576 		.ascii	"prev_state\000"
 3387      5F737461 
 3387      746500
 3388              	.LASF65:
 3389 05cd 616D6F75 		.ascii	"amount\000"
 3389      6E7400
 3390              	.LASF102:
 3391 05d4 73656E73 		.ascii	"sensor_readings\000"
 3391      6F725F72 
 3391      65616469 
 3391      6E677300 
 3392              	.LASF20:
 3393 05e4 72737369 		.ascii	"rssi\000"
 3393      00
 3394              	.LASF76:
 3395 05e9 6C656674 		.ascii	"leftIsForward\000"
 3395      4973466F 
 3395      72776172 
 3395      6400
 3396              	.LASF81:
 3397 05f7 73686172 		.ascii	"sharpTurnRight\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1yIsQR.s 			page 77


 3397      70547572 
 3397      6E526967 
 3397      687400
 3398              	.LASF39:
 3399 0606 534C4947 		.ascii	"SLIGHTLY_LEFT\000"
 3399      48544C59 
 3399      5F4C4546 
 3399      5400
 3400              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
