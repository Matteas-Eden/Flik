ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	displaystring
  95 0001 000000   		.align	2
  96              		.type	displaystring, %object
  97              		.size	displaystring, 64
  98              	displaystring:
  99 0004 43533330 		.ascii	"CS301 2020\012\000"
  99      31203230 
  99      32300A00 
 100 0010 00000000 		.space	52
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.comm	line,64,4
 102              		.comm	entry,64,4
 103              		.comm	usbBuffer,64,4
 104              		.comm	system_state,32,4
 105              		.global	sensor_readings
 106              		.bss
 107 0012 0000     		.align	2
 108              		.type	sensor_readings, %object
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 3


 109              		.size	sensor_readings, 6
 110              	sensor_readings:
 111 0014 00000000 		.space	6
 111      0000
 112              		.global	adc_flag
 113 001a 0000     		.align	2
 114              		.type	adc_flag, %object
 115              		.size	adc_flag, 4
 116              	adc_flag:
 117 001c 00000000 		.space	4
 118              		.global	adc_readings
 119              		.align	2
 120              		.type	adc_readings, %object
 121              		.size	adc_readings, 24
 122              	adc_readings:
 123 0020 00000000 		.space	24
 123      00000000 
 123      00000000 
 123      00000000 
 123      00000000 
 124              		.global	sample_count
 125              		.align	2
 126              		.type	sample_count, %object
 127              		.size	sample_count, 4
 128              	sample_count:
 129 0038 00000000 		.space	4
 130              		.global	countM1
 131              		.align	2
 132              		.type	countM1, %object
 133              		.size	countM1, 4
 134              	countM1:
 135 003c 00000000 		.space	4
 136              		.global	countM2
 137              		.align	2
 138              		.type	countM2, %object
 139              		.size	countM2, 4
 140              	countM2:
 141 0040 00000000 		.space	4
 142              		.global	timer_flag
 143              		.align	2
 144              		.type	timer_flag, %object
 145              		.size	timer_flag, 4
 146              	timer_flag:
 147 0044 00000000 		.space	4
 148              		.section	.text.ENCODER_ISR,"ax",%progbits
 149              		.align	2
 150              		.global	ENCODER_ISR
 151              		.thumb
 152              		.thumb_func
 153              		.type	ENCODER_ISR, %function
 154              	ENCODER_ISR:
 155              	.LFB63:
 156              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  * Copyright Univ of Auckland, 2016
   3:.\main.c      ****  * All Rights Reserved
   4:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 4


   5:.\main.c      ****  *
   6:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   7:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   8:.\main.c      ****  *
   9:.\main.c      ****  * ================== INCLUDE ======================
  10:.\main.c      **** */
  11:.\main.c      **** #include <stdio.h>
  12:.\main.c      **** #include <string.h>
  13:.\main.c      **** #include <stdlib.h>
  14:.\main.c      **** #include <project.h>
  15:.\main.c      **** 
  16:.\main.c      **** #include "defines.h"
  17:.\main.c      **** #include "vars.h"
  18:.\main.c      **** //* =================== MACROS =====================
  19:.\main.c      **** // SENSOR MAPPINGS
  20:.\main.c      **** #define TOP_LEFT_SENSOR 0
  21:.\main.c      **** #define TOP_MID_SENSOR 1
  22:.\main.c      **** #define TOP_RIGHT_SENSOR 2
  23:.\main.c      **** #define BOTTOM_LEFT_SENSOR 3
  24:.\main.c      **** #define BOTTOM_MID_SENSOR 4
  25:.\main.c      **** #define BOTTOM_RIGHT_SENSOR 5
  26:.\main.c      **** 
  27:.\main.c      **** // LIGHT SENSORS
  28:.\main.c      **** #define NUM_SENSORS 6
  29:.\main.c      **** #define LIGHT_LEVEL 300
  30:.\main.c      **** 
  31:.\main.c      **** // ADC stuff
  32:.\main.c      **** #define ADC_READINGS_SIZE 90
  33:.\main.c      **** 
  34:.\main.c      **** // Speed calculations
  35:.\main.c      **** #define LINEAR_DISTANCE_PER_REV 20.42035225
  36:.\main.c      **** #define TICKS_PER_REV 228
  37:.\main.c      **** #define TIMER_PERIOD 0.03
  38:.\main.c      **** 
  39:.\main.c      **** // Speed control
  40:.\main.c      **** #define DESIRED_COUNT 8
  41:.\main.c      **** #define TURN_SPEED 450
  42:.\main.c      **** #define MIN_PWM_VAL 250
  43:.\main.c      **** 
  44:.\main.c      **** // Straight line test
  45:.\main.c      **** #define CM_BETWEEN_COORDS 24
  46:.\main.c      **** 
  47:.\main.c      **** // 90 degree turn - TODO: Calculate true values
  48:.\main.c      **** #define TICKS_FOR_TURN 190
  49:.\main.c      **** #define TURN_PWM_VAL 225
  50:.\main.c      **** 
  51:.\main.c      **** // Line following macros - require calibration
  52:.\main.c      **** #define ADJUST_SPEED_LARGE 3
  53:.\main.c      **** #define ADJUST_SPEED_SMALL 1
  54:.\main.c      **** #define MAX_SPEED 9
  55:.\main.c      **** #define MIN_SPEED 4
  56:.\main.c      **** #define SLOW_DOWN_SPEED 1
  57:.\main.c      **** 
  58:.\main.c      **** // Debug flag - uncomment when debugging
  59:.\main.c      **** //#define PUTTY
  60:.\main.c      **** #define PRINT_RATE 0x8000
  61:.\main.c      **** //* ================= TPYE DEF =======================
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 5


  62:.\main.c      **** //typedef struct wheel_speed{
  63:.\main.c      **** //    float m1;
  64:.\main.c      **** //    float m2;
  65:.\main.c      **** //} speed;
  66:.\main.c      **** typedef enum robot_state{
  67:.\main.c      ****     CORRECT,
  68:.\main.c      ****     SLIGHTLY_RIGHT,
  69:.\main.c      ****     SLIGHTLY_LEFT,
  70:.\main.c      ****     MEDIUM_RIGHT,
  71:.\main.c      ****     MEDIUM_LEFT,
  72:.\main.c      ****     TURN_RIGHT,
  73:.\main.c      ****     TURN_LEFT,
  74:.\main.c      ****     SLOW,
  75:.\main.c      ****     PASS
  76:.\main.c      **** } robot_state;
  77:.\main.c      **** //* ================= FUNCTIONS =======================
  78:.\main.c      **** void usbPutString(char *s);
  79:.\main.c      **** int getMax(int * readings);
  80:.\main.c      **** 
  81:.\main.c      **** int32 getValForChannel(int16 n);
  82:.\main.c      **** void updateSensorValues();
  83:.\main.c      **** 
  84:.\main.c      **** //speed getSpeed();
  85:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2);
  86:.\main.c      **** void turnRight();
  87:.\main.c      **** void turnLeft();
  88:.\main.c      **** void sharpTurnRight(int *right_wheel_count, int *left_wheel_count);
  89:.\main.c      **** void sharpTurnLeft(int *right_wheel_count, int *left_wheel_count);
  90:.\main.c      **** void turnForDegrees(int degrees);
  91:.\main.c      **** int8 performTurn(int isLeft);
  92:.\main.c      **** 
  93:.\main.c      **** void goStraight(int desired_distance, int *right_speed_count, int *left_wheel_count);
  94:.\main.c      **** void changeRightWheelSpeed(int amount);
  95:.\main.c      **** void changeLeftWheelSpeed(int amount);
  96:.\main.c      **** void invertWheels();
  97:.\main.c      **** void setWheelDirection(int isLeftForward, int isRightForward);
  98:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel);
  99:.\main.c      **** 
 100:.\main.c      **** float resetDecoderCount(float sum);
 101:.\main.c      **** //* ================= GLOBAL VARIABLES =======================
 102:.\main.c      **** // ADC
 103:.\main.c      **** int8 sensor_readings[NUM_SENSORS] = { 0 };
 104:.\main.c      **** volatile int adc_flag = FALSE;
 105:.\main.c      **** int adc_readings[NUM_SENSORS] = { 0 };
 106:.\main.c      **** int sample_count = 0;
 107:.\main.c      **** // Encoder
 108:.\main.c      **** volatile int countM1 = 0;
 109:.\main.c      **** volatile int countM2 = 0;
 110:.\main.c      **** volatile int timer_flag = FALSE;
 111:.\main.c      **** //* ================== ISR ======================
 112:.\main.c      **** CY_ISR(ENCODER_ISR) {
 157              		.loc 1 112 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 6


 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 00AF     		add	r7, sp, #0
 166              		.cfi_def_cfa_register 7
 113:.\main.c      ****     countM1 = QuadDec_M1_GetCounter();
 167              		.loc 1 113 0
 168 0004 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 169 0008 0346     		mov	r3, r0
 170 000a 1A46     		mov	r2, r3
 171 000c 054B     		ldr	r3, .L2
 172 000e 1A60     		str	r2, [r3]
 114:.\main.c      ****     countM2 = QuadDec_M2_GetCounter();
 173              		.loc 1 114 0
 174 0010 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 175 0014 0346     		mov	r3, r0
 176 0016 1A46     		mov	r2, r3
 177 0018 034B     		ldr	r3, .L2+4
 178 001a 1A60     		str	r2, [r3]
 115:.\main.c      ****     timer_flag = TRUE;
 179              		.loc 1 115 0
 180 001c 034B     		ldr	r3, .L2+8
 181 001e 0122     		movs	r2, #1
 182 0020 1A60     		str	r2, [r3]
 116:.\main.c      **** }
 183              		.loc 1 116 0
 184 0022 80BD     		pop	{r7, pc}
 185              	.L3:
 186              		.align	2
 187              	.L2:
 188 0024 00000000 		.word	countM1
 189 0028 00000000 		.word	countM2
 190 002c 00000000 		.word	timer_flag
 191              		.cfi_endproc
 192              	.LFE63:
 193              		.size	ENCODER_ISR, .-ENCODER_ISR
 194              		.section	.text.ADC_ISR,"ax",%progbits
 195              		.align	2
 196              		.global	ADC_ISR
 197              		.thumb
 198              		.thumb_func
 199              		.type	ADC_ISR, %function
 200              	ADC_ISR:
 201              	.LFB64:
 117:.\main.c      **** 
 118:.\main.c      **** /* ### Retrieve and Store Measurements ### */
 119:.\main.c      **** CY_ISR(ADC_ISR) {
 202              		.loc 1 119 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207 0000 80B4     		push	{r7}
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 120:.\main.c      ****     adc_flag = TRUE;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 7


 212              		.loc 1 120 0
 213 0004 034B     		ldr	r3, .L5
 214 0006 0122     		movs	r2, #1
 215 0008 1A60     		str	r2, [r3]
 121:.\main.c      **** }
 216              		.loc 1 121 0
 217 000a BD46     		mov	sp, r7
 218              		.cfi_def_cfa_register 13
 219              		@ sp needed
 220 000c 5DF8047B 		ldr	r7, [sp], #4
 221              		.cfi_restore 7
 222              		.cfi_def_cfa_offset 0
 223 0010 7047     		bx	lr
 224              	.L6:
 225 0012 00BF     		.align	2
 226              	.L5:
 227 0014 00000000 		.word	adc_flag
 228              		.cfi_endproc
 229              	.LFE64:
 230              		.size	ADC_ISR, .-ADC_ISR
 231              		.section	.text.main,"ax",%progbits
 232              		.align	2
 233              		.global	main
 234              		.thumb
 235              		.thumb_func
 236              		.type	main, %function
 237              	main:
 238              	.LFB65:
 122:.\main.c      **** 
 123:.\main.c      **** /** ## Notes
 124:.\main.c      ****     
 125:.\main.c      ****     Ratio of linear distance to quad decoder ticks
 126:.\main.c      ****     One revolution gives a linear distance (in cm)
 127:.\main.c      ****     Each revolution is 57 ticks (228 for 4x mode)
 128:.\main.c      ****     Centimetres per tick = linear distance / countM(1|2)
 129:.\main.c      ****     
 130:.\main.c      ****     Decoder use a 4x count, so each revolution gives 4 counts
 131:.\main.c      ****     Sampling rate is determined by our 100ms timer (might be a little slow)
 132:.\main.c      ****     
 133:.\main.c      ****     ## Algorithm Control Flow
 134:.\main.c      ****     - Get ADC value for each channel
 135:.\main.c      ****     - Get decoder val for M1 & M2
 136:.\main.c      ****     - Use these values to drive the movement of the robot
 137:.\main.c      ****     
 138:.\main.c      **** */
 139:.\main.c      **** 
 140:.\main.c      **** int main()
 141:.\main.c      **** {
 239              		.loc 1 141 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 24
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 247 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 8


 248              		.cfi_def_cfa_offset 32
 249 0004 00AF     		add	r7, sp, #0
 250              		.cfi_def_cfa_register 7
 142:.\main.c      ****     // delay
 143:.\main.c      ****     CyDelay(2000);
 251              		.loc 1 143 0
 252 0006 4FF4FA60 		mov	r0, #2000
 253 000a FFF7FEFF 		bl	CyDelay
 144:.\main.c      ****     
 145:.\main.c      ****     // --------------------------------
 146:.\main.c      ****     // ----- INITIALIZATIONS ----------
 147:.\main.c      ****     // ========================================
 148:.\main.c      ****     CYGlobalIntEnable;
 254              		.loc 1 148 0
 255              	@ 148 ".\main.c" 1
 256 000e 62B6     		CPSIE   i
 257              	@ 0 "" 2
 149:.\main.c      ****     
 150:.\main.c      ****     // PWMs
 151:.\main.c      ****     PWM_1_Start();
 258              		.loc 1 151 0
 259              		.thumb
 260 0010 FFF7FEFF 		bl	PWM_1_Start
 152:.\main.c      ****     PWM_2_Start();
 261              		.loc 1 152 0
 262 0014 FFF7FEFF 		bl	PWM_2_Start
 153:.\main.c      ****     
 154:.\main.c      ****     // Timer for encoder
 155:.\main.c      ****     Timer_TS_Start();
 263              		.loc 1 155 0
 264 0018 FFF7FEFF 		bl	Timer_TS_Start
 156:.\main.c      ****     isr_TS_Start(); // Timer interrupts need to be started independently
 265              		.loc 1 156 0
 266 001c FFF7FEFF 		bl	isr_TS_Start
 157:.\main.c      ****     isr_TS_StartEx(ENCODER_ISR);
 267              		.loc 1 157 0
 268 0020 1D48     		ldr	r0, .L8
 269 0022 FFF7FEFF 		bl	isr_TS_StartEx
 158:.\main.c      ****     
 159:.\main.c      ****     // Quad Decoders
 160:.\main.c      ****     QuadDec_M1_Start();
 270              		.loc 1 160 0
 271 0026 FFF7FEFF 		bl	QuadDec_M1_Start
 161:.\main.c      ****     QuadDec_M2_Start();
 272              		.loc 1 161 0
 273 002a FFF7FEFF 		bl	QuadDec_M2_Start
 162:.\main.c      ****     
 163:.\main.c      ****     // ADC
 164:.\main.c      ****     ADC_Start(); // Start ADC
 274              		.loc 1 164 0
 275 002e FFF7FEFF 		bl	ADC_Start
 165:.\main.c      ****     ADC_IRQ_Enable(); // Enable ADC interrupts
 276              		.loc 1 165 0
 277 0032 FFF7FEFF 		bl	ADC_IRQ_Enable
 166:.\main.c      ****     ADC_StartConvert(); // Start conversions
 278              		.loc 1 166 0
 279 0036 FFF7FEFF 		bl	ADC_StartConvert
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 9


 167:.\main.c      ****     isr_eoc_StartEx(ADC_ISR); // link interrupt for ADC
 280              		.loc 1 167 0
 281 003a 1848     		ldr	r0, .L8+4
 282 003c FFF7FEFF 		bl	isr_eoc_StartEx
 168:.\main.c      **** 
 169:.\main.c      ****     // ---------- USB SETUP ------------    
 170:.\main.c      ****     #ifdef USE_USB    
 171:.\main.c      ****         USBUART_Start(0, USBUART_5V_OPERATION);
 283              		.loc 1 171 0
 284 0040 0020     		movs	r0, #0
 285 0042 0121     		movs	r1, #1
 286 0044 FFF7FEFF 		bl	USBUART_Start
 172:.\main.c      ****     #endif            
 173:.\main.c      ****     
 174:.\main.c      ****     // To make sure wheels rotate in the same direction i.e. forward
 175:.\main.c      ****     INV2_Write(1);
 287              		.loc 1 175 0
 288 0048 0120     		movs	r0, #1
 289 004a FFF7FEFF 		bl	INV2_Write
 176:.\main.c      ****     
 177:.\main.c      ****     // Storing count values
 178:.\main.c      ****     int prevCountM1 = 0;
 290              		.loc 1 178 0
 291 004e 0023     		movs	r3, #0
 292 0050 7B61     		str	r3, [r7, #20]
 179:.\main.c      ****     int prevCountM2 = 0;
 293              		.loc 1 179 0
 294 0052 0023     		movs	r3, #0
 295 0054 3B61     		str	r3, [r7, #16]
 180:.\main.c      ****     int right_wheel_count = DESIRED_COUNT;
 296              		.loc 1 180 0
 297 0056 0823     		movs	r3, #8
 298 0058 FB60     		str	r3, [r7, #12]
 181:.\main.c      ****     int left_wheel_count = DESIRED_COUNT;
 299              		.loc 1 181 0
 300 005a 0823     		movs	r3, #8
 301 005c BB60     		str	r3, [r7, #8]
 182:.\main.c      ****     int polling_count = 0;
 302              		.loc 1 182 0
 303 005e 0023     		movs	r3, #0
 304 0060 7B60     		str	r3, [r7, #4]
 183:.\main.c      ****     
 184:.\main.c      ****     robot_state state;
 185:.\main.c      ****     robot_state prev_state = CORRECT;
 305              		.loc 1 185 0
 306 0062 0023     		movs	r3, #0
 307 0064 FB70     		strb	r3, [r7, #3]
 186:.\main.c      ****     
 187:.\main.c      ****     //goStraight(CM_BETWEEN_COORDS, &right_wheel_count, &left_wheel_count);
 188:.\main.c      ****     //sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 189:.\main.c      ****     
 190:.\main.c      ****     setWheelDirection(FALSE, TRUE);
 308              		.loc 1 190 0
 309 0066 0020     		movs	r0, #0
 310 0068 0121     		movs	r1, #1
 311 006a FFF7FEFF 		bl	setWheelDirection
 191:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 10


 312              		.loc 1 191 0
 313 006e 4FF4E170 		mov	r0, #450
 314 0072 FFF7FEFF 		bl	PWM_1_WriteCompare
 192:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 315              		.loc 1 192 0
 316 0076 4FF4E170 		mov	r0, #450
 317 007a FFF7FEFF 		bl	PWM_2_WriteCompare
 193:.\main.c      ****     
 194:.\main.c      ****     turnForDegrees(45);
 318              		.loc 1 194 0
 319 007e 2D20     		movs	r0, #45
 320 0080 FFF7FEFF 		bl	turnForDegrees
 195:.\main.c      ****     
 196:.\main.c      ****     PWM_1_WriteCompare(0);
 321              		.loc 1 196 0
 322 0084 0020     		movs	r0, #0
 323 0086 FFF7FEFF 		bl	PWM_1_WriteCompare
 197:.\main.c      ****     PWM_2_WriteCompare(0);
 324              		.loc 1 197 0
 325 008a 0020     		movs	r0, #0
 326 008c FFF7FEFF 		bl	PWM_2_WriteCompare
 198:.\main.c      ****     
 199:.\main.c      **** //    while(1) { // Begin main control
 200:.\main.c      **** //        polling_count++;
 201:.\main.c      **** //        
 202:.\main.c      **** //        if (adc_flag) {
 203:.\main.c      **** //            updateSensorValues();
 204:.\main.c      **** //            adc_flag = FALSE;
 205:.\main.c      **** //        }
 206:.\main.c      **** //        
 207:.\main.c      **** //         // New count values from encoder are ready
 208:.\main.c      **** //        if (timer_flag){
 209:.\main.c      **** //            isr_TS_Disable();
 210:.\main.c      **** //            
 211:.\main.c      **** //            // Correct speed
 212:.\main.c      **** //            correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 213:.\main.c      **** //            correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 214:.\main.c      **** //            
 215:.\main.c      **** //            // Update previous values
 216:.\main.c      **** //            prevCountM1 = countM1;
 217:.\main.c      **** //            prevCountM2 = countM2;
 218:.\main.c      **** //            
 219:.\main.c      **** //            // Reset flag
 220:.\main.c      **** //            timer_flag = FALSE;
 221:.\main.c      **** //            
 222:.\main.c      **** //            isr_TS_Enable();
 223:.\main.c      **** //        }
 224:.\main.c      **** //        
 225:.\main.c      **** //       // follow a line algorithm
 226:.\main.c      **** //        if (sensor_readings[TOP_MID_SENSOR]) { // on line
 227:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 228:.\main.c      **** //                state = SLIGHTLY_RIGHT;
 229:.\main.c      **** //                right_wheel_count -= ADJUST_SPEED_SMALL;
 230:.\main.c      **** //                left_wheel_count += ADJUST_SPEED_SMALL;
 231:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { 
 232:.\main.c      **** //                state = SLIGHTLY_LEFT;
 233:.\main.c      **** //                right_wheel_count += ADJUST_SPEED_SMALL;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 11


 234:.\main.c      **** //                left_wheel_count -= ADJUST_SPEED_SMALL;
 235:.\main.c      **** //            } else { // Correct speed
 236:.\main.c      **** //                state = CORRECT;
 237:.\main.c      **** //            }
 238:.\main.c      **** //        } else { // moved off
 239:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 240:.\main.c      **** //                state = MEDIUM_RIGHT;
 241:.\main.c      **** //                turnRight();
 242:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {/
 243:.\main.c      **** //                state = MEDIUM_LEFT;
 244:.\main.c      **** //				turnLeft();
 245:.\main.c      **** //            // for corners
 246:.\main.c      **** //            } else if (!sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {
 247:.\main.c      **** //                if (sensor_readings[BOTTOM_LEFT_SENSOR]) {
 248:.\main.c      **** //                    state = TURN_LEFT;
 249:.\main.c      **** //                    sharpTurnLeft();
 250:.\main.c      **** //                } else if (sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 251:.\main.c      **** //                    state = TURN_RIGHT;
 252:.\main.c      **** //                    sharpTurnRight();
 253:.\main.c      **** //                 // slow down in preperation for a sharp turn
 254:.\main.c      **** //                } else if (left_wheel_count > MIN_SPEED && right_wheel_count > MIN_SPEED) {
 255:.\main.c      **** //                    state = SLOW;
 256:.\main.c      **** //                    right_wheel_count -= SLOW_DOWN_SPEED;
 257:.\main.c      **** //                    left_wheel_count -= SLOW_DOWN_SPEED;
 258:.\main.c      **** //                } else {
 259:.\main.c      **** //                    state = PASS;
 260:.\main.c      **** //                }
 261:.\main.c      **** //            }
 262:.\main.c      **** //        }
 263:.\main.c      **** //        
 264:.\main.c      **** //        if (right_wheel_count > MAX_SPEED) {
 265:.\main.c      **** //            right_wheel_count = MAX_SPEED;
 266:.\main.c      **** //        }
 267:.\main.c      **** //        if (left_wheel_count > MAX_SPEED) {
 268:.\main.c      **** //            left_wheel_count = MAX_SPEED;
 269:.\main.c      **** //        }
 270:.\main.c      **** //        if (right_wheel_count < MIN_SPEED) {
 271:.\main.c      **** //            right_wheel_count = MIN_SPEED;
 272:.\main.c      **** //        }
 273:.\main.c      **** //        if (left_wheel_count < MIN_SPEED) {
 274:.\main.c      **** //            left_wheel_count = MIN_SPEED;
 275:.\main.c      **** //        }
 276:.\main.c      **** //        
 277:.\main.c      **** ////        if (polling_count == PRINT_RATE) {
 278:.\main.c      **** //        if (prev_state != state) {
 279:.\main.c      **** //            if (state == SLIGHTLY_LEFT) {
 280:.\main.c      **** //                usbPutString("SLIGHTLY_LEFT\r\n");
 281:.\main.c      **** //            } else if (state == SLIGHTLY_RIGHT) {
 282:.\main.c      **** //                usbPutString("SLIGHTLY_RIGHT\r\n");
 283:.\main.c      **** //            } else if (state == MEDIUM_LEFT) {
 284:.\main.c      **** //                usbPutString("MEDIUM_LEFT\r\n");
 285:.\main.c      **** //            } else if (state == MEDIUM_RIGHT) {
 286:.\main.c      **** //                usbPutString("MEDIUM_RIGHT\r\n");
 287:.\main.c      **** //            } else if (state == TURN_LEFT) {
 288:.\main.c      **** //                usbPutString("TURN_LEFT\r\n");
 289:.\main.c      **** //            } else if (state == TURN_RIGHT) {
 290:.\main.c      **** //                usbPutString("TURN_RIGHT\r\n");
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 12


 291:.\main.c      **** //            } else if (state == SLOW) {
 292:.\main.c      **** //                usbPutString("SLOW\r\n");
 293:.\main.c      **** //            } else if (state == PASS) {
 294:.\main.c      **** //                usbPutString("PASS\r\n");
 295:.\main.c      **** //            } else if (state == CORRECT) {
 296:.\main.c      **** //                usbPutString("CORRECT\r\n");
 297:.\main.c      **** //            }
 298:.\main.c      **** //            prev_state = state;
 299:.\main.c      **** //        }
 300:.\main.c      **** //                
 301:.\main.c      **** //                
 302:.\main.c      **** //        if (polling_count == PRINT_RATE) polling_count = 0;
 303:.\main.c      **** //    }
 304:.\main.c      **** }
 327              		.loc 1 304 0
 328 0090 1846     		mov	r0, r3
 329 0092 1837     		adds	r7, r7, #24
 330              		.cfi_def_cfa_offset 8
 331 0094 BD46     		mov	sp, r7
 332              		.cfi_def_cfa_register 13
 333              		@ sp needed
 334 0096 80BD     		pop	{r7, pc}
 335              	.L9:
 336              		.align	2
 337              	.L8:
 338 0098 00000000 		.word	ENCODER_ISR
 339 009c 00000000 		.word	ADC_ISR
 340              		.cfi_endproc
 341              	.LFE65:
 342              		.size	main, .-main
 343              		.global	__aeabi_fadd
 344              		.global	__aeabi_i2f
 345              		.global	__aeabi_fcmpgt
 346              		.section	.text.goStraight,"ax",%progbits
 347              		.align	2
 348              		.global	goStraight
 349              		.thumb
 350              		.thumb_func
 351              		.type	goStraight, %function
 352              	goStraight:
 353              	.LFB66:
 305:.\main.c      **** 
 306:.\main.c      **** 
 307:.\main.c      **** /* Template code */
 308:.\main.c      **** /*
 309:.\main.c      ****     while(TRUE){
 310:.\main.c      ****         
 311:.\main.c      ****         // Update sensor values from ADC
 312:.\main.c      ****         if (adc_flag){
 313:.\main.c      ****             updateSensorValues();
 314:.\main.c      ****             adc_flag = FALSE;
 315:.\main.c      ****         }
 316:.\main.c      ****         // Update distance and speed of robot
 317:.\main.c      ****         if (timer_flag){
 318:.\main.c      ****             isr_TS_Disable();
 319:.\main.c      ****             
 320:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 13


 321:.\main.c      ****             
 322:.\main.c      ****             // Correct speed
 323:.\main.c      ****             correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 324:.\main.c      ****             correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 325:.\main.c      ****             
 326:.\main.c      ****             // Update previous values
 327:.\main.c      ****             prevCountM1 = countM1;
 328:.\main.c      ****             prevCountM2 = countM2;
 329:.\main.c      ****             
 330:.\main.c      ****             // Reset flag
 331:.\main.c      ****             timer_flag = FALSE;
 332:.\main.c      ****             
 333:.\main.c      ****             isr_TS_Enable();
 334:.\main.c      ****         }
 335:.\main.c      **** 
 336:.\main.c      ****         // Execute next instruction in queue after reaching a certain distance
 337:.\main.c      ****         if (distance == NODE_DISTANCE){
 338:.\main.c      ****             // Execute the next instruction (uses function pointers)
 339:.\main.c      ****             instructions[instruction_count]();
 340:.\main.c      ****             instruction_count++;
 341:.\main.c      ****             distance = 0;
 342:.\main.c      ****         }
 343:.\main.c      ****     }
 344:.\main.c      **** */
 345:.\main.c      **** 
 346:.\main.c      **** void goStraight(int desired_distance, int *right_wheel_count, int *left_wheel_count) {
 354              		.loc 1 346 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 32
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0000 80B5     		push	{r7, lr}
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 88B0     		sub	sp, sp, #32
 363              		.cfi_def_cfa_offset 40
 364 0004 00AF     		add	r7, sp, #0
 365              		.cfi_def_cfa_register 7
 366 0006 F860     		str	r0, [r7, #12]
 367 0008 B960     		str	r1, [r7, #8]
 368 000a 7A60     		str	r2, [r7, #4]
 347:.\main.c      ****     // Storing count values
 348:.\main.c      ****     int prevCountM1 = 0;
 369              		.loc 1 348 0
 370 000c 0023     		movs	r3, #0
 371 000e FB61     		str	r3, [r7, #28]
 349:.\main.c      ****     int prevCountM2 = 0;
 372              		.loc 1 349 0
 373 0010 0023     		movs	r3, #0
 374 0012 BB61     		str	r3, [r7, #24]
 350:.\main.c      **** //    int right_wheel_count = DESIRED_COUNT;
 351:.\main.c      **** //    int left_wheel_count = DESIRED_COUNT;
 352:.\main.c      ****     float distance = 0;
 375              		.loc 1 352 0
 376 0014 4FF00003 		mov	r3, #0
 377 0018 7B61     		str	r3, [r7, #20]	@ float
 353:.\main.c      ****         
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 14


 354:.\main.c      ****     while (distance < desired_distance) {
 378              		.loc 1 354 0
 379 001a 93E0     		b	.L11
 380              	.L22:
 355:.\main.c      ****         if (adc_flag) {
 381              		.loc 1 355 0
 382 001c 514B     		ldr	r3, .L23
 383 001e 1B68     		ldr	r3, [r3]
 384 0020 002B     		cmp	r3, #0
 385 0022 04D0     		beq	.L12
 356:.\main.c      ****             updateSensorValues();
 386              		.loc 1 356 0
 387 0024 FFF7FEFF 		bl	updateSensorValues
 357:.\main.c      ****             adc_flag = FALSE;
 388              		.loc 1 357 0
 389 0028 4E4B     		ldr	r3, .L23
 390 002a 0022     		movs	r2, #0
 391 002c 1A60     		str	r2, [r3]
 392              	.L12:
 358:.\main.c      ****         }
 359:.\main.c      ****         
 360:.\main.c      ****          // New count values from encoder are ready
 361:.\main.c      ****         if (timer_flag){
 393              		.loc 1 361 0
 394 002e 4E4B     		ldr	r3, .L23+4
 395 0030 1B68     		ldr	r3, [r3]
 396 0032 002B     		cmp	r3, #0
 397 0034 2BD0     		beq	.L13
 362:.\main.c      ****             isr_TS_Disable();
 398              		.loc 1 362 0
 399 0036 FFF7FEFF 		bl	isr_TS_Disable
 363:.\main.c      ****             
 364:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 400              		.loc 1 364 0
 401 003a F869     		ldr	r0, [r7, #28]
 402 003c B969     		ldr	r1, [r7, #24]
 403 003e FFF7FEFF 		bl	getDistance
 404 0042 0346     		mov	r3, r0
 405 0044 7869     		ldr	r0, [r7, #20]	@ float
 406 0046 1946     		mov	r1, r3
 407 0048 FFF7FEFF 		bl	__aeabi_fadd
 408 004c 0346     		mov	r3, r0
 409 004e 7B61     		str	r3, [r7, #20]	@ float
 365:.\main.c      ****             
 366:.\main.c      ****             // Correct speed
 367:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 410              		.loc 1 367 0
 411 0050 464B     		ldr	r3, .L23+8
 412 0052 1A68     		ldr	r2, [r3]
 413 0054 7B68     		ldr	r3, [r7, #4]
 414 0056 1B68     		ldr	r3, [r3]
 415 0058 F869     		ldr	r0, [r7, #28]
 416 005a 1146     		mov	r1, r2
 417 005c 1A46     		mov	r2, r3
 418 005e 0123     		movs	r3, #1
 419 0060 FFF7FEFF 		bl	correctSpeed
 368:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 15


 420              		.loc 1 368 0
 421 0064 424B     		ldr	r3, .L23+12
 422 0066 1A68     		ldr	r2, [r3]
 423 0068 BB68     		ldr	r3, [r7, #8]
 424 006a 1B68     		ldr	r3, [r3]
 425 006c B869     		ldr	r0, [r7, #24]
 426 006e 1146     		mov	r1, r2
 427 0070 1A46     		mov	r2, r3
 428 0072 0023     		movs	r3, #0
 429 0074 FFF7FEFF 		bl	correctSpeed
 369:.\main.c      ****             
 370:.\main.c      ****             // Update previous values
 371:.\main.c      ****             prevCountM1 = countM1;
 430              		.loc 1 371 0
 431 0078 3C4B     		ldr	r3, .L23+8
 432 007a 1B68     		ldr	r3, [r3]
 433 007c FB61     		str	r3, [r7, #28]
 372:.\main.c      ****             prevCountM2 = countM2;
 434              		.loc 1 372 0
 435 007e 3C4B     		ldr	r3, .L23+12
 436 0080 1B68     		ldr	r3, [r3]
 437 0082 BB61     		str	r3, [r7, #24]
 373:.\main.c      ****             
 374:.\main.c      ****             // Reset flag
 375:.\main.c      ****             timer_flag = FALSE;
 438              		.loc 1 375 0
 439 0084 384B     		ldr	r3, .L23+4
 440 0086 0022     		movs	r2, #0
 441 0088 1A60     		str	r2, [r3]
 376:.\main.c      ****             
 377:.\main.c      ****             isr_TS_Enable();
 442              		.loc 1 377 0
 443 008a FFF7FEFF 		bl	isr_TS_Enable
 444              	.L13:
 378:.\main.c      ****         }
 379:.\main.c      ****         
 380:.\main.c      ****         // follow a line algorithm
 381:.\main.c      ****         if (sensor_readings[TOP_MID_SENSOR]) { // on line
 445              		.loc 1 381 0
 446 008e 394B     		ldr	r3, .L23+16
 447 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 448 0092 002B     		cmp	r3, #0
 449 0094 25D0     		beq	.L14
 382:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 450              		.loc 1 382 0
 451 0096 374B     		ldr	r3, .L23+16
 452 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 453 009a 002B     		cmp	r3, #0
 454 009c 0ED1     		bne	.L15
 455              		.loc 1 382 0 is_stmt 0 discriminator 1
 456 009e 354B     		ldr	r3, .L23+16
 457 00a0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 458 00a2 002B     		cmp	r3, #0
 459 00a4 0AD0     		beq	.L15
 383:.\main.c      ****                 *right_wheel_count -= ADJUST_SPEED_SMALL;
 460              		.loc 1 383 0 is_stmt 1
 461 00a6 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 16


 462 00a8 1B68     		ldr	r3, [r3]
 463 00aa 5A1E     		subs	r2, r3, #1
 464 00ac BB68     		ldr	r3, [r7, #8]
 465 00ae 1A60     		str	r2, [r3]
 384:.\main.c      ****                 *left_wheel_count += ADJUST_SPEED_SMALL;
 466              		.loc 1 384 0
 467 00b0 7B68     		ldr	r3, [r7, #4]
 468 00b2 1B68     		ldr	r3, [r3]
 469 00b4 5A1C     		adds	r2, r3, #1
 470 00b6 7B68     		ldr	r3, [r7, #4]
 471 00b8 1A60     		str	r2, [r3]
 472 00ba 27E0     		b	.L17
 473              	.L15:
 385:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { //
 474              		.loc 1 385 0
 475 00bc 2D4B     		ldr	r3, .L23+16
 476 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 477 00c0 002B     		cmp	r3, #0
 478 00c2 23D0     		beq	.L17
 479              		.loc 1 385 0 is_stmt 0 discriminator 1
 480 00c4 2B4B     		ldr	r3, .L23+16
 481 00c6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 482 00c8 002B     		cmp	r3, #0
 483 00ca 1FD1     		bne	.L17
 386:.\main.c      ****                 *right_wheel_count += ADJUST_SPEED_SMALL;
 484              		.loc 1 386 0 is_stmt 1
 485 00cc BB68     		ldr	r3, [r7, #8]
 486 00ce 1B68     		ldr	r3, [r3]
 487 00d0 5A1C     		adds	r2, r3, #1
 488 00d2 BB68     		ldr	r3, [r7, #8]
 489 00d4 1A60     		str	r2, [r3]
 387:.\main.c      ****                 *left_wheel_count -= ADJUST_SPEED_SMALL;
 490              		.loc 1 387 0
 491 00d6 7B68     		ldr	r3, [r7, #4]
 492 00d8 1B68     		ldr	r3, [r3]
 493 00da 5A1E     		subs	r2, r3, #1
 494 00dc 7B68     		ldr	r3, [r7, #4]
 495 00de 1A60     		str	r2, [r3]
 496 00e0 14E0     		b	.L17
 497              	.L14:
 388:.\main.c      ****             } else { // Correct speed
 389:.\main.c      ****             }
 390:.\main.c      ****         } else { // moved off
 391:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 498              		.loc 1 391 0
 499 00e2 244B     		ldr	r3, .L23+16
 500 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 501 00e6 002B     		cmp	r3, #0
 502 00e8 06D1     		bne	.L18
 503              		.loc 1 391 0 is_stmt 0 discriminator 1
 504 00ea 224B     		ldr	r3, .L23+16
 505 00ec 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 506 00ee 002B     		cmp	r3, #0
 507 00f0 02D0     		beq	.L18
 392:.\main.c      ****                 turnRight();
 508              		.loc 1 392 0 is_stmt 1
 509 00f2 FFF7FEFF 		bl	turnRight
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 17


 510 00f6 09E0     		b	.L17
 511              	.L18:
 393:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {// 
 512              		.loc 1 393 0
 513 00f8 1E4B     		ldr	r3, .L23+16
 514 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 515 00fc 002B     		cmp	r3, #0
 516 00fe 05D0     		beq	.L17
 517              		.loc 1 393 0 is_stmt 0 discriminator 1
 518 0100 1C4B     		ldr	r3, .L23+16
 519 0102 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 520 0104 002B     		cmp	r3, #0
 521 0106 01D1     		bne	.L17
 394:.\main.c      **** 				turnLeft();
 522              		.loc 1 394 0 is_stmt 1
 523 0108 FFF7FEFF 		bl	turnLeft
 524              	.L17:
 395:.\main.c      ****             }
 396:.\main.c      ****         }
 397:.\main.c      ****         
 398:.\main.c      ****         if (*right_wheel_count > MAX_SPEED) {
 525              		.loc 1 398 0
 526 010c BB68     		ldr	r3, [r7, #8]
 527 010e 1B68     		ldr	r3, [r3]
 528 0110 092B     		cmp	r3, #9
 529 0112 02DD     		ble	.L19
 399:.\main.c      ****             *right_wheel_count = MAX_SPEED;
 530              		.loc 1 399 0
 531 0114 BB68     		ldr	r3, [r7, #8]
 532 0116 0922     		movs	r2, #9
 533 0118 1A60     		str	r2, [r3]
 534              	.L19:
 400:.\main.c      ****         }
 401:.\main.c      ****         if (*left_wheel_count > MAX_SPEED) {
 535              		.loc 1 401 0
 536 011a 7B68     		ldr	r3, [r7, #4]
 537 011c 1B68     		ldr	r3, [r3]
 538 011e 092B     		cmp	r3, #9
 539 0120 02DD     		ble	.L20
 402:.\main.c      ****             *left_wheel_count = MAX_SPEED;
 540              		.loc 1 402 0
 541 0122 7B68     		ldr	r3, [r7, #4]
 542 0124 0922     		movs	r2, #9
 543 0126 1A60     		str	r2, [r3]
 544              	.L20:
 403:.\main.c      ****         }
 404:.\main.c      ****         if (*right_wheel_count < MIN_SPEED) {
 545              		.loc 1 404 0
 546 0128 BB68     		ldr	r3, [r7, #8]
 547 012a 1B68     		ldr	r3, [r3]
 548 012c 032B     		cmp	r3, #3
 549 012e 02DC     		bgt	.L21
 405:.\main.c      ****             *right_wheel_count = MIN_SPEED;
 550              		.loc 1 405 0
 551 0130 BB68     		ldr	r3, [r7, #8]
 552 0132 0422     		movs	r2, #4
 553 0134 1A60     		str	r2, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 18


 554              	.L21:
 406:.\main.c      ****         }
 407:.\main.c      ****         if (*left_wheel_count < MIN_SPEED) {
 555              		.loc 1 407 0
 556 0136 7B68     		ldr	r3, [r7, #4]
 557 0138 1B68     		ldr	r3, [r3]
 558 013a 032B     		cmp	r3, #3
 559 013c 02DC     		bgt	.L11
 408:.\main.c      ****             *left_wheel_count = MIN_SPEED;
 560              		.loc 1 408 0
 561 013e 7B68     		ldr	r3, [r7, #4]
 562 0140 0422     		movs	r2, #4
 563 0142 1A60     		str	r2, [r3]
 564              	.L11:
 354:.\main.c      ****         if (adc_flag) {
 565              		.loc 1 354 0
 566 0144 F868     		ldr	r0, [r7, #12]
 567 0146 FFF7FEFF 		bl	__aeabi_i2f
 568 014a 0346     		mov	r3, r0
 569 014c 1846     		mov	r0, r3
 570 014e 7969     		ldr	r1, [r7, #20]	@ float
 571 0150 FFF7FEFF 		bl	__aeabi_fcmpgt
 572 0154 0346     		mov	r3, r0
 573 0156 002B     		cmp	r3, #0
 574 0158 7FF460AF 		bne	.L22
 409:.\main.c      ****         }
 410:.\main.c      ****     }
 411:.\main.c      **** }
 575              		.loc 1 411 0
 576 015c 2037     		adds	r7, r7, #32
 577              		.cfi_def_cfa_offset 8
 578 015e BD46     		mov	sp, r7
 579              		.cfi_def_cfa_register 13
 580              		@ sp needed
 581 0160 80BD     		pop	{r7, pc}
 582              	.L24:
 583 0162 00BF     		.align	2
 584              	.L23:
 585 0164 00000000 		.word	adc_flag
 586 0168 00000000 		.word	timer_flag
 587 016c 00000000 		.word	countM1
 588 0170 00000000 		.word	countM2
 589 0174 00000000 		.word	sensor_readings
 590              		.cfi_endproc
 591              	.LFE66:
 592              		.size	goStraight, .-goStraight
 593              		.global	__aeabi_fdiv
 594              		.global	__aeabi_f2d
 595              		.global	__aeabi_dmul
 596              		.global	__aeabi_d2f
 597              		.section	.text.getDistance,"ax",%progbits
 598              		.align	2
 599              		.global	getDistance
 600              		.thumb
 601              		.thumb_func
 602              		.type	getDistance, %function
 603              	getDistance:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 19


 604              	.LFB67:
 412:.\main.c      **** 
 413:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2){
 605              		.loc 1 413 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 16
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 80B5     		push	{r7, lr}
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 7, -8
 612              		.cfi_offset 14, -4
 613 0002 84B0     		sub	sp, sp, #16
 614              		.cfi_def_cfa_offset 24
 615 0004 00AF     		add	r7, sp, #0
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 618 0008 3960     		str	r1, [r7]
 414:.\main.c      ****     float m1_dist = ((float)abs(countM1 - prevCountM1) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 619              		.loc 1 414 0
 620 000a 2D4B     		ldr	r3, .L27+8
 621 000c 1A68     		ldr	r2, [r3]
 622 000e 7B68     		ldr	r3, [r7, #4]
 623 0010 D31A     		subs	r3, r2, r3
 624 0012 002B     		cmp	r3, #0
 625 0014 B8BF     		it	lt
 626 0016 5B42     		rsblt	r3, r3, #0
 627 0018 1846     		mov	r0, r3
 628 001a FFF7FEFF 		bl	__aeabi_i2f
 629 001e 0346     		mov	r3, r0
 630 0020 1846     		mov	r0, r3
 631 0022 2849     		ldr	r1, .L27+12
 632 0024 FFF7FEFF 		bl	__aeabi_fdiv
 633 0028 0346     		mov	r3, r0
 634 002a 1846     		mov	r0, r3
 635 002c FFF7FEFF 		bl	__aeabi_f2d
 636 0030 0246     		mov	r2, r0
 637 0032 0B46     		mov	r3, r1
 638 0034 1046     		mov	r0, r2
 639 0036 1946     		mov	r1, r3
 640 0038 1FA3     		adr	r3, .L27
 641 003a D3E90023 		ldrd	r2, [r3]
 642 003e FFF7FEFF 		bl	__aeabi_dmul
 643 0042 0246     		mov	r2, r0
 644 0044 0B46     		mov	r3, r1
 645 0046 1046     		mov	r0, r2
 646 0048 1946     		mov	r1, r3
 647 004a FFF7FEFF 		bl	__aeabi_d2f
 648 004e 0346     		mov	r3, r0
 649 0050 FB60     		str	r3, [r7, #12]	@ float
 415:.\main.c      ****     float m2_dist = ((float)abs(countM2 - prevCountM2) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 650              		.loc 1 415 0
 651 0052 1D4B     		ldr	r3, .L27+16
 652 0054 1A68     		ldr	r2, [r3]
 653 0056 3B68     		ldr	r3, [r7]
 654 0058 D31A     		subs	r3, r2, r3
 655 005a 002B     		cmp	r3, #0
 656 005c B8BF     		it	lt
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 20


 657 005e 5B42     		rsblt	r3, r3, #0
 658 0060 1846     		mov	r0, r3
 659 0062 FFF7FEFF 		bl	__aeabi_i2f
 660 0066 0346     		mov	r3, r0
 661 0068 1846     		mov	r0, r3
 662 006a 1649     		ldr	r1, .L27+12
 663 006c FFF7FEFF 		bl	__aeabi_fdiv
 664 0070 0346     		mov	r3, r0
 665 0072 1846     		mov	r0, r3
 666 0074 FFF7FEFF 		bl	__aeabi_f2d
 667 0078 0246     		mov	r2, r0
 668 007a 0B46     		mov	r3, r1
 669 007c 1046     		mov	r0, r2
 670 007e 1946     		mov	r1, r3
 671 0080 0DA3     		adr	r3, .L27
 672 0082 D3E90023 		ldrd	r2, [r3]
 673 0086 FFF7FEFF 		bl	__aeabi_dmul
 674 008a 0246     		mov	r2, r0
 675 008c 0B46     		mov	r3, r1
 676 008e 1046     		mov	r0, r2
 677 0090 1946     		mov	r1, r3
 678 0092 FFF7FEFF 		bl	__aeabi_d2f
 679 0096 0346     		mov	r3, r0
 680 0098 BB60     		str	r3, [r7, #8]	@ float
 416:.\main.c      ****     return (m1_dist+m2_dist)/2;
 681              		.loc 1 416 0
 682 009a F868     		ldr	r0, [r7, #12]	@ float
 683 009c B968     		ldr	r1, [r7, #8]	@ float
 684 009e FFF7FEFF 		bl	__aeabi_fadd
 685 00a2 0346     		mov	r3, r0
 686 00a4 1846     		mov	r0, r3
 687 00a6 4FF08041 		mov	r1, #1073741824
 688 00aa FFF7FEFF 		bl	__aeabi_fdiv
 689 00ae 0346     		mov	r3, r0
 417:.\main.c      **** };
 690              		.loc 1 417 0
 691 00b0 1846     		mov	r0, r3
 692 00b2 1037     		adds	r7, r7, #16
 693              		.cfi_def_cfa_offset 8
 694 00b4 BD46     		mov	sp, r7
 695              		.cfi_def_cfa_register 13
 696              		@ sp needed
 697 00b6 80BD     		pop	{r7, pc}
 698              	.L28:
 699              		.align	3
 700              	.L27:
 701 00b8 CE8C7E34 		.word	880708814
 702 00bc 9C6B3440 		.word	1077177244
 703 00c0 00000000 		.word	countM1
 704 00c4 00006443 		.word	1130627072
 705 00c8 00000000 		.word	countM2
 706              		.cfi_endproc
 707              	.LFE67:
 708              		.size	getDistance, .-getDistance
 709              		.global	__aeabi_fcmplt
 710 00cc AFF30080 		.section	.text.turnForDegrees,"ax",%progbits
 711              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 21


 712              		.global	turnForDegrees
 713              		.thumb
 714              		.thumb_func
 715              		.type	turnForDegrees, %function
 716              	turnForDegrees:
 717              	.LFB68:
 418:.\main.c      **** 
 419:.\main.c      **** void turnForDegrees(int degrees) {
 718              		.loc 1 419 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 24
 721              		@ frame_needed = 1, uses_anonymous_args = 0
 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 86B0     		sub	sp, sp, #24
 727              		.cfi_def_cfa_offset 32
 728 0004 00AF     		add	r7, sp, #0
 729              		.cfi_def_cfa_register 7
 730 0006 7860     		str	r0, [r7, #4]
 420:.\main.c      ****     float distance_to_turn = degrees / 13;
 731              		.loc 1 420 0
 732 0008 7B68     		ldr	r3, [r7, #4]
 733 000a 1C4A     		ldr	r2, .L32
 734 000c 82FB0312 		smull	r1, r2, r2, r3
 735 0010 9210     		asrs	r2, r2, #2
 736 0012 DB17     		asrs	r3, r3, #31
 737 0014 D31A     		subs	r3, r2, r3
 738 0016 1846     		mov	r0, r3
 739 0018 FFF7FEFF 		bl	__aeabi_i2f
 740 001c 0346     		mov	r3, r0
 741 001e BB60     		str	r3, [r7, #8]	@ float
 421:.\main.c      ****     float distance_turned = 0;
 742              		.loc 1 421 0
 743 0020 4FF00003 		mov	r3, #0
 744 0024 7B61     		str	r3, [r7, #20]	@ float
 422:.\main.c      ****     // Storing count values
 423:.\main.c      ****     int prevCountM1 = 0;
 745              		.loc 1 423 0
 746 0026 0023     		movs	r3, #0
 747 0028 3B61     		str	r3, [r7, #16]
 424:.\main.c      ****     int prevCountM2 = 0;
 748              		.loc 1 424 0
 749 002a 0023     		movs	r3, #0
 750 002c FB60     		str	r3, [r7, #12]
 425:.\main.c      ****     
 426:.\main.c      ****     while (distance_turned < distance_to_turn) {
 751              		.loc 1 426 0
 752 002e 1BE0     		b	.L30
 753              	.L31:
 427:.\main.c      ****          // New count values from encoder are ready
 428:.\main.c      ****         if (timer_flag){
 754              		.loc 1 428 0
 755 0030 134B     		ldr	r3, .L32+4
 756 0032 1B68     		ldr	r3, [r3]
 757 0034 002B     		cmp	r3, #0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 22


 758 0036 17D0     		beq	.L30
 429:.\main.c      ****             isr_TS_Disable();
 759              		.loc 1 429 0
 760 0038 FFF7FEFF 		bl	isr_TS_Disable
 430:.\main.c      ****             
 431:.\main.c      ****             distance_turned += getDistance(prevCountM1, prevCountM2);
 761              		.loc 1 431 0
 762 003c 3869     		ldr	r0, [r7, #16]
 763 003e F968     		ldr	r1, [r7, #12]
 764 0040 FFF7FEFF 		bl	getDistance
 765 0044 0346     		mov	r3, r0
 766 0046 7869     		ldr	r0, [r7, #20]	@ float
 767 0048 1946     		mov	r1, r3
 768 004a FFF7FEFF 		bl	__aeabi_fadd
 769 004e 0346     		mov	r3, r0
 770 0050 7B61     		str	r3, [r7, #20]	@ float
 432:.\main.c      ****             
 433:.\main.c      ****             // Update previous values
 434:.\main.c      ****             prevCountM1 = countM1;
 771              		.loc 1 434 0
 772 0052 0C4B     		ldr	r3, .L32+8
 773 0054 1B68     		ldr	r3, [r3]
 774 0056 3B61     		str	r3, [r7, #16]
 435:.\main.c      ****             prevCountM2 = countM2;
 775              		.loc 1 435 0
 776 0058 0B4B     		ldr	r3, .L32+12
 777 005a 1B68     		ldr	r3, [r3]
 778 005c FB60     		str	r3, [r7, #12]
 436:.\main.c      ****             
 437:.\main.c      ****             // Reset flag
 438:.\main.c      ****             timer_flag = FALSE;
 779              		.loc 1 438 0
 780 005e 084B     		ldr	r3, .L32+4
 781 0060 0022     		movs	r2, #0
 782 0062 1A60     		str	r2, [r3]
 439:.\main.c      ****             
 440:.\main.c      ****             isr_TS_Enable();
 783              		.loc 1 440 0
 784 0064 FFF7FEFF 		bl	isr_TS_Enable
 785              	.L30:
 426:.\main.c      ****          // New count values from encoder are ready
 786              		.loc 1 426 0
 787 0068 7869     		ldr	r0, [r7, #20]	@ float
 788 006a B968     		ldr	r1, [r7, #8]	@ float
 789 006c FFF7FEFF 		bl	__aeabi_fcmplt
 790 0070 0346     		mov	r3, r0
 791 0072 002B     		cmp	r3, #0
 792 0074 DCD1     		bne	.L31
 441:.\main.c      ****         }
 442:.\main.c      ****     }
 443:.\main.c      **** }
 793              		.loc 1 443 0
 794 0076 1837     		adds	r7, r7, #24
 795              		.cfi_def_cfa_offset 8
 796 0078 BD46     		mov	sp, r7
 797              		.cfi_def_cfa_register 13
 798              		@ sp needed
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 23


 799 007a 80BD     		pop	{r7, pc}
 800              	.L33:
 801              		.align	2
 802              	.L32:
 803 007c 4FECC44E 		.word	1321528399
 804 0080 00000000 		.word	timer_flag
 805 0084 00000000 		.word	countM1
 806 0088 00000000 		.word	countM2
 807              		.cfi_endproc
 808              	.LFE68:
 809              		.size	turnForDegrees, .-turnForDegrees
 810              		.section	.text.getValForChannel,"ax",%progbits
 811              		.align	2
 812              		.global	getValForChannel
 813              		.thumb
 814              		.thumb_func
 815              		.type	getValForChannel, %function
 816              	getValForChannel:
 817              	.LFB69:
 444:.\main.c      ****     
 445:.\main.c      **** 
 446:.\main.c      **** // Simple ADC conversion
 447:.\main.c      **** int32 getValForChannel(int16 n){
 818              		.loc 1 447 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 8
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822 0000 80B5     		push	{r7, lr}
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 82B0     		sub	sp, sp, #8
 827              		.cfi_def_cfa_offset 16
 828 0004 00AF     		add	r7, sp, #0
 829              		.cfi_def_cfa_register 7
 830 0006 0346     		mov	r3, r0
 831 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 448:.\main.c      ****     return ADC_CountsTo_mVolts(ADC_GetResult16(n));
 832              		.loc 1 448 0
 833 000a FB88     		ldrh	r3, [r7, #6]
 834 000c 1846     		mov	r0, r3
 835 000e FFF7FEFF 		bl	ADC_GetResult16
 836 0012 0346     		mov	r3, r0
 837 0014 1846     		mov	r0, r3
 838 0016 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 839 001a 0346     		mov	r3, r0
 449:.\main.c      **** }
 840              		.loc 1 449 0
 841 001c 1846     		mov	r0, r3
 842 001e 0837     		adds	r7, r7, #8
 843              		.cfi_def_cfa_offset 8
 844 0020 BD46     		mov	sp, r7
 845              		.cfi_def_cfa_register 13
 846              		@ sp needed
 847 0022 80BD     		pop	{r7, pc}
 848              		.cfi_endproc
 849              	.LFE69:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 24


 850              		.size	getValForChannel, .-getValForChannel
 851              		.section	.text.updateSensorValues,"ax",%progbits
 852              		.align	2
 853              		.global	updateSensorValues
 854              		.thumb
 855              		.thumb_func
 856              		.type	updateSensorValues, %function
 857              	updateSensorValues:
 858              	.LFB70:
 450:.\main.c      **** 
 451:.\main.c      **** void updateSensorValues(){
 859              		.loc 1 451 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 8
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863 0000 80B5     		push	{r7, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 82B0     		sub	sp, sp, #8
 868              		.cfi_def_cfa_offset 16
 869 0004 00AF     		add	r7, sp, #0
 870              		.cfi_def_cfa_register 7
 452:.\main.c      ****     // update each sensor with the maximum reading so far
 453:.\main.c      ****     int i;
 454:.\main.c      ****     for (i = 0; i < NUM_SENSORS; i++){
 871              		.loc 1 454 0
 872 0006 0023     		movs	r3, #0
 873 0008 7B60     		str	r3, [r7, #4]
 874 000a 15E0     		b	.L37
 875              	.L39:
 876              	.LBB2:
 455:.\main.c      ****         int reading = getValForChannel(i);
 877              		.loc 1 455 0
 878 000c 7B68     		ldr	r3, [r7, #4]
 879 000e 9BB2     		uxth	r3, r3
 880 0010 1BB2     		sxth	r3, r3
 881 0012 1846     		mov	r0, r3
 882 0014 FFF7FEFF 		bl	getValForChannel
 883 0018 3860     		str	r0, [r7]
 456:.\main.c      ****         if (reading > adc_readings[i]) {
 884              		.loc 1 456 0
 885 001a 234A     		ldr	r2, .L44
 886 001c 7B68     		ldr	r3, [r7, #4]
 887 001e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 888 0022 3B68     		ldr	r3, [r7]
 889 0024 9A42     		cmp	r2, r3
 890 0026 04DA     		bge	.L38
 457:.\main.c      ****             adc_readings[i] = reading;
 891              		.loc 1 457 0
 892 0028 1F49     		ldr	r1, .L44
 893 002a 7B68     		ldr	r3, [r7, #4]
 894 002c 3A68     		ldr	r2, [r7]
 895 002e 41F82320 		str	r2, [r1, r3, lsl #2]
 896              	.L38:
 897              	.LBE2:
 454:.\main.c      ****         int reading = getValForChannel(i);
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 25


 898              		.loc 1 454 0 discriminator 2
 899 0032 7B68     		ldr	r3, [r7, #4]
 900 0034 0133     		adds	r3, r3, #1
 901 0036 7B60     		str	r3, [r7, #4]
 902              	.L37:
 454:.\main.c      ****         int reading = getValForChannel(i);
 903              		.loc 1 454 0 is_stmt 0 discriminator 1
 904 0038 7B68     		ldr	r3, [r7, #4]
 905 003a 052B     		cmp	r3, #5
 906 003c E6DD     		ble	.L39
 458:.\main.c      ****         }
 459:.\main.c      ****     }
 460:.\main.c      **** 
 461:.\main.c      ****     sample_count++;
 907              		.loc 1 461 0 is_stmt 1
 908 003e 1B4B     		ldr	r3, .L44+4
 909 0040 1B68     		ldr	r3, [r3]
 910 0042 0133     		adds	r3, r3, #1
 911 0044 194A     		ldr	r2, .L44+4
 912 0046 1360     		str	r3, [r2]
 462:.\main.c      ****     if (sample_count == ADC_READINGS_SIZE){
 913              		.loc 1 462 0
 914 0048 184B     		ldr	r3, .L44+4
 915 004a 1B68     		ldr	r3, [r3]
 916 004c 5A2B     		cmp	r3, #90
 917 004e 25D1     		bne	.L40
 463:.\main.c      ****         // Black = 1 (high voltage level)
 464:.\main.c      ****         for (i = 0; i < NUM_SENSORS; i++){
 918              		.loc 1 464 0
 919 0050 0023     		movs	r3, #0
 920 0052 7B60     		str	r3, [r7, #4]
 921 0054 18E0     		b	.L41
 922              	.L42:
 465:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 923              		.loc 1 465 0 discriminator 3
 924 0056 144A     		ldr	r2, .L44
 925 0058 7B68     		ldr	r3, [r7, #4]
 926 005a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 927 005e 40F22B12 		movw	r2, #299
 928 0062 9342     		cmp	r3, r2
 929 0064 D4BF     		ite	le
 930 0066 0123     		movle	r3, #1
 931 0068 0023     		movgt	r3, #0
 932 006a DBB2     		uxtb	r3, r3
 933 006c D9B2     		uxtb	r1, r3
 934 006e 104A     		ldr	r2, .L44+8
 935 0070 7B68     		ldr	r3, [r7, #4]
 936 0072 1344     		add	r3, r3, r2
 937 0074 0A46     		mov	r2, r1
 938 0076 1A70     		strb	r2, [r3]
 466:.\main.c      ****             adc_readings[i] = 0; // Reset max value from samples
 939              		.loc 1 466 0 discriminator 3
 940 0078 0B4A     		ldr	r2, .L44
 941 007a 7B68     		ldr	r3, [r7, #4]
 942 007c 0021     		movs	r1, #0
 943 007e 42F82310 		str	r1, [r2, r3, lsl #2]
 464:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 26


 944              		.loc 1 464 0 discriminator 3
 945 0082 7B68     		ldr	r3, [r7, #4]
 946 0084 0133     		adds	r3, r3, #1
 947 0086 7B60     		str	r3, [r7, #4]
 948              	.L41:
 464:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 949              		.loc 1 464 0 is_stmt 0 discriminator 1
 950 0088 7B68     		ldr	r3, [r7, #4]
 951 008a 052B     		cmp	r3, #5
 952 008c E3DD     		ble	.L42
 467:.\main.c      ****         }
 468:.\main.c      ****         ADC_DEBUG_Write(1);
 953              		.loc 1 468 0 is_stmt 1
 954 008e 0120     		movs	r0, #1
 955 0090 FFF7FEFF 		bl	ADC_DEBUG_Write
 469:.\main.c      ****         sample_count = 0;
 956              		.loc 1 469 0
 957 0094 054B     		ldr	r3, .L44+4
 958 0096 0022     		movs	r2, #0
 959 0098 1A60     		str	r2, [r3]
 960 009a 02E0     		b	.L36
 961              	.L40:
 470:.\main.c      ****     }
 471:.\main.c      ****     else ADC_DEBUG_Write(0);
 962              		.loc 1 471 0
 963 009c 0020     		movs	r0, #0
 964 009e FFF7FEFF 		bl	ADC_DEBUG_Write
 965              	.L36:
 472:.\main.c      **** }
 966              		.loc 1 472 0
 967 00a2 0837     		adds	r7, r7, #8
 968              		.cfi_def_cfa_offset 8
 969 00a4 BD46     		mov	sp, r7
 970              		.cfi_def_cfa_register 13
 971              		@ sp needed
 972 00a6 80BD     		pop	{r7, pc}
 973              	.L45:
 974              		.align	2
 975              	.L44:
 976 00a8 00000000 		.word	adc_readings
 977 00ac 00000000 		.word	sample_count
 978 00b0 00000000 		.word	sensor_readings
 979              		.cfi_endproc
 980              	.LFE70:
 981              		.size	updateSensorValues, .-updateSensorValues
 982              		.section	.text.changeLeftWheelSpeed,"ax",%progbits
 983              		.align	2
 984              		.global	changeLeftWheelSpeed
 985              		.thumb
 986              		.thumb_func
 987              		.type	changeLeftWheelSpeed, %function
 988              	changeLeftWheelSpeed:
 989              	.LFB71:
 473:.\main.c      **** 
 474:.\main.c      **** void changeLeftWheelSpeed(int amount) {
 990              		.loc 1 474 0
 991              		.cfi_startproc
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 27


 992              		@ args = 0, pretend = 0, frame = 16
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 0000 80B5     		push	{r7, lr}
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 7, -8
 997              		.cfi_offset 14, -4
 998 0002 84B0     		sub	sp, sp, #16
 999              		.cfi_def_cfa_offset 24
 1000 0004 00AF     		add	r7, sp, #0
 1001              		.cfi_def_cfa_register 7
 1002 0006 7860     		str	r0, [r7, #4]
 475:.\main.c      ****     int new_value = PWM_1_ReadCompare() + amount;
 1003              		.loc 1 475 0
 1004 0008 FFF7FEFF 		bl	PWM_1_ReadCompare
 1005 000c 0346     		mov	r3, r0
 1006 000e 1A46     		mov	r2, r3
 1007 0010 7B68     		ldr	r3, [r7, #4]
 1008 0012 1344     		add	r3, r3, r2
 1009 0014 FB60     		str	r3, [r7, #12]
 476:.\main.c      ****     PWM_1_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1010              		.loc 1 476 0
 1011 0016 FB68     		ldr	r3, [r7, #12]
 1012 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1013 001c 9BB2     		uxth	r3, r3
 1014 001e 1846     		mov	r0, r3
 1015 0020 FFF7FEFF 		bl	PWM_1_WriteCompare
 477:.\main.c      **** }
 1016              		.loc 1 477 0
 1017 0024 1037     		adds	r7, r7, #16
 1018              		.cfi_def_cfa_offset 8
 1019 0026 BD46     		mov	sp, r7
 1020              		.cfi_def_cfa_register 13
 1021              		@ sp needed
 1022 0028 80BD     		pop	{r7, pc}
 1023              		.cfi_endproc
 1024              	.LFE71:
 1025              		.size	changeLeftWheelSpeed, .-changeLeftWheelSpeed
 1026 002a 00BF     		.section	.text.changeRightWheelSpeed,"ax",%progbits
 1027              		.align	2
 1028              		.global	changeRightWheelSpeed
 1029              		.thumb
 1030              		.thumb_func
 1031              		.type	changeRightWheelSpeed, %function
 1032              	changeRightWheelSpeed:
 1033              	.LFB72:
 478:.\main.c      **** 
 479:.\main.c      **** void changeRightWheelSpeed(int amount){
 1034              		.loc 1 479 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 16
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038 0000 80B5     		push	{r7, lr}
 1039              		.cfi_def_cfa_offset 8
 1040              		.cfi_offset 7, -8
 1041              		.cfi_offset 14, -4
 1042 0002 84B0     		sub	sp, sp, #16
 1043              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 28


 1044 0004 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
 1046 0006 7860     		str	r0, [r7, #4]
 480:.\main.c      ****     int new_value = PWM_2_ReadCompare() + amount;
 1047              		.loc 1 480 0
 1048 0008 FFF7FEFF 		bl	PWM_2_ReadCompare
 1049 000c 0346     		mov	r3, r0
 1050 000e 1A46     		mov	r2, r3
 1051 0010 7B68     		ldr	r3, [r7, #4]
 1052 0012 1344     		add	r3, r3, r2
 1053 0014 FB60     		str	r3, [r7, #12]
 481:.\main.c      ****     PWM_2_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1054              		.loc 1 481 0
 1055 0016 FB68     		ldr	r3, [r7, #12]
 1056 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1057 001c 9BB2     		uxth	r3, r3
 1058 001e 1846     		mov	r0, r3
 1059 0020 FFF7FEFF 		bl	PWM_2_WriteCompare
 482:.\main.c      **** }
 1060              		.loc 1 482 0
 1061 0024 1037     		adds	r7, r7, #16
 1062              		.cfi_def_cfa_offset 8
 1063 0026 BD46     		mov	sp, r7
 1064              		.cfi_def_cfa_register 13
 1065              		@ sp needed
 1066 0028 80BD     		pop	{r7, pc}
 1067              		.cfi_endproc
 1068              	.LFE72:
 1069              		.size	changeRightWheelSpeed, .-changeRightWheelSpeed
 1070 002a 00BF     		.section	.text.correctSpeed,"ax",%progbits
 1071              		.align	2
 1072              		.global	correctSpeed
 1073              		.thumb
 1074              		.thumb_func
 1075              		.type	correctSpeed, %function
 1076              	correctSpeed:
 1077              	.LFB73:
 483:.\main.c      **** 
 484:.\main.c      **** /* ## SPEED CONTROL ## 
 485:.\main.c      **** * Algorithm: Get difference between counts, compare to
 486:.\main.c      **** * the difference we expect. Add the correction to the PWM.
 487:.\main.c      **** */
 488:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel){    
 1078              		.loc 1 488 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 88
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082 0000 80B5     		push	{r7, lr}
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 7, -8
 1085              		.cfi_offset 14, -4
 1086 0002 96B0     		sub	sp, sp, #88
 1087              		.cfi_def_cfa_offset 96
 1088 0004 00AF     		add	r7, sp, #0
 1089              		.cfi_def_cfa_register 7
 1090 0006 F860     		str	r0, [r7, #12]
 1091 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 29


 1092 000a 7A60     		str	r2, [r7, #4]
 1093 000c 3B60     		str	r3, [r7]
 489:.\main.c      ****     
 490:.\main.c      ****     // Account for overflow edge or other unknown error
 491:.\main.c      ****     if (prevCount > count) return;
 1094              		.loc 1 491 0
 1095 000e FA68     		ldr	r2, [r7, #12]
 1096 0010 BB68     		ldr	r3, [r7, #8]
 1097 0012 9A42     		cmp	r2, r3
 1098 0014 00DD     		ble	.L49
 1099 0016 19E0     		b	.L48
 1100              	.L49:
 492:.\main.c      ****     
 493:.\main.c      ****     int diff_count = abs(count - prevCount);
 1101              		.loc 1 493 0
 1102 0018 BA68     		ldr	r2, [r7, #8]
 1103 001a FB68     		ldr	r3, [r7, #12]
 1104 001c D31A     		subs	r3, r2, r3
 1105 001e 002B     		cmp	r3, #0
 1106 0020 B8BF     		it	lt
 1107 0022 5B42     		rsblt	r3, r3, #0
 1108 0024 7B65     		str	r3, [r7, #84]
 494:.\main.c      ****     
 495:.\main.c      ****     // Account for a situation where PSoc is powered but wheels aren't moving
 496:.\main.c      ****     if (diff_count == 0) return;
 1109              		.loc 1 496 0
 1110 0026 7B6D     		ldr	r3, [r7, #84]
 1111 0028 002B     		cmp	r3, #0
 1112 002a 00D1     		bne	.L51
 1113              		.loc 1 496 0 is_stmt 0 discriminator 2
 1114 002c 0EE0     		b	.L48
 1115              	.L51:
 497:.\main.c      ****     
 498:.\main.c      ****     char msg[64];
 499:.\main.c      ****         
 500:.\main.c      ****     /* Determine correction that must be applied to the wheel
 501:.\main.c      ****     * desired_count > diff_count :-> wheel is slow; increase PWM
 502:.\main.c      ****     * desired_count < diff_count :-> wheel is fast; decrease PWM
 503:.\main.c      ****     * desired_count == diff_count :-> wheel is stable; do nothing
 504:.\main.c      ****     */
 505:.\main.c      ****     int correction = desired_count-diff_count;
 1116              		.loc 1 505 0 is_stmt 1
 1117 002e 7A68     		ldr	r2, [r7, #4]
 1118 0030 7B6D     		ldr	r3, [r7, #84]
 1119 0032 D31A     		subs	r3, r2, r3
 1120 0034 3B65     		str	r3, [r7, #80]
 506:.\main.c      ****     
 507:.\main.c      ****     // Apply the speed correction to the appropriate wheel          
 508:.\main.c      ****     if (isLeftWheel){
 1121              		.loc 1 508 0
 1122 0036 3B68     		ldr	r3, [r7]
 1123 0038 002B     		cmp	r3, #0
 1124 003a 03D0     		beq	.L52
 509:.\main.c      ****         changeLeftWheelSpeed(correction);
 1125              		.loc 1 509 0
 1126 003c 386D     		ldr	r0, [r7, #80]
 1127 003e FFF7FEFF 		bl	changeLeftWheelSpeed
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 30


 1128 0042 02E0     		b	.L53
 1129              	.L52:
 510:.\main.c      ****     }
 511:.\main.c      ****     else{
 512:.\main.c      ****         changeRightWheelSpeed(correction);
 1130              		.loc 1 512 0
 1131 0044 386D     		ldr	r0, [r7, #80]
 1132 0046 FFF7FEFF 		bl	changeRightWheelSpeed
 1133              	.L53:
 513:.\main.c      ****     }
 514:.\main.c      ****     
 515:.\main.c      ****     return;
 1134              		.loc 1 515 0 discriminator 3
 1135 004a 00BF     		nop
 1136              	.L48:
 516:.\main.c      **** }
 1137              		.loc 1 516 0
 1138 004c 5837     		adds	r7, r7, #88
 1139              		.cfi_def_cfa_offset 8
 1140 004e BD46     		mov	sp, r7
 1141              		.cfi_def_cfa_register 13
 1142              		@ sp needed
 1143 0050 80BD     		pop	{r7, pc}
 1144              		.cfi_endproc
 1145              	.LFE73:
 1146              		.size	correctSpeed, .-correctSpeed
 1147 0052 00BF     		.section	.text.setWheelDirection,"ax",%progbits
 1148              		.align	2
 1149              		.global	setWheelDirection
 1150              		.thumb
 1151              		.thumb_func
 1152              		.type	setWheelDirection, %function
 1153              	setWheelDirection:
 1154              	.LFB74:
 517:.\main.c      **** 
 518:.\main.c      **** /* Set wheel direction explicitly
 519:.\main.c      **** * Parameters are boolean, UNKNOWN can be passed
 520:.\main.c      **** * in if you wish the value to be unchanged
 521:.\main.c      **** */
 522:.\main.c      **** void setWheelDirection(int leftIsForward, int rightIsForward){
 1155              		.loc 1 522 0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 8
 1158              		@ frame_needed = 1, uses_anonymous_args = 0
 1159 0000 80B5     		push	{r7, lr}
 1160              		.cfi_def_cfa_offset 8
 1161              		.cfi_offset 7, -8
 1162              		.cfi_offset 14, -4
 1163 0002 82B0     		sub	sp, sp, #8
 1164              		.cfi_def_cfa_offset 16
 1165 0004 00AF     		add	r7, sp, #0
 1166              		.cfi_def_cfa_register 7
 1167 0006 7860     		str	r0, [r7, #4]
 1168 0008 3960     		str	r1, [r7]
 523:.\main.c      ****     INV1_Write(!leftIsForward);
 1169              		.loc 1 523 0
 1170 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 31


 1171 000c 002B     		cmp	r3, #0
 1172 000e 0CBF     		ite	eq
 1173 0010 0123     		moveq	r3, #1
 1174 0012 0023     		movne	r3, #0
 1175 0014 DBB2     		uxtb	r3, r3
 1176 0016 1846     		mov	r0, r3
 1177 0018 FFF7FEFF 		bl	INV1_Write
 524:.\main.c      ****     INV2_Write(rightIsForward);
 1178              		.loc 1 524 0
 1179 001c 3B68     		ldr	r3, [r7]
 1180 001e DBB2     		uxtb	r3, r3
 1181 0020 1846     		mov	r0, r3
 1182 0022 FFF7FEFF 		bl	INV2_Write
 525:.\main.c      **** }
 1183              		.loc 1 525 0
 1184 0026 0837     		adds	r7, r7, #8
 1185              		.cfi_def_cfa_offset 8
 1186 0028 BD46     		mov	sp, r7
 1187              		.cfi_def_cfa_register 13
 1188              		@ sp needed
 1189 002a 80BD     		pop	{r7, pc}
 1190              		.cfi_endproc
 1191              	.LFE74:
 1192              		.size	setWheelDirection, .-setWheelDirection
 1193              		.section	.text.turnLeft,"ax",%progbits
 1194              		.align	2
 1195              		.global	turnLeft
 1196              		.thumb
 1197              		.thumb_func
 1198              		.type	turnLeft, %function
 1199              	turnLeft:
 1200              	.LFB75:
 526:.\main.c      **** 
 527:.\main.c      **** void turnLeft() {
 1201              		.loc 1 527 0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 1, uses_anonymous_args = 0
 1205 0000 80B5     		push	{r7, lr}
 1206              		.cfi_def_cfa_offset 8
 1207              		.cfi_offset 7, -8
 1208              		.cfi_offset 14, -4
 1209 0002 00AF     		add	r7, sp, #0
 1210              		.cfi_def_cfa_register 7
 528:.\main.c      ****     PWM_1_WriteCompare(0);
 1211              		.loc 1 528 0
 1212 0004 0020     		movs	r0, #0
 1213 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 529:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1214              		.loc 1 529 0
 1215 000a 4FF4E170 		mov	r0, #450
 1216 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 530:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1217              		.loc 1 530 0
 1218 0012 08E0     		b	.L57
 1219              	.L58:
 531:.\main.c      ****         if (adc_flag) {
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 32


 1220              		.loc 1 531 0
 1221 0014 084B     		ldr	r3, .L59
 1222 0016 1B68     		ldr	r3, [r3]
 1223 0018 002B     		cmp	r3, #0
 1224 001a 04D0     		beq	.L57
 532:.\main.c      ****             updateSensorValues();
 1225              		.loc 1 532 0
 1226 001c FFF7FEFF 		bl	updateSensorValues
 533:.\main.c      ****             adc_flag = FALSE;
 1227              		.loc 1 533 0
 1228 0020 054B     		ldr	r3, .L59
 1229 0022 0022     		movs	r2, #0
 1230 0024 1A60     		str	r2, [r3]
 1231              	.L57:
 530:.\main.c      ****         if (adc_flag) {
 1232              		.loc 1 530 0
 1233 0026 054B     		ldr	r3, .L59+4
 1234 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1235 002a 002B     		cmp	r3, #0
 1236 002c F2D0     		beq	.L58
 534:.\main.c      ****         }
 535:.\main.c      ****     }
 536:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1237              		.loc 1 536 0
 1238 002e 4FF4E170 		mov	r0, #450
 1239 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
 537:.\main.c      **** }
 1240              		.loc 1 537 0
 1241 0036 80BD     		pop	{r7, pc}
 1242              	.L60:
 1243              		.align	2
 1244              	.L59:
 1245 0038 00000000 		.word	adc_flag
 1246 003c 00000000 		.word	sensor_readings
 1247              		.cfi_endproc
 1248              	.LFE75:
 1249              		.size	turnLeft, .-turnLeft
 1250              		.section	.text.turnRight,"ax",%progbits
 1251              		.align	2
 1252              		.global	turnRight
 1253              		.thumb
 1254              		.thumb_func
 1255              		.type	turnRight, %function
 1256              	turnRight:
 1257              	.LFB76:
 538:.\main.c      **** 
 539:.\main.c      **** void turnRight() {
 1258              		.loc 1 539 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262 0000 80B5     		push	{r7, lr}
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266 0002 00AF     		add	r7, sp, #0
 1267              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 33


 540:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1268              		.loc 1 540 0
 1269 0004 4FF4E170 		mov	r0, #450
 1270 0008 FFF7FEFF 		bl	PWM_1_WriteCompare
 541:.\main.c      ****     PWM_2_WriteCompare(0);
 1271              		.loc 1 541 0
 1272 000c 0020     		movs	r0, #0
 1273 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 542:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1274              		.loc 1 542 0
 1275 0012 08E0     		b	.L62
 1276              	.L63:
 543:.\main.c      ****         if (adc_flag) {
 1277              		.loc 1 543 0
 1278 0014 084B     		ldr	r3, .L64
 1279 0016 1B68     		ldr	r3, [r3]
 1280 0018 002B     		cmp	r3, #0
 1281 001a 04D0     		beq	.L62
 544:.\main.c      ****             updateSensorValues();
 1282              		.loc 1 544 0
 1283 001c FFF7FEFF 		bl	updateSensorValues
 545:.\main.c      ****             adc_flag = FALSE;
 1284              		.loc 1 545 0
 1285 0020 054B     		ldr	r3, .L64
 1286 0022 0022     		movs	r2, #0
 1287 0024 1A60     		str	r2, [r3]
 1288              	.L62:
 542:.\main.c      ****         if (adc_flag) {
 1289              		.loc 1 542 0
 1290 0026 054B     		ldr	r3, .L64+4
 1291 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1292 002a 002B     		cmp	r3, #0
 1293 002c F2D0     		beq	.L63
 546:.\main.c      ****         }
 547:.\main.c      ****     }
 548:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1294              		.loc 1 548 0
 1295 002e 4FF4E170 		mov	r0, #450
 1296 0032 FFF7FEFF 		bl	PWM_2_WriteCompare
 549:.\main.c      **** }
 1297              		.loc 1 549 0
 1298 0036 80BD     		pop	{r7, pc}
 1299              	.L65:
 1300              		.align	2
 1301              	.L64:
 1302 0038 00000000 		.word	adc_flag
 1303 003c 00000000 		.word	sensor_readings
 1304              		.cfi_endproc
 1305              	.LFE76:
 1306              		.size	turnRight, .-turnRight
 1307              		.section	.text.sharpTurnLeft,"ax",%progbits
 1308              		.align	2
 1309              		.global	sharpTurnLeft
 1310              		.thumb
 1311              		.thumb_func
 1312              		.type	sharpTurnLeft, %function
 1313              	sharpTurnLeft:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 34


 1314              	.LFB77:
 550:.\main.c      **** 
 551:.\main.c      **** void sharpTurnLeft(int *right_wheel_count, int *left_wheel_count) {
 1315              		.loc 1 551 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 16
 1318              		@ frame_needed = 1, uses_anonymous_args = 0
 1319 0000 80B5     		push	{r7, lr}
 1320              		.cfi_def_cfa_offset 8
 1321              		.cfi_offset 7, -8
 1322              		.cfi_offset 14, -4
 1323 0002 84B0     		sub	sp, sp, #16
 1324              		.cfi_def_cfa_offset 24
 1325 0004 00AF     		add	r7, sp, #0
 1326              		.cfi_def_cfa_register 7
 1327 0006 7860     		str	r0, [r7, #4]
 1328 0008 3960     		str	r1, [r7]
 552:.\main.c      ****     int prevCountM1 = 0;
 1329              		.loc 1 552 0
 1330 000a 0023     		movs	r3, #0
 1331 000c FB60     		str	r3, [r7, #12]
 553:.\main.c      ****     int prevCountM2 = 0;
 1332              		.loc 1 553 0
 1333 000e 0023     		movs	r3, #0
 1334 0010 BB60     		str	r3, [r7, #8]
 554:.\main.c      ****     
 555:.\main.c      ****     // go until we reach the line
 556:.\main.c      ****     while (!sensor_readings[BOTTOM_LEFT_SENSOR]) {
 1335              		.loc 1 556 0
 1336 0012 45E0     		b	.L67
 1337              	.L71:
 557:.\main.c      ****         if (adc_flag) {
 1338              		.loc 1 557 0
 1339 0014 2E4B     		ldr	r3, .L72
 1340 0016 1B68     		ldr	r3, [r3]
 1341 0018 002B     		cmp	r3, #0
 1342 001a 04D0     		beq	.L68
 558:.\main.c      ****             updateSensorValues();
 1343              		.loc 1 558 0
 1344 001c FFF7FEFF 		bl	updateSensorValues
 559:.\main.c      ****             adc_flag = FALSE;
 1345              		.loc 1 559 0
 1346 0020 2B4B     		ldr	r3, .L72
 1347 0022 0022     		movs	r2, #0
 1348 0024 1A60     		str	r2, [r3]
 1349              	.L68:
 560:.\main.c      ****         }
 561:.\main.c      ****         
 562:.\main.c      ****          // New count values from encoder are ready
 563:.\main.c      ****         if (timer_flag){
 1350              		.loc 1 563 0
 1351 0026 2B4B     		ldr	r3, .L72+4
 1352 0028 1B68     		ldr	r3, [r3]
 1353 002a 002B     		cmp	r3, #0
 1354 002c 38D0     		beq	.L67
 564:.\main.c      ****             isr_TS_Disable();
 1355              		.loc 1 564 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 35


 1356 002e FFF7FEFF 		bl	isr_TS_Disable
 565:.\main.c      ****             
 566:.\main.c      ****             // Correct speed
 567:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 1357              		.loc 1 567 0
 1358 0032 294B     		ldr	r3, .L72+8
 1359 0034 1A68     		ldr	r2, [r3]
 1360 0036 3B68     		ldr	r3, [r7]
 1361 0038 1B68     		ldr	r3, [r3]
 1362 003a F868     		ldr	r0, [r7, #12]
 1363 003c 1146     		mov	r1, r2
 1364 003e 1A46     		mov	r2, r3
 1365 0040 0123     		movs	r3, #1
 1366 0042 FFF7FEFF 		bl	correctSpeed
 568:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 1367              		.loc 1 568 0
 1368 0046 254B     		ldr	r3, .L72+12
 1369 0048 1A68     		ldr	r2, [r3]
 1370 004a 7B68     		ldr	r3, [r7, #4]
 1371 004c 1B68     		ldr	r3, [r3]
 1372 004e B868     		ldr	r0, [r7, #8]
 1373 0050 1146     		mov	r1, r2
 1374 0052 1A46     		mov	r2, r3
 1375 0054 0023     		movs	r3, #0
 1376 0056 FFF7FEFF 		bl	correctSpeed
 569:.\main.c      ****             
 570:.\main.c      ****             *left_wheel_count -= SLOW_DOWN_SPEED;
 1377              		.loc 1 570 0
 1378 005a 3B68     		ldr	r3, [r7]
 1379 005c 1B68     		ldr	r3, [r3]
 1380 005e 5A1E     		subs	r2, r3, #1
 1381 0060 3B68     		ldr	r3, [r7]
 1382 0062 1A60     		str	r2, [r3]
 571:.\main.c      ****             *right_wheel_count -= SLOW_DOWN_SPEED;
 1383              		.loc 1 571 0
 1384 0064 7B68     		ldr	r3, [r7, #4]
 1385 0066 1B68     		ldr	r3, [r3]
 1386 0068 5A1E     		subs	r2, r3, #1
 1387 006a 7B68     		ldr	r3, [r7, #4]
 1388 006c 1A60     		str	r2, [r3]
 572:.\main.c      ****             if (*right_wheel_count < MIN_SPEED) {
 1389              		.loc 1 572 0
 1390 006e 7B68     		ldr	r3, [r7, #4]
 1391 0070 1B68     		ldr	r3, [r3]
 1392 0072 032B     		cmp	r3, #3
 1393 0074 02DC     		bgt	.L69
 573:.\main.c      ****                 *right_wheel_count = MIN_SPEED;
 1394              		.loc 1 573 0
 1395 0076 7B68     		ldr	r3, [r7, #4]
 1396 0078 0422     		movs	r2, #4
 1397 007a 1A60     		str	r2, [r3]
 1398              	.L69:
 574:.\main.c      ****             }
 575:.\main.c      ****             if (*left_wheel_count < MIN_SPEED) {
 1399              		.loc 1 575 0
 1400 007c 3B68     		ldr	r3, [r7]
 1401 007e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 36


 1402 0080 032B     		cmp	r3, #3
 1403 0082 02DC     		bgt	.L70
 576:.\main.c      ****                 *left_wheel_count = MIN_SPEED;
 1404              		.loc 1 576 0
 1405 0084 3B68     		ldr	r3, [r7]
 1406 0086 0422     		movs	r2, #4
 1407 0088 1A60     		str	r2, [r3]
 1408              	.L70:
 577:.\main.c      ****             }
 578:.\main.c      ****             
 579:.\main.c      ****             // Update previous values
 580:.\main.c      ****             prevCountM1 = countM1;
 1409              		.loc 1 580 0
 1410 008a 134B     		ldr	r3, .L72+8
 1411 008c 1B68     		ldr	r3, [r3]
 1412 008e FB60     		str	r3, [r7, #12]
 581:.\main.c      ****             prevCountM2 = countM2;
 1413              		.loc 1 581 0
 1414 0090 124B     		ldr	r3, .L72+12
 1415 0092 1B68     		ldr	r3, [r3]
 1416 0094 BB60     		str	r3, [r7, #8]
 582:.\main.c      ****             
 583:.\main.c      ****             // Reset flag
 584:.\main.c      ****             timer_flag = FALSE;
 1417              		.loc 1 584 0
 1418 0096 0F4B     		ldr	r3, .L72+4
 1419 0098 0022     		movs	r2, #0
 1420 009a 1A60     		str	r2, [r3]
 585:.\main.c      ****             
 586:.\main.c      ****             isr_TS_Enable();
 1421              		.loc 1 586 0
 1422 009c FFF7FEFF 		bl	isr_TS_Enable
 1423              	.L67:
 556:.\main.c      ****         if (adc_flag) {
 1424              		.loc 1 556 0
 1425 00a0 0F4B     		ldr	r3, .L72+16
 1426 00a2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1427 00a4 002B     		cmp	r3, #0
 1428 00a6 B5D0     		beq	.L71
 587:.\main.c      ****         }
 588:.\main.c      ****         
 589:.\main.c      ****     }
 590:.\main.c      ****     
 591:.\main.c      ****     // make the turn
 592:.\main.c      ****     setWheelDirection(FALSE, TRUE);
 1429              		.loc 1 592 0
 1430 00a8 0020     		movs	r0, #0
 1431 00aa 0121     		movs	r1, #1
 1432 00ac FFF7FEFF 		bl	setWheelDirection
 593:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1433              		.loc 1 593 0
 1434 00b0 4FF4E170 		mov	r0, #450
 1435 00b4 FFF7FEFF 		bl	PWM_1_WriteCompare
 594:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1436              		.loc 1 594 0
 1437 00b8 4FF4E170 		mov	r0, #450
 1438 00bc FFF7FEFF 		bl	PWM_2_WriteCompare
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 37


 595:.\main.c      ****     
 596:.\main.c      ****     turnForDegrees(360);
 1439              		.loc 1 596 0
 1440 00c0 4FF4B470 		mov	r0, #360
 1441 00c4 FFF7FEFF 		bl	turnForDegrees
 597:.\main.c      **** //    while (!sensor_readings[TOP_MID_SENSOR]) {
 598:.\main.c      **** //        if (adc_flag) {
 599:.\main.c      **** //            updateSensorValues();
 600:.\main.c      **** //            adc_flag = FALSE;
 601:.\main.c      **** //        }
 602:.\main.c      **** //    }
 603:.\main.c      **** //    setWheelDirection(TRUE, TRUE);
 604:.\main.c      **** //    PWM_1_WriteCompare(TURN_SPEED);
 605:.\main.c      **** //    PWM_2_WriteCompare(TURN_SPEED);
 606:.\main.c      **** }
 1442              		.loc 1 606 0
 1443 00c8 1037     		adds	r7, r7, #16
 1444              		.cfi_def_cfa_offset 8
 1445 00ca BD46     		mov	sp, r7
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 00cc 80BD     		pop	{r7, pc}
 1449              	.L73:
 1450 00ce 00BF     		.align	2
 1451              	.L72:
 1452 00d0 00000000 		.word	adc_flag
 1453 00d4 00000000 		.word	timer_flag
 1454 00d8 00000000 		.word	countM1
 1455 00dc 00000000 		.word	countM2
 1456 00e0 00000000 		.word	sensor_readings
 1457              		.cfi_endproc
 1458              	.LFE77:
 1459              		.size	sharpTurnLeft, .-sharpTurnLeft
 1460              		.section	.text.sharpTurnRight,"ax",%progbits
 1461              		.align	2
 1462              		.global	sharpTurnRight
 1463              		.thumb
 1464              		.thumb_func
 1465              		.type	sharpTurnRight, %function
 1466              	sharpTurnRight:
 1467              	.LFB78:
 607:.\main.c      **** 
 608:.\main.c      **** void sharpTurnRight(int *right_wheel_count, int *left_wheel_count) {
 1468              		.loc 1 608 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 16
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472 0000 80B5     		push	{r7, lr}
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 7, -8
 1475              		.cfi_offset 14, -4
 1476 0002 84B0     		sub	sp, sp, #16
 1477              		.cfi_def_cfa_offset 24
 1478 0004 00AF     		add	r7, sp, #0
 1479              		.cfi_def_cfa_register 7
 1480 0006 7860     		str	r0, [r7, #4]
 1481 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 38


 609:.\main.c      ****     int prevCountM1 = 0;
 1482              		.loc 1 609 0
 1483 000a 0023     		movs	r3, #0
 1484 000c FB60     		str	r3, [r7, #12]
 610:.\main.c      ****     int prevCountM2 = 0;
 1485              		.loc 1 610 0
 1486 000e 0023     		movs	r3, #0
 1487 0010 BB60     		str	r3, [r7, #8]
 611:.\main.c      ****     
 612:.\main.c      ****     // go until we reach the line
 613:.\main.c      ****     while (!sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 1488              		.loc 1 613 0
 1489 0012 45E0     		b	.L75
 1490              	.L79:
 614:.\main.c      ****         if (adc_flag) {
 1491              		.loc 1 614 0
 1492 0014 2E4B     		ldr	r3, .L80
 1493 0016 1B68     		ldr	r3, [r3]
 1494 0018 002B     		cmp	r3, #0
 1495 001a 04D0     		beq	.L76
 615:.\main.c      ****             updateSensorValues();
 1496              		.loc 1 615 0
 1497 001c FFF7FEFF 		bl	updateSensorValues
 616:.\main.c      ****             adc_flag = FALSE;
 1498              		.loc 1 616 0
 1499 0020 2B4B     		ldr	r3, .L80
 1500 0022 0022     		movs	r2, #0
 1501 0024 1A60     		str	r2, [r3]
 1502              	.L76:
 617:.\main.c      ****         }
 618:.\main.c      ****         
 619:.\main.c      ****          // New count values from encoder are ready
 620:.\main.c      ****         if (timer_flag){
 1503              		.loc 1 620 0
 1504 0026 2B4B     		ldr	r3, .L80+4
 1505 0028 1B68     		ldr	r3, [r3]
 1506 002a 002B     		cmp	r3, #0
 1507 002c 38D0     		beq	.L75
 621:.\main.c      ****             isr_TS_Disable();
 1508              		.loc 1 621 0
 1509 002e FFF7FEFF 		bl	isr_TS_Disable
 622:.\main.c      ****             
 623:.\main.c      ****             // Correct speed
 624:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 1510              		.loc 1 624 0
 1511 0032 294B     		ldr	r3, .L80+8
 1512 0034 1A68     		ldr	r2, [r3]
 1513 0036 3B68     		ldr	r3, [r7]
 1514 0038 1B68     		ldr	r3, [r3]
 1515 003a F868     		ldr	r0, [r7, #12]
 1516 003c 1146     		mov	r1, r2
 1517 003e 1A46     		mov	r2, r3
 1518 0040 0123     		movs	r3, #1
 1519 0042 FFF7FEFF 		bl	correctSpeed
 625:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 1520              		.loc 1 625 0
 1521 0046 254B     		ldr	r3, .L80+12
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 39


 1522 0048 1A68     		ldr	r2, [r3]
 1523 004a 7B68     		ldr	r3, [r7, #4]
 1524 004c 1B68     		ldr	r3, [r3]
 1525 004e B868     		ldr	r0, [r7, #8]
 1526 0050 1146     		mov	r1, r2
 1527 0052 1A46     		mov	r2, r3
 1528 0054 0023     		movs	r3, #0
 1529 0056 FFF7FEFF 		bl	correctSpeed
 626:.\main.c      ****             
 627:.\main.c      ****             *left_wheel_count -= SLOW_DOWN_SPEED;
 1530              		.loc 1 627 0
 1531 005a 3B68     		ldr	r3, [r7]
 1532 005c 1B68     		ldr	r3, [r3]
 1533 005e 5A1E     		subs	r2, r3, #1
 1534 0060 3B68     		ldr	r3, [r7]
 1535 0062 1A60     		str	r2, [r3]
 628:.\main.c      ****             *right_wheel_count -= SLOW_DOWN_SPEED;
 1536              		.loc 1 628 0
 1537 0064 7B68     		ldr	r3, [r7, #4]
 1538 0066 1B68     		ldr	r3, [r3]
 1539 0068 5A1E     		subs	r2, r3, #1
 1540 006a 7B68     		ldr	r3, [r7, #4]
 1541 006c 1A60     		str	r2, [r3]
 629:.\main.c      ****             if (*right_wheel_count < MIN_SPEED) {
 1542              		.loc 1 629 0
 1543 006e 7B68     		ldr	r3, [r7, #4]
 1544 0070 1B68     		ldr	r3, [r3]
 1545 0072 032B     		cmp	r3, #3
 1546 0074 02DC     		bgt	.L77
 630:.\main.c      ****                 *right_wheel_count = MIN_SPEED;
 1547              		.loc 1 630 0
 1548 0076 7B68     		ldr	r3, [r7, #4]
 1549 0078 0422     		movs	r2, #4
 1550 007a 1A60     		str	r2, [r3]
 1551              	.L77:
 631:.\main.c      ****             }
 632:.\main.c      ****             if (*left_wheel_count < MIN_SPEED) {
 1552              		.loc 1 632 0
 1553 007c 3B68     		ldr	r3, [r7]
 1554 007e 1B68     		ldr	r3, [r3]
 1555 0080 032B     		cmp	r3, #3
 1556 0082 02DC     		bgt	.L78
 633:.\main.c      ****                 *left_wheel_count = MIN_SPEED;
 1557              		.loc 1 633 0
 1558 0084 3B68     		ldr	r3, [r7]
 1559 0086 0422     		movs	r2, #4
 1560 0088 1A60     		str	r2, [r3]
 1561              	.L78:
 634:.\main.c      ****             }
 635:.\main.c      ****             
 636:.\main.c      ****             // Update previous values
 637:.\main.c      ****             prevCountM1 = countM1;
 1562              		.loc 1 637 0
 1563 008a 134B     		ldr	r3, .L80+8
 1564 008c 1B68     		ldr	r3, [r3]
 1565 008e FB60     		str	r3, [r7, #12]
 638:.\main.c      ****             prevCountM2 = countM2;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 40


 1566              		.loc 1 638 0
 1567 0090 124B     		ldr	r3, .L80+12
 1568 0092 1B68     		ldr	r3, [r3]
 1569 0094 BB60     		str	r3, [r7, #8]
 639:.\main.c      ****             
 640:.\main.c      ****             // Reset flag
 641:.\main.c      ****             timer_flag = FALSE;
 1570              		.loc 1 641 0
 1571 0096 0F4B     		ldr	r3, .L80+4
 1572 0098 0022     		movs	r2, #0
 1573 009a 1A60     		str	r2, [r3]
 642:.\main.c      ****             
 643:.\main.c      ****             isr_TS_Enable();
 1574              		.loc 1 643 0
 1575 009c FFF7FEFF 		bl	isr_TS_Enable
 1576              	.L75:
 613:.\main.c      ****         if (adc_flag) {
 1577              		.loc 1 613 0
 1578 00a0 0F4B     		ldr	r3, .L80+16
 1579 00a2 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1580 00a4 002B     		cmp	r3, #0
 1581 00a6 B5D0     		beq	.L79
 644:.\main.c      ****         }
 645:.\main.c      ****     }
 646:.\main.c      ****     
 647:.\main.c      ****     // make the turn
 648:.\main.c      ****     setWheelDirection(TRUE, FALSE);
 1582              		.loc 1 648 0
 1583 00a8 0120     		movs	r0, #1
 1584 00aa 0021     		movs	r1, #0
 1585 00ac FFF7FEFF 		bl	setWheelDirection
 649:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1586              		.loc 1 649 0
 1587 00b0 4FF4E170 		mov	r0, #450
 1588 00b4 FFF7FEFF 		bl	PWM_1_WriteCompare
 650:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1589              		.loc 1 650 0
 1590 00b8 4FF4E170 		mov	r0, #450
 1591 00bc FFF7FEFF 		bl	PWM_2_WriteCompare
 651:.\main.c      ****     
 652:.\main.c      ****     turnForDegrees(360);
 1592              		.loc 1 652 0
 1593 00c0 4FF4B470 		mov	r0, #360
 1594 00c4 FFF7FEFF 		bl	turnForDegrees
 653:.\main.c      **** //    while (!sensor_readings[TOP_MID_SENSOR]) {
 654:.\main.c      **** //        if (adc_flag) {
 655:.\main.c      **** //            updateSensorValues();
 656:.\main.c      **** //            adc_flag = FALSE;
 657:.\main.c      **** //        }
 658:.\main.c      **** //    }
 659:.\main.c      **** //    setWheelDirection(TRUE, TRUE);
 660:.\main.c      **** //    PWM_1_WriteCompare(TURN_SPEED);
 661:.\main.c      **** //    PWM_2_WriteCompare(TURN_SPEED);
 662:.\main.c      **** }
 1595              		.loc 1 662 0
 1596 00c8 1037     		adds	r7, r7, #16
 1597              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 41


 1598 00ca BD46     		mov	sp, r7
 1599              		.cfi_def_cfa_register 13
 1600              		@ sp needed
 1601 00cc 80BD     		pop	{r7, pc}
 1602              	.L81:
 1603 00ce 00BF     		.align	2
 1604              	.L80:
 1605 00d0 00000000 		.word	adc_flag
 1606 00d4 00000000 		.word	timer_flag
 1607 00d8 00000000 		.word	countM1
 1608 00dc 00000000 		.word	countM2
 1609 00e0 00000000 		.word	sensor_readings
 1610              		.cfi_endproc
 1611              	.LFE78:
 1612              		.size	sharpTurnRight, .-sharpTurnRight
 1613              		.section	.text.usbPutString,"ax",%progbits
 1614              		.align	2
 1615              		.global	usbPutString
 1616              		.thumb
 1617              		.thumb_func
 1618              		.type	usbPutString, %function
 1619              	usbPutString:
 1620              	.LFB79:
 663:.\main.c      **** //* ================== UNUSED FUNCTIONS ======================
 664:.\main.c      **** 
 665:.\main.c      **** /*
 666:.\main.c      **** * Function for performing a 90 degree turn
 667:.\main.c      **** * returns true once finished
 668:.\main.c      **** */
 669:.\main.c      **** //int8 performTurn(int isLeft){
 670:.\main.c      **** //    // Reset decoder measurements
 671:.\main.c      **** //    QuadDec_M1_SetCounter(0);
 672:.\main.c      **** //    QuadDec_M2_SetCounter(0);
 673:.\main.c      **** //    
 674:.\main.c      **** //    int M1_count, M2_count = 0;
 675:.\main.c      **** //    
 676:.\main.c      **** //    // Set PWMs to rotate
 677:.\main.c      **** //    PWM_1_WriteCompare(TURN_PWM_VAL);
 678:.\main.c      **** //    PWM_2_WriteCompare(TURN_PWM_VAL);
 679:.\main.c      **** //    
 680:.\main.c      **** //    // Set wheel direction for rotating on the spot
 681:.\main.c      **** //    if (isLeft){
 682:.\main.c      **** //        // left wheel moves backwarsd, right moves forwards
 683:.\main.c      **** //        setWheelDirection(FALSE, TRUE);}
 684:.\main.c      **** //    else {
 685:.\main.c      **** //        // right wheel moves forwards, left moves backwards
 686:.\main.c      **** //        setWheelDirection(TRUE, FALSE);
 687:.\main.c      **** //    }
 688:.\main.c      **** //    
 689:.\main.c      **** //    while (M1_count < TICKS_FOR_TURN || M2_count < TICKS_FOR_TURN) {
 690:.\main.c      **** //        M1_count = QuadDec_M1_GetCounter();
 691:.\main.c      **** //        M2_count = QuadDec_M2_GetCounter();
 692:.\main.c      **** //    }
 693:.\main.c      **** //    
 694:.\main.c      **** //    PWM_1_WriteCompare(0);
 695:.\main.c      **** //    PWM_2_WriteCompare(0);
 696:.\main.c      **** //    
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 42


 697:.\main.c      **** //    return TRUE;
 698:.\main.c      **** //}
 699:.\main.c      **** 
 700:.\main.c      **** 
 701:.\main.c      **** //* ========================================
 702:.\main.c      **** void usbPutString(char *s)
 703:.\main.c      **** {
 1621              		.loc 1 703 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 8
 1624              		@ frame_needed = 1, uses_anonymous_args = 0
 1625              		@ link register save eliminated.
 1626 0000 80B4     		push	{r7}
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0002 83B0     		sub	sp, sp, #12
 1630              		.cfi_def_cfa_offset 16
 1631 0004 00AF     		add	r7, sp, #0
 1632              		.cfi_def_cfa_register 7
 1633 0006 7860     		str	r0, [r7, #4]
 704:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
 705:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
 706:.\main.c      **** //  length to 62 char (63rd char is a '!')
 707:.\main.c      ****     
 708:.\main.c      **** #ifdef PUTTY
 709:.\main.c      ****     
 710:.\main.c      ****     while (USBUART_CDCIsReady() == 0){ };
 711:.\main.c      ****     USBUART_PutData((uint8 *)s, strlen(s));
 712:.\main.c      ****     
 713:.\main.c      **** #endif
 714:.\main.c      **** 
 715:.\main.c      ****     (void)s;
 716:.\main.c      **** 
 717:.\main.c      ****     return;
 1634              		.loc 1 717 0
 1635 0008 00BF     		nop
 718:.\main.c      **** }
 1636              		.loc 1 718 0
 1637 000a 0C37     		adds	r7, r7, #12
 1638              		.cfi_def_cfa_offset 4
 1639 000c BD46     		mov	sp, r7
 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 000e 5DF8047B 		ldr	r7, [sp], #4
 1643              		.cfi_restore 7
 1644              		.cfi_def_cfa_offset 0
 1645 0012 7047     		bx	lr
 1646              		.cfi_endproc
 1647              	.LFE79:
 1648              		.size	usbPutString, .-usbPutString
 1649              		.text
 1650              	.Letext0:
 1651              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1652              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1653              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1654              		.file 5 ".\\vars.h"
 1655              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 43


 1656              		.section	.debug_info,"",%progbits
 1657              	.Ldebug_info0:
 1658 0000 54080000 		.4byte	0x854
 1659 0004 0400     		.2byte	0x4
 1660 0006 00000000 		.4byte	.Ldebug_abbrev0
 1661 000a 04       		.byte	0x4
 1662 000b 01       		.uleb128 0x1
 1663 000c 47020000 		.4byte	.LASF113
 1664 0010 01       		.byte	0x1
 1665 0011 3B000000 		.4byte	.LASF114
 1666 0015 C8000000 		.4byte	.LASF115
 1667 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1668 001d 00000000 		.4byte	0
 1669 0021 00000000 		.4byte	.Ldebug_line0
 1670 0025 02       		.uleb128 0x2
 1671 0026 01       		.byte	0x1
 1672 0027 06       		.byte	0x6
 1673 0028 6E030000 		.4byte	.LASF0
 1674 002c 02       		.uleb128 0x2
 1675 002d 01       		.byte	0x1
 1676 002e 08       		.byte	0x8
 1677 002f 38030000 		.4byte	.LASF1
 1678 0033 02       		.uleb128 0x2
 1679 0034 02       		.byte	0x2
 1680 0035 05       		.byte	0x5
 1681 0036 68000000 		.4byte	.LASF2
 1682 003a 02       		.uleb128 0x2
 1683 003b 02       		.byte	0x2
 1684 003c 07       		.byte	0x7
 1685 003d 05040000 		.4byte	.LASF3
 1686 0041 03       		.uleb128 0x3
 1687 0042 5C050000 		.4byte	.LASF11
 1688 0046 02       		.byte	0x2
 1689 0047 3F       		.byte	0x3f
 1690 0048 4C000000 		.4byte	0x4c
 1691 004c 02       		.uleb128 0x2
 1692 004d 04       		.byte	0x4
 1693 004e 05       		.byte	0x5
 1694 004f 39040000 		.4byte	.LASF4
 1695 0053 02       		.uleb128 0x2
 1696 0054 04       		.byte	0x4
 1697 0055 07       		.byte	0x7
 1698 0056 D8030000 		.4byte	.LASF5
 1699 005a 02       		.uleb128 0x2
 1700 005b 08       		.byte	0x8
 1701 005c 05       		.byte	0x5
 1702 005d DC010000 		.4byte	.LASF6
 1703 0061 02       		.uleb128 0x2
 1704 0062 08       		.byte	0x8
 1705 0063 07       		.byte	0x7
 1706 0064 88030000 		.4byte	.LASF7
 1707 0068 04       		.uleb128 0x4
 1708 0069 04       		.byte	0x4
 1709 006a 05       		.byte	0x5
 1710 006b 696E7400 		.ascii	"int\000"
 1711 006f 02       		.uleb128 0x2
 1712 0070 04       		.byte	0x4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 44


 1713 0071 07       		.byte	0x7
 1714 0072 A5030000 		.4byte	.LASF8
 1715 0076 02       		.uleb128 0x2
 1716 0077 04       		.byte	0x4
 1717 0078 07       		.byte	0x7
 1718 0079 7F000000 		.4byte	.LASF9
 1719 007d 05       		.uleb128 0x5
 1720 007e 04       		.byte	0x4
 1721 007f 83000000 		.4byte	0x83
 1722 0083 02       		.uleb128 0x2
 1723 0084 01       		.byte	0x1
 1724 0085 08       		.byte	0x8
 1725 0086 2B040000 		.4byte	.LASF10
 1726 008a 03       		.uleb128 0x3
 1727 008b 5B040000 		.4byte	.LASF12
 1728 008f 03       		.byte	0x3
 1729 0090 2C       		.byte	0x2c
 1730 0091 41000000 		.4byte	0x41
 1731 0095 06       		.uleb128 0x6
 1732 0096 83010000 		.4byte	.LASF13
 1733 009a 04       		.byte	0x4
 1734 009b 9201     		.2byte	0x192
 1735 009d 2C000000 		.4byte	0x2c
 1736 00a1 06       		.uleb128 0x6
 1737 00a2 70010000 		.4byte	.LASF14
 1738 00a6 04       		.byte	0x4
 1739 00a7 9301     		.2byte	0x193
 1740 00a9 3A000000 		.4byte	0x3a
 1741 00ad 06       		.uleb128 0x6
 1742 00ae F7010000 		.4byte	.LASF15
 1743 00b2 04       		.byte	0x4
 1744 00b3 9501     		.2byte	0x195
 1745 00b5 25000000 		.4byte	0x25
 1746 00b9 06       		.uleb128 0x6
 1747 00ba 7D010000 		.4byte	.LASF16
 1748 00be 04       		.byte	0x4
 1749 00bf 9601     		.2byte	0x196
 1750 00c1 33000000 		.4byte	0x33
 1751 00c5 06       		.uleb128 0x6
 1752 00c6 0B050000 		.4byte	.LASF17
 1753 00ca 04       		.byte	0x4
 1754 00cb 9701     		.2byte	0x197
 1755 00cd 4C000000 		.4byte	0x4c
 1756 00d1 02       		.uleb128 0x2
 1757 00d2 04       		.byte	0x4
 1758 00d3 04       		.byte	0x4
 1759 00d4 D6010000 		.4byte	.LASF18
 1760 00d8 02       		.uleb128 0x2
 1761 00d9 08       		.byte	0x8
 1762 00da 04       		.byte	0x4
 1763 00db 11050000 		.4byte	.LASF19
 1764 00df 07       		.uleb128 0x7
 1765 00e0 18040000 		.4byte	.LASF116
 1766 00e4 20       		.byte	0x20
 1767 00e5 05       		.byte	0x5
 1768 00e6 29       		.byte	0x29
 1769 00e7 B8010000 		.4byte	0x1b8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 45


 1770 00eb 08       		.uleb128 0x8
 1771 00ec 1C060000 		.4byte	.LASF20
 1772 00f0 05       		.byte	0x5
 1773 00f1 2A       		.byte	0x2a
 1774 00f2 AD000000 		.4byte	0xad
 1775 00f6 00       		.byte	0
 1776 00f7 08       		.uleb128 0x8
 1777 00f8 77010000 		.4byte	.LASF21
 1778 00fc 05       		.byte	0x5
 1779 00fd 2B       		.byte	0x2b
 1780 00fe 95000000 		.4byte	0x95
 1781 0102 01       		.byte	0x1
 1782 0103 08       		.uleb128 0x8
 1783 0104 42040000 		.4byte	.LASF22
 1784 0108 05       		.byte	0x5
 1785 0109 2C       		.byte	0x2c
 1786 010a B9000000 		.4byte	0xb9
 1787 010e 02       		.byte	0x2
 1788 010f 08       		.uleb128 0x8
 1789 0110 EF050000 		.4byte	.LASF23
 1790 0114 05       		.byte	0x5
 1791 0115 2D       		.byte	0x2d
 1792 0116 B9000000 		.4byte	0xb9
 1793 011a 04       		.byte	0x4
 1794 011b 08       		.uleb128 0x8
 1795 011c E0020000 		.4byte	.LASF24
 1796 0120 05       		.byte	0x5
 1797 0121 2E       		.byte	0x2e
 1798 0122 B9000000 		.4byte	0xb9
 1799 0126 06       		.byte	0x6
 1800 0127 08       		.uleb128 0x8
 1801 0128 E0040000 		.4byte	.LASF25
 1802 012c 05       		.byte	0x5
 1803 012d 2F       		.byte	0x2f
 1804 012e B9000000 		.4byte	0xb9
 1805 0132 08       		.byte	0x8
 1806 0133 08       		.uleb128 0x8
 1807 0134 8E050000 		.4byte	.LASF26
 1808 0138 05       		.byte	0x5
 1809 0139 30       		.byte	0x30
 1810 013a B9000000 		.4byte	0xb9
 1811 013e 0A       		.byte	0xa
 1812 013f 08       		.uleb128 0x8
 1813 0140 50030000 		.4byte	.LASF27
 1814 0144 05       		.byte	0x5
 1815 0145 31       		.byte	0x31
 1816 0146 B9000000 		.4byte	0xb9
 1817 014a 0C       		.byte	0xc
 1818 014b 08       		.uleb128 0x8
 1819 014c 26020000 		.4byte	.LASF28
 1820 0150 05       		.byte	0x5
 1821 0151 32       		.byte	0x32
 1822 0152 B9000000 		.4byte	0xb9
 1823 0156 0E       		.byte	0xe
 1824 0157 08       		.uleb128 0x8
 1825 0158 FD030000 		.4byte	.LASF29
 1826 015c 05       		.byte	0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 46


 1827 015d 33       		.byte	0x33
 1828 015e B9000000 		.4byte	0xb9
 1829 0162 10       		.byte	0x10
 1830 0163 08       		.uleb128 0x8
 1831 0164 1C030000 		.4byte	.LASF30
 1832 0168 05       		.byte	0x5
 1833 0169 34       		.byte	0x34
 1834 016a B9000000 		.4byte	0xb9
 1835 016e 12       		.byte	0x12
 1836 016f 08       		.uleb128 0x8
 1837 0170 8D040000 		.4byte	.LASF31
 1838 0174 05       		.byte	0x5
 1839 0175 35       		.byte	0x35
 1840 0176 B9000000 		.4byte	0xb9
 1841 017a 14       		.byte	0x14
 1842 017b 08       		.uleb128 0x8
 1843 017c 89010000 		.4byte	.LASF32
 1844 0180 05       		.byte	0x5
 1845 0181 36       		.byte	0x36
 1846 0182 B9000000 		.4byte	0xb9
 1847 0186 16       		.byte	0x16
 1848 0187 08       		.uleb128 0x8
 1849 0188 60000000 		.4byte	.LASF33
 1850 018c 05       		.byte	0x5
 1851 018d 37       		.byte	0x37
 1852 018e B9000000 		.4byte	0xb9
 1853 0192 18       		.byte	0x18
 1854 0193 08       		.uleb128 0x8
 1855 0194 1E020000 		.4byte	.LASF34
 1856 0198 05       		.byte	0x5
 1857 0199 38       		.byte	0x38
 1858 019a B9000000 		.4byte	0xb9
 1859 019e 1A       		.byte	0x1a
 1860 019f 08       		.uleb128 0x8
 1861 01a0 F4030000 		.4byte	.LASF35
 1862 01a4 05       		.byte	0x5
 1863 01a5 39       		.byte	0x39
 1864 01a6 B9000000 		.4byte	0xb9
 1865 01aa 1C       		.byte	0x1c
 1866 01ab 08       		.uleb128 0x8
 1867 01ac 73040000 		.4byte	.LASF36
 1868 01b0 05       		.byte	0x5
 1869 01b1 3A       		.byte	0x3a
 1870 01b2 B9000000 		.4byte	0xb9
 1871 01b6 1E       		.byte	0x1e
 1872 01b7 00       		.byte	0
 1873 01b8 09       		.uleb128 0x9
 1874 01b9 A1040000 		.4byte	.LASF46
 1875 01bd 01       		.byte	0x1
 1876 01be 01       		.byte	0x1
 1877 01bf 42       		.byte	0x42
 1878 01c0 FB010000 		.4byte	0x1fb
 1879 01c4 0A       		.uleb128 0xa
 1880 01c5 44000000 		.4byte	.LASF37
 1881 01c9 00       		.sleb128 0
 1882 01ca 0A       		.uleb128 0xa
 1883 01cb A8000000 		.4byte	.LASF38
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 47


 1884 01cf 01       		.sleb128 1
 1885 01d0 0A       		.uleb128 0xa
 1886 01d1 3E060000 		.4byte	.LASF39
 1887 01d5 02       		.sleb128 2
 1888 01d6 0A       		.uleb128 0xa
 1889 01d7 2E000000 		.4byte	.LASF40
 1890 01db 03       		.sleb128 3
 1891 01dc 0A       		.uleb128 0xa
 1892 01dd CC040000 		.4byte	.LASF41
 1893 01e1 04       		.sleb128 4
 1894 01e2 0A       		.uleb128 0xa
 1895 01e3 D5020000 		.4byte	.LASF42
 1896 01e7 05       		.sleb128 5
 1897 01e8 0A       		.uleb128 0xa
 1898 01e9 46030000 		.4byte	.LASF43
 1899 01ed 06       		.sleb128 6
 1900 01ee 0A       		.uleb128 0xa
 1901 01ef 4B050000 		.4byte	.LASF44
 1902 01f3 07       		.sleb128 7
 1903 01f4 0A       		.uleb128 0xa
 1904 01f5 42020000 		.4byte	.LASF45
 1905 01f9 08       		.sleb128 8
 1906 01fa 00       		.byte	0
 1907 01fb 03       		.uleb128 0x3
 1908 01fc A1040000 		.4byte	.LASF46
 1909 0200 01       		.byte	0x1
 1910 0201 4C       		.byte	0x4c
 1911 0202 B8010000 		.4byte	0x1b8
 1912 0206 0B       		.uleb128 0xb
 1913 0207 62030000 		.4byte	.LASF47
 1914 020b 01       		.byte	0x1
 1915 020c 70       		.byte	0x70
 1916 020d 00000000 		.4byte	.LFB63
 1917 0211 30000000 		.4byte	.LFE63-.LFB63
 1918 0215 01       		.uleb128 0x1
 1919 0216 9C       		.byte	0x9c
 1920 0217 0C       		.uleb128 0xc
 1921 0218 0B000000 		.4byte	.LASF48
 1922 021c 01       		.byte	0x1
 1923 021d 77       		.byte	0x77
 1924 021e 00000000 		.4byte	.LFB64
 1925 0222 18000000 		.4byte	.LFE64-.LFB64
 1926 0226 01       		.uleb128 0x1
 1927 0227 9C       		.byte	0x9c
 1928 0228 0D       		.uleb128 0xd
 1929 0229 B7000000 		.4byte	.LASF55
 1930 022d 01       		.byte	0x1
 1931 022e 8C       		.byte	0x8c
 1932 022f 68000000 		.4byte	0x68
 1933 0233 00000000 		.4byte	.LFB65
 1934 0237 A0000000 		.4byte	.LFE65-.LFB65
 1935 023b 01       		.uleb128 0x1
 1936 023c 9C       		.byte	0x9c
 1937 023d A1020000 		.4byte	0x2a1
 1938 0241 0E       		.uleb128 0xe
 1939 0242 24030000 		.4byte	.LASF49
 1940 0246 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 48


 1941 0247 B2       		.byte	0xb2
 1942 0248 68000000 		.4byte	0x68
 1943 024c 02       		.uleb128 0x2
 1944 024d 91       		.byte	0x91
 1945 024e 74       		.sleb128 -12
 1946 024f 0E       		.uleb128 0xe
 1947 0250 96010000 		.4byte	.LASF50
 1948 0254 01       		.byte	0x1
 1949 0255 B3       		.byte	0xb3
 1950 0256 68000000 		.4byte	0x68
 1951 025a 02       		.uleb128 0x2
 1952 025b 91       		.byte	0x91
 1953 025c 70       		.sleb128 -16
 1954 025d 0E       		.uleb128 0xe
 1955 025e E8040000 		.4byte	.LASF51
 1956 0262 01       		.byte	0x1
 1957 0263 B4       		.byte	0xb4
 1958 0264 68000000 		.4byte	0x68
 1959 0268 02       		.uleb128 0x2
 1960 0269 91       		.byte	0x91
 1961 026a 6C       		.sleb128 -20
 1962 026b 0E       		.uleb128 0xe
 1963 026c FA040000 		.4byte	.LASF52
 1964 0270 01       		.byte	0x1
 1965 0271 B5       		.byte	0xb5
 1966 0272 68000000 		.4byte	0x68
 1967 0276 02       		.uleb128 0x2
 1968 0277 91       		.byte	0x91
 1969 0278 68       		.sleb128 -24
 1970 0279 0E       		.uleb128 0xe
 1971 027a 76050000 		.4byte	.LASF53
 1972 027e 01       		.byte	0x1
 1973 027f B6       		.byte	0xb6
 1974 0280 68000000 		.4byte	0x68
 1975 0284 02       		.uleb128 0x2
 1976 0285 91       		.byte	0x91
 1977 0286 64       		.sleb128 -28
 1978 0287 0F       		.uleb128 0xf
 1979 0288 4C000000 		.4byte	.LASF117
 1980 028c 01       		.byte	0x1
 1981 028d B8       		.byte	0xb8
 1982 028e FB010000 		.4byte	0x1fb
 1983 0292 0E       		.uleb128 0xe
 1984 0293 FA050000 		.4byte	.LASF54
 1985 0297 01       		.byte	0x1
 1986 0298 B9       		.byte	0xb9
 1987 0299 FB010000 		.4byte	0x1fb
 1988 029d 02       		.uleb128 0x2
 1989 029e 91       		.byte	0x91
 1990 029f 63       		.sleb128 -29
 1991 02a0 00       		.byte	0
 1992 02a1 10       		.uleb128 0x10
 1993 02a2 CB010000 		.4byte	.LASF56
 1994 02a6 01       		.byte	0x1
 1995 02a7 5A01     		.2byte	0x15a
 1996 02a9 00000000 		.4byte	.LFB66
 1997 02ad 78010000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 49


 1998 02b1 01       		.uleb128 0x1
 1999 02b2 9C       		.byte	0x9c
 2000 02b3 12030000 		.4byte	0x312
 2001 02b7 11       		.uleb128 0x11
 2002 02b8 BB040000 		.4byte	.LASF57
 2003 02bc 01       		.byte	0x1
 2004 02bd 5A01     		.2byte	0x15a
 2005 02bf 68000000 		.4byte	0x68
 2006 02c3 02       		.uleb128 0x2
 2007 02c4 91       		.byte	0x91
 2008 02c5 64       		.sleb128 -28
 2009 02c6 11       		.uleb128 0x11
 2010 02c7 E8040000 		.4byte	.LASF51
 2011 02cb 01       		.byte	0x1
 2012 02cc 5A01     		.2byte	0x15a
 2013 02ce 12030000 		.4byte	0x312
 2014 02d2 02       		.uleb128 0x2
 2015 02d3 91       		.byte	0x91
 2016 02d4 60       		.sleb128 -32
 2017 02d5 11       		.uleb128 0x11
 2018 02d6 FA040000 		.4byte	.LASF52
 2019 02da 01       		.byte	0x1
 2020 02db 5A01     		.2byte	0x15a
 2021 02dd 12030000 		.4byte	0x312
 2022 02e1 02       		.uleb128 0x2
 2023 02e2 91       		.byte	0x91
 2024 02e3 5C       		.sleb128 -36
 2025 02e4 12       		.uleb128 0x12
 2026 02e5 24030000 		.4byte	.LASF49
 2027 02e9 01       		.byte	0x1
 2028 02ea 5C01     		.2byte	0x15c
 2029 02ec 68000000 		.4byte	0x68
 2030 02f0 02       		.uleb128 0x2
 2031 02f1 91       		.byte	0x91
 2032 02f2 74       		.sleb128 -12
 2033 02f3 12       		.uleb128 0x12
 2034 02f4 96010000 		.4byte	.LASF50
 2035 02f8 01       		.byte	0x1
 2036 02f9 5D01     		.2byte	0x15d
 2037 02fb 68000000 		.4byte	0x68
 2038 02ff 02       		.uleb128 0x2
 2039 0300 91       		.byte	0x91
 2040 0301 70       		.sleb128 -16
 2041 0302 12       		.uleb128 0x12
 2042 0303 22040000 		.4byte	.LASF58
 2043 0307 01       		.byte	0x1
 2044 0308 6001     		.2byte	0x160
 2045 030a D1000000 		.4byte	0xd1
 2046 030e 02       		.uleb128 0x2
 2047 030f 91       		.byte	0x91
 2048 0310 6C       		.sleb128 -20
 2049 0311 00       		.byte	0
 2050 0312 05       		.uleb128 0x5
 2051 0313 04       		.byte	0x4
 2052 0314 68000000 		.4byte	0x68
 2053 0318 13       		.uleb128 0x13
 2054 0319 B5050000 		.4byte	.LASF65
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 50


 2055 031d 01       		.byte	0x1
 2056 031e 9D01     		.2byte	0x19d
 2057 0320 D1000000 		.4byte	0xd1
 2058 0324 00000000 		.4byte	.LFB67
 2059 0328 CC000000 		.4byte	.LFE67-.LFB67
 2060 032c 01       		.uleb128 0x1
 2061 032d 9C       		.byte	0x9c
 2062 032e 6F030000 		.4byte	0x36f
 2063 0332 11       		.uleb128 0x11
 2064 0333 24030000 		.4byte	.LASF49
 2065 0337 01       		.byte	0x1
 2066 0338 9D01     		.2byte	0x19d
 2067 033a 68000000 		.4byte	0x68
 2068 033e 02       		.uleb128 0x2
 2069 033f 91       		.byte	0x91
 2070 0340 6C       		.sleb128 -20
 2071 0341 11       		.uleb128 0x11
 2072 0342 96010000 		.4byte	.LASF50
 2073 0346 01       		.byte	0x1
 2074 0347 9D01     		.2byte	0x19d
 2075 0349 68000000 		.4byte	0x68
 2076 034d 02       		.uleb128 0x2
 2077 034e 91       		.byte	0x91
 2078 034f 68       		.sleb128 -24
 2079 0350 12       		.uleb128 0x12
 2080 0351 B2030000 		.4byte	.LASF59
 2081 0355 01       		.byte	0x1
 2082 0356 9E01     		.2byte	0x19e
 2083 0358 D1000000 		.4byte	0xd1
 2084 035c 02       		.uleb128 0x2
 2085 035d 91       		.byte	0x91
 2086 035e 74       		.sleb128 -12
 2087 035f 12       		.uleb128 0x12
 2088 0360 1A000000 		.4byte	.LASF60
 2089 0364 01       		.byte	0x1
 2090 0365 9F01     		.2byte	0x19f
 2091 0367 D1000000 		.4byte	0xd1
 2092 036b 02       		.uleb128 0x2
 2093 036c 91       		.byte	0x91
 2094 036d 70       		.sleb128 -16
 2095 036e 00       		.byte	0
 2096 036f 10       		.uleb128 0x10
 2097 0370 C9030000 		.4byte	.LASF61
 2098 0374 01       		.byte	0x1
 2099 0375 A301     		.2byte	0x1a3
 2100 0377 00000000 		.4byte	.LFB68
 2101 037b 8C000000 		.4byte	.LFE68-.LFB68
 2102 037f 01       		.uleb128 0x1
 2103 0380 9C       		.byte	0x9c
 2104 0381 D1030000 		.4byte	0x3d1
 2105 0385 11       		.uleb128 0x11
 2106 0386 30030000 		.4byte	.LASF62
 2107 038a 01       		.byte	0x1
 2108 038b A301     		.2byte	0x1a3
 2109 038d 68000000 		.4byte	0x68
 2110 0391 02       		.uleb128 0x2
 2111 0392 91       		.byte	0x91
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 51


 2112 0393 64       		.sleb128 -28
 2113 0394 12       		.uleb128 0x12
 2114 0395 52010000 		.4byte	.LASF63
 2115 0399 01       		.byte	0x1
 2116 039a A401     		.2byte	0x1a4
 2117 039c D1000000 		.4byte	0xd1
 2118 03a0 02       		.uleb128 0x2
 2119 03a1 91       		.byte	0x91
 2120 03a2 68       		.sleb128 -24
 2121 03a3 12       		.uleb128 0x12
 2122 03a4 63040000 		.4byte	.LASF64
 2123 03a8 01       		.byte	0x1
 2124 03a9 A501     		.2byte	0x1a5
 2125 03ab D1000000 		.4byte	0xd1
 2126 03af 02       		.uleb128 0x2
 2127 03b0 91       		.byte	0x91
 2128 03b1 74       		.sleb128 -12
 2129 03b2 12       		.uleb128 0x12
 2130 03b3 24030000 		.4byte	.LASF49
 2131 03b7 01       		.byte	0x1
 2132 03b8 A701     		.2byte	0x1a7
 2133 03ba 68000000 		.4byte	0x68
 2134 03be 02       		.uleb128 0x2
 2135 03bf 91       		.byte	0x91
 2136 03c0 70       		.sleb128 -16
 2137 03c1 12       		.uleb128 0x12
 2138 03c2 96010000 		.4byte	.LASF50
 2139 03c6 01       		.byte	0x1
 2140 03c7 A801     		.2byte	0x1a8
 2141 03c9 68000000 		.4byte	0x68
 2142 03cd 02       		.uleb128 0x2
 2143 03ce 91       		.byte	0x91
 2144 03cf 6C       		.sleb128 -20
 2145 03d0 00       		.byte	0
 2146 03d1 13       		.uleb128 0x13
 2147 03d2 AF010000 		.4byte	.LASF66
 2148 03d6 01       		.byte	0x1
 2149 03d7 BF01     		.2byte	0x1bf
 2150 03d9 C5000000 		.4byte	0xc5
 2151 03dd 00000000 		.4byte	.LFB69
 2152 03e1 24000000 		.4byte	.LFE69-.LFB69
 2153 03e5 01       		.uleb128 0x1
 2154 03e6 9C       		.byte	0x9c
 2155 03e7 F9030000 		.4byte	0x3f9
 2156 03eb 14       		.uleb128 0x14
 2157 03ec 6E00     		.ascii	"n\000"
 2158 03ee 01       		.byte	0x1
 2159 03ef BF01     		.2byte	0x1bf
 2160 03f1 B9000000 		.4byte	0xb9
 2161 03f5 02       		.uleb128 0x2
 2162 03f6 91       		.byte	0x91
 2163 03f7 76       		.sleb128 -10
 2164 03f8 00       		.byte	0
 2165 03f9 15       		.uleb128 0x15
 2166 03fa FC010000 		.4byte	.LASF118
 2167 03fe 01       		.byte	0x1
 2168 03ff C301     		.2byte	0x1c3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 52


 2169 0401 00000000 		.4byte	.LFB70
 2170 0405 B4000000 		.4byte	.LFE70-.LFB70
 2171 0409 01       		.uleb128 0x1
 2172 040a 9C       		.byte	0x9c
 2173 040b 36040000 		.4byte	0x436
 2174 040f 16       		.uleb128 0x16
 2175 0410 6900     		.ascii	"i\000"
 2176 0412 01       		.byte	0x1
 2177 0413 C501     		.2byte	0x1c5
 2178 0415 68000000 		.4byte	0x68
 2179 0419 02       		.uleb128 0x2
 2180 041a 91       		.byte	0x91
 2181 041b 74       		.sleb128 -12
 2182 041c 17       		.uleb128 0x17
 2183 041d 0C000000 		.4byte	.LBB2
 2184 0421 26000000 		.4byte	.LBE2-.LBB2
 2185 0425 12       		.uleb128 0x12
 2186 0426 D8040000 		.4byte	.LASF67
 2187 042a 01       		.byte	0x1
 2188 042b C701     		.2byte	0x1c7
 2189 042d 68000000 		.4byte	0x68
 2190 0431 02       		.uleb128 0x2
 2191 0432 91       		.byte	0x91
 2192 0433 70       		.sleb128 -16
 2193 0434 00       		.byte	0
 2194 0435 00       		.byte	0
 2195 0436 10       		.uleb128 0x10
 2196 0437 18050000 		.4byte	.LASF68
 2197 043b 01       		.byte	0x1
 2198 043c DA01     		.2byte	0x1da
 2199 043e 00000000 		.4byte	.LFB71
 2200 0442 2A000000 		.4byte	.LFE71-.LFB71
 2201 0446 01       		.uleb128 0x1
 2202 0447 9C       		.byte	0x9c
 2203 0448 6B040000 		.4byte	0x46b
 2204 044c 11       		.uleb128 0x11
 2205 044d 05060000 		.4byte	.LASF69
 2206 0451 01       		.byte	0x1
 2207 0452 DA01     		.2byte	0x1da
 2208 0454 68000000 		.4byte	0x68
 2209 0458 02       		.uleb128 0x2
 2210 0459 91       		.byte	0x91
 2211 045a 6C       		.sleb128 -20
 2212 045b 12       		.uleb128 0x12
 2213 045c 84050000 		.4byte	.LASF70
 2214 0460 01       		.byte	0x1
 2215 0461 DB01     		.2byte	0x1db
 2216 0463 68000000 		.4byte	0x68
 2217 0467 02       		.uleb128 0x2
 2218 0468 91       		.byte	0x91
 2219 0469 74       		.sleb128 -12
 2220 046a 00       		.byte	0
 2221 046b 10       		.uleb128 0x10
 2222 046c 88000000 		.4byte	.LASF71
 2223 0470 01       		.byte	0x1
 2224 0471 DF01     		.2byte	0x1df
 2225 0473 00000000 		.4byte	.LFB72
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 53


 2226 0477 2A000000 		.4byte	.LFE72-.LFB72
 2227 047b 01       		.uleb128 0x1
 2228 047c 9C       		.byte	0x9c
 2229 047d A0040000 		.4byte	0x4a0
 2230 0481 11       		.uleb128 0x11
 2231 0482 05060000 		.4byte	.LASF69
 2232 0486 01       		.byte	0x1
 2233 0487 DF01     		.2byte	0x1df
 2234 0489 68000000 		.4byte	0x68
 2235 048d 02       		.uleb128 0x2
 2236 048e 91       		.byte	0x91
 2237 048f 6C       		.sleb128 -20
 2238 0490 12       		.uleb128 0x12
 2239 0491 84050000 		.4byte	.LASF70
 2240 0495 01       		.byte	0x1
 2241 0496 E001     		.2byte	0x1e0
 2242 0498 68000000 		.4byte	0x68
 2243 049c 02       		.uleb128 0x2
 2244 049d 91       		.byte	0x91
 2245 049e 74       		.sleb128 -12
 2246 049f 00       		.byte	0
 2247 04a0 10       		.uleb128 0x10
 2248 04a1 A2010000 		.4byte	.LASF72
 2249 04a5 01       		.byte	0x1
 2250 04a6 E801     		.2byte	0x1e8
 2251 04a8 00000000 		.4byte	.LFB73
 2252 04ac 52000000 		.4byte	.LFE73-.LFB73
 2253 04b0 01       		.uleb128 0x1
 2254 04b1 9C       		.byte	0x9c
 2255 04b2 25050000 		.4byte	0x525
 2256 04b6 11       		.uleb128 0x11
 2257 04b7 EA030000 		.4byte	.LASF73
 2258 04bb 01       		.byte	0x1
 2259 04bc E801     		.2byte	0x1e8
 2260 04be 68000000 		.4byte	0x68
 2261 04c2 03       		.uleb128 0x3
 2262 04c3 91       		.byte	0x91
 2263 04c4 AC7F     		.sleb128 -84
 2264 04c6 11       		.uleb128 0x11
 2265 04c7 45050000 		.4byte	.LASF74
 2266 04cb 01       		.byte	0x1
 2267 04cc E801     		.2byte	0x1e8
 2268 04ce 68000000 		.4byte	0x68
 2269 04d2 03       		.uleb128 0x3
 2270 04d3 91       		.byte	0x91
 2271 04d4 A87F     		.sleb128 -88
 2272 04d6 11       		.uleb128 0x11
 2273 04d7 7A030000 		.4byte	.LASF75
 2274 04db 01       		.byte	0x1
 2275 04dc E801     		.2byte	0x1e8
 2276 04de 68000000 		.4byte	0x68
 2277 04e2 03       		.uleb128 0x3
 2278 04e3 91       		.byte	0x91
 2279 04e4 A47F     		.sleb128 -92
 2280 04e6 11       		.uleb128 0x11
 2281 04e7 BC000000 		.4byte	.LASF76
 2282 04eb 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 54


 2283 04ec E801     		.2byte	0x1e8
 2284 04ee 68000000 		.4byte	0x68
 2285 04f2 03       		.uleb128 0x3
 2286 04f3 91       		.byte	0x91
 2287 04f4 A07F     		.sleb128 -96
 2288 04f6 12       		.uleb128 0x12
 2289 04f7 96040000 		.4byte	.LASF77
 2290 04fb 01       		.byte	0x1
 2291 04fc ED01     		.2byte	0x1ed
 2292 04fe 68000000 		.4byte	0x68
 2293 0502 02       		.uleb128 0x2
 2294 0503 91       		.byte	0x91
 2295 0504 74       		.sleb128 -12
 2296 0505 16       		.uleb128 0x16
 2297 0506 6D736700 		.ascii	"msg\000"
 2298 050a 01       		.byte	0x1
 2299 050b F201     		.2byte	0x1f2
 2300 050d 25050000 		.4byte	0x525
 2301 0511 03       		.uleb128 0x3
 2302 0512 91       		.byte	0x91
 2303 0513 B07F     		.sleb128 -80
 2304 0515 12       		.uleb128 0x12
 2305 0516 00000000 		.4byte	.LASF78
 2306 051a 01       		.byte	0x1
 2307 051b F901     		.2byte	0x1f9
 2308 051d 68000000 		.4byte	0x68
 2309 0521 02       		.uleb128 0x2
 2310 0522 91       		.byte	0x91
 2311 0523 70       		.sleb128 -16
 2312 0524 00       		.byte	0
 2313 0525 18       		.uleb128 0x18
 2314 0526 83000000 		.4byte	0x83
 2315 052a 35050000 		.4byte	0x535
 2316 052e 19       		.uleb128 0x19
 2317 052f 76000000 		.4byte	0x76
 2318 0533 3F       		.byte	0x3f
 2319 0534 00       		.byte	0
 2320 0535 10       		.uleb128 0x10
 2321 0536 C1050000 		.4byte	.LASF79
 2322 053a 01       		.byte	0x1
 2323 053b 0A02     		.2byte	0x20a
 2324 053d 00000000 		.4byte	.LFB74
 2325 0541 2C000000 		.4byte	.LFE74-.LFB74
 2326 0545 01       		.uleb128 0x1
 2327 0546 9C       		.byte	0x9c
 2328 0547 6A050000 		.4byte	0x56a
 2329 054b 11       		.uleb128 0x11
 2330 054c 21060000 		.4byte	.LASF80
 2331 0550 01       		.byte	0x1
 2332 0551 0A02     		.2byte	0x20a
 2333 0553 68000000 		.4byte	0x68
 2334 0557 02       		.uleb128 0x2
 2335 0558 91       		.byte	0x91
 2336 0559 74       		.sleb128 -12
 2337 055a 11       		.uleb128 0x11
 2338 055b 33020000 		.4byte	.LASF81
 2339 055f 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 55


 2340 0560 0A02     		.2byte	0x20a
 2341 0562 68000000 		.4byte	0x68
 2342 0566 02       		.uleb128 0x2
 2343 0567 91       		.byte	0x91
 2344 0568 70       		.sleb128 -16
 2345 0569 00       		.byte	0
 2346 056a 1A       		.uleb128 0x1a
 2347 056b 59030000 		.4byte	.LASF82
 2348 056f 01       		.byte	0x1
 2349 0570 0F02     		.2byte	0x20f
 2350 0572 00000000 		.4byte	.LFB75
 2351 0576 40000000 		.4byte	.LFE75-.LFB75
 2352 057a 01       		.uleb128 0x1
 2353 057b 9C       		.byte	0x9c
 2354 057c 1A       		.uleb128 0x1a
 2355 057d 96050000 		.4byte	.LASF83
 2356 0581 01       		.byte	0x1
 2357 0582 1B02     		.2byte	0x21b
 2358 0584 00000000 		.4byte	.LFB76
 2359 0588 40000000 		.4byte	.LFE76-.LFB76
 2360 058c 01       		.uleb128 0x1
 2361 058d 9C       		.byte	0x9c
 2362 058e 10       		.uleb128 0x10
 2363 058f 4D040000 		.4byte	.LASF84
 2364 0593 01       		.byte	0x1
 2365 0594 2702     		.2byte	0x227
 2366 0596 00000000 		.4byte	.LFB77
 2367 059a E4000000 		.4byte	.LFE77-.LFB77
 2368 059e 01       		.uleb128 0x1
 2369 059f 9C       		.byte	0x9c
 2370 05a0 E1050000 		.4byte	0x5e1
 2371 05a4 11       		.uleb128 0x11
 2372 05a5 E8040000 		.4byte	.LASF51
 2373 05a9 01       		.byte	0x1
 2374 05aa 2702     		.2byte	0x227
 2375 05ac 12030000 		.4byte	0x312
 2376 05b0 02       		.uleb128 0x2
 2377 05b1 91       		.byte	0x91
 2378 05b2 6C       		.sleb128 -20
 2379 05b3 11       		.uleb128 0x11
 2380 05b4 FA040000 		.4byte	.LASF52
 2381 05b8 01       		.byte	0x1
 2382 05b9 2702     		.2byte	0x227
 2383 05bb 12030000 		.4byte	0x312
 2384 05bf 02       		.uleb128 0x2
 2385 05c0 91       		.byte	0x91
 2386 05c1 68       		.sleb128 -24
 2387 05c2 12       		.uleb128 0x12
 2388 05c3 24030000 		.4byte	.LASF49
 2389 05c7 01       		.byte	0x1
 2390 05c8 2802     		.2byte	0x228
 2391 05ca 68000000 		.4byte	0x68
 2392 05ce 02       		.uleb128 0x2
 2393 05cf 91       		.byte	0x91
 2394 05d0 74       		.sleb128 -12
 2395 05d1 12       		.uleb128 0x12
 2396 05d2 96010000 		.4byte	.LASF50
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 56


 2397 05d6 01       		.byte	0x1
 2398 05d7 2902     		.2byte	0x229
 2399 05d9 68000000 		.4byte	0x68
 2400 05dd 02       		.uleb128 0x2
 2401 05de 91       		.byte	0x91
 2402 05df 70       		.sleb128 -16
 2403 05e0 00       		.byte	0
 2404 05e1 10       		.uleb128 0x10
 2405 05e2 2F060000 		.4byte	.LASF85
 2406 05e6 01       		.byte	0x1
 2407 05e7 6002     		.2byte	0x260
 2408 05e9 00000000 		.4byte	.LFB78
 2409 05ed E4000000 		.4byte	.LFE78-.LFB78
 2410 05f1 01       		.uleb128 0x1
 2411 05f2 9C       		.byte	0x9c
 2412 05f3 34060000 		.4byte	0x634
 2413 05f7 11       		.uleb128 0x11
 2414 05f8 E8040000 		.4byte	.LASF51
 2415 05fc 01       		.byte	0x1
 2416 05fd 6002     		.2byte	0x260
 2417 05ff 12030000 		.4byte	0x312
 2418 0603 02       		.uleb128 0x2
 2419 0604 91       		.byte	0x91
 2420 0605 6C       		.sleb128 -20
 2421 0606 11       		.uleb128 0x11
 2422 0607 FA040000 		.4byte	.LASF52
 2423 060b 01       		.byte	0x1
 2424 060c 6002     		.2byte	0x260
 2425 060e 12030000 		.4byte	0x312
 2426 0612 02       		.uleb128 0x2
 2427 0613 91       		.byte	0x91
 2428 0614 68       		.sleb128 -24
 2429 0615 12       		.uleb128 0x12
 2430 0616 24030000 		.4byte	.LASF49
 2431 061a 01       		.byte	0x1
 2432 061b 6102     		.2byte	0x261
 2433 061d 68000000 		.4byte	0x68
 2434 0621 02       		.uleb128 0x2
 2435 0622 91       		.byte	0x91
 2436 0623 74       		.sleb128 -12
 2437 0624 12       		.uleb128 0x12
 2438 0625 96010000 		.4byte	.LASF50
 2439 0629 01       		.byte	0x1
 2440 062a 6202     		.2byte	0x262
 2441 062c 68000000 		.4byte	0x68
 2442 0630 02       		.uleb128 0x2
 2443 0631 91       		.byte	0x91
 2444 0632 70       		.sleb128 -16
 2445 0633 00       		.byte	0
 2446 0634 1B       		.uleb128 0x1b
 2447 0635 EA010000 		.4byte	.LASF86
 2448 0639 01       		.byte	0x1
 2449 063a BE02     		.2byte	0x2be
 2450 063c 00000000 		.4byte	.LFB79
 2451 0640 14000000 		.4byte	.LFE79-.LFB79
 2452 0644 01       		.uleb128 0x1
 2453 0645 9C       		.byte	0x9c
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 57


 2454 0646 58060000 		.4byte	0x658
 2455 064a 14       		.uleb128 0x14
 2456 064b 7300     		.ascii	"s\000"
 2457 064d 01       		.byte	0x1
 2458 064e BE02     		.2byte	0x2be
 2459 0650 7D000000 		.4byte	0x7d
 2460 0654 02       		.uleb128 0x2
 2461 0655 91       		.byte	0x91
 2462 0656 74       		.sleb128 -12
 2463 0657 00       		.byte	0
 2464 0658 1C       		.uleb128 0x1c
 2465 0659 63010000 		.4byte	.LASF87
 2466 065d 06       		.byte	0x6
 2467 065e 9606     		.2byte	0x696
 2468 0660 64060000 		.4byte	0x664
 2469 0664 1D       		.uleb128 0x1d
 2470 0665 8A000000 		.4byte	0x8a
 2471 0669 1E       		.uleb128 0x1e
 2472 066a 747300   		.ascii	"ts\000"
 2473 066d 05       		.byte	0x5
 2474 066e 10       		.byte	0x10
 2475 066f 95000000 		.4byte	0x95
 2476 0673 05       		.uleb128 0x5
 2477 0674 03       		.byte	0x3
 2478 0675 00000000 		.4byte	ts
 2479 0679 1F       		.uleb128 0x1f
 2480 067a 13000000 		.4byte	.LASF88
 2481 067e 05       		.byte	0x5
 2482 067f 11       		.byte	0x11
 2483 0680 A1000000 		.4byte	0xa1
 2484 0684 05       		.uleb128 0x5
 2485 0685 03       		.byte	0x3
 2486 0686 00000000 		.4byte	ts_enc
 2487 068a 1F       		.uleb128 0x1f
 2488 068b AB050000 		.4byte	.LASF89
 2489 068f 05       		.byte	0x5
 2490 0690 12       		.byte	0x12
 2491 0691 A1000000 		.4byte	0xa1
 2492 0695 05       		.uleb128 0x5
 2493 0696 03       		.byte	0x3
 2494 0697 00000000 		.4byte	ts_update
 2495 069b 1F       		.uleb128 0x1f
 2496 069c 3C050000 		.4byte	.LASF90
 2497 06a0 05       		.byte	0x5
 2498 06a1 13       		.byte	0x13
 2499 06a2 A1000000 		.4byte	0xa1
 2500 06a6 05       		.uleb128 0x5
 2501 06a7 03       		.byte	0x3
 2502 06a8 00000000 		.4byte	ts_speed
 2503 06ac 1F       		.uleb128 0x1f
 2504 06ad A0050000 		.4byte	.LASF91
 2505 06b1 05       		.byte	0x5
 2506 06b2 14       		.byte	0x14
 2507 06b3 A1000000 		.4byte	0xa1
 2508 06b7 05       		.uleb128 0x5
 2509 06b8 03       		.byte	0x3
 2510 06b9 00000000 		.4byte	ts_display
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 58


 2511 06bd 1F       		.uleb128 0x1f
 2512 06be 50050000 		.4byte	.LASF92
 2513 06c2 05       		.byte	0x5
 2514 06c3 16       		.byte	0x16
 2515 06c4 95000000 		.4byte	0x95
 2516 06c8 05       		.uleb128 0x5
 2517 06c9 03       		.byte	0x3
 2518 06ca 00000000 		.4byte	flag_ts_enc
 2519 06ce 1F       		.uleb128 0x1f
 2520 06cf 0F020000 		.4byte	.LASF93
 2521 06d3 05       		.byte	0x5
 2522 06d4 17       		.byte	0x17
 2523 06d5 95000000 		.4byte	0x95
 2524 06d9 05       		.uleb128 0x5
 2525 06da 03       		.byte	0x3
 2526 06db 00000000 		.4byte	flag_ts_update
 2527 06df 1F       		.uleb128 0x1f
 2528 06e0 52000000 		.4byte	.LASF94
 2529 06e4 05       		.byte	0x5
 2530 06e5 18       		.byte	0x18
 2531 06e6 95000000 		.4byte	0x95
 2532 06ea 05       		.uleb128 0x5
 2533 06eb 03       		.byte	0x3
 2534 06ec 00000000 		.4byte	flag_ts_speed
 2535 06f0 1F       		.uleb128 0x1f
 2536 06f1 F7020000 		.4byte	.LASF95
 2537 06f5 05       		.byte	0x5
 2538 06f6 19       		.byte	0x19
 2539 06f7 95000000 		.4byte	0x95
 2540 06fb 05       		.uleb128 0x5
 2541 06fc 03       		.byte	0x3
 2542 06fd 00000000 		.4byte	flag_ts_display
 2543 0701 1F       		.uleb128 0x1f
 2544 0702 07030000 		.4byte	.LASF96
 2545 0706 05       		.byte	0x5
 2546 0707 1C       		.byte	0x1c
 2547 0708 95000000 		.4byte	0x95
 2548 070c 05       		.uleb128 0x5
 2549 070d 03       		.byte	0x3
 2550 070e 00000000 		.4byte	flag_rx
 2551 0712 1F       		.uleb128 0x1f
 2552 0713 22000000 		.4byte	.LASF97
 2553 0717 05       		.byte	0x5
 2554 0718 1D       		.byte	0x1d
 2555 0719 95000000 		.4byte	0x95
 2556 071d 05       		.uleb128 0x5
 2557 071e 03       		.byte	0x3
 2558 071f 00000000 		.4byte	flag_packet
 2559 0723 1F       		.uleb128 0x1f
 2560 0724 BA030000 		.4byte	.LASF98
 2561 0728 05       		.byte	0x5
 2562 0729 1E       		.byte	0x1e
 2563 072a 95000000 		.4byte	0x95
 2564 072e 05       		.uleb128 0x5
 2565 072f 03       		.byte	0x3
 2566 0730 00000000 		.4byte	flag_KB_string
 2567 0734 1F       		.uleb128 0x1f
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 59


 2568 0735 2D050000 		.4byte	.LASF99
 2569 0739 05       		.byte	0x5
 2570 073a 20       		.byte	0x20
 2571 073b 95000000 		.4byte	0x95
 2572 073f 05       		.uleb128 0x5
 2573 0740 03       		.byte	0x3
 2574 0741 00000000 		.4byte	dataready_flag
 2575 0745 1F       		.uleb128 0x1f
 2576 0746 D3050000 		.4byte	.LASF100
 2577 074a 05       		.byte	0x5
 2578 074b 22       		.byte	0x22
 2579 074c 95000000 		.4byte	0x95
 2580 0750 05       		.uleb128 0x5
 2581 0751 03       		.byte	0x3
 2582 0752 00000000 		.4byte	flag_rf_transmission_active
 2583 0756 1F       		.uleb128 0x1f
 2584 0757 AD040000 		.4byte	.LASF101
 2585 075b 05       		.byte	0x5
 2586 075c 25       		.byte	0x25
 2587 075d 25050000 		.4byte	0x525
 2588 0761 05       		.uleb128 0x5
 2589 0762 03       		.byte	0x3
 2590 0763 00000000 		.4byte	displaystring
 2591 0767 1F       		.uleb128 0x1f
 2592 0768 F2020000 		.4byte	.LASF102
 2593 076c 05       		.byte	0x5
 2594 076d 26       		.byte	0x26
 2595 076e 25050000 		.4byte	0x525
 2596 0772 05       		.uleb128 0x5
 2597 0773 03       		.byte	0x3
 2598 0774 00000000 		.4byte	line
 2599 0778 1F       		.uleb128 0x1f
 2600 0779 9F030000 		.4byte	.LASF103
 2601 077d 05       		.byte	0x5
 2602 077e 26       		.byte	0x26
 2603 077f 25050000 		.4byte	0x525
 2604 0783 05       		.uleb128 0x5
 2605 0784 03       		.byte	0x3
 2606 0785 00000000 		.4byte	entry
 2607 0789 18       		.uleb128 0x18
 2608 078a 95000000 		.4byte	0x95
 2609 078e 99070000 		.4byte	0x799
 2610 0792 19       		.uleb128 0x19
 2611 0793 76000000 		.4byte	0x76
 2612 0797 3F       		.byte	0x3f
 2613 0798 00       		.byte	0
 2614 0799 1F       		.uleb128 0x1f
 2615 079a 9E000000 		.4byte	.LASF104
 2616 079e 05       		.byte	0x5
 2617 079f 27       		.byte	0x27
 2618 07a0 89070000 		.4byte	0x789
 2619 07a4 05       		.uleb128 0x5
 2620 07a5 03       		.byte	0x3
 2621 07a6 00000000 		.4byte	usbBuffer
 2622 07aa 1F       		.uleb128 0x1f
 2623 07ab 72000000 		.4byte	.LASF105
 2624 07af 05       		.byte	0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 60


 2625 07b0 3C       		.byte	0x3c
 2626 07b1 DF000000 		.4byte	0xdf
 2627 07b5 05       		.uleb128 0x5
 2628 07b6 03       		.byte	0x3
 2629 07b7 00000000 		.4byte	system_state
 2630 07bb 18       		.uleb128 0x18
 2631 07bc AD000000 		.4byte	0xad
 2632 07c0 CB070000 		.4byte	0x7cb
 2633 07c4 19       		.uleb128 0x19
 2634 07c5 76000000 		.4byte	0x76
 2635 07c9 05       		.byte	0x5
 2636 07ca 00       		.byte	0
 2637 07cb 1F       		.uleb128 0x1f
 2638 07cc 0C060000 		.4byte	.LASF106
 2639 07d0 01       		.byte	0x1
 2640 07d1 67       		.byte	0x67
 2641 07d2 BB070000 		.4byte	0x7bb
 2642 07d6 05       		.uleb128 0x5
 2643 07d7 03       		.byte	0x3
 2644 07d8 00000000 		.4byte	sensor_readings
 2645 07dc 1F       		.uleb128 0x1f
 2646 07dd 30040000 		.4byte	.LASF107
 2647 07e1 01       		.byte	0x1
 2648 07e2 68       		.byte	0x68
 2649 07e3 ED070000 		.4byte	0x7ed
 2650 07e7 05       		.uleb128 0x5
 2651 07e8 03       		.byte	0x3
 2652 07e9 00000000 		.4byte	adc_flag
 2653 07ed 1D       		.uleb128 0x1d
 2654 07ee 68000000 		.4byte	0x68
 2655 07f2 18       		.uleb128 0x18
 2656 07f3 68000000 		.4byte	0x68
 2657 07f7 02080000 		.4byte	0x802
 2658 07fb 19       		.uleb128 0x19
 2659 07fc 76000000 		.4byte	0x76
 2660 0800 05       		.byte	0x5
 2661 0801 00       		.byte	0
 2662 0802 1F       		.uleb128 0x1f
 2663 0803 0F030000 		.4byte	.LASF108
 2664 0807 01       		.byte	0x1
 2665 0808 69       		.byte	0x69
 2666 0809 F2070000 		.4byte	0x7f2
 2667 080d 05       		.uleb128 0x5
 2668 080e 03       		.byte	0x3
 2669 080f 00000000 		.4byte	adc_readings
 2670 0813 1F       		.uleb128 0x1f
 2671 0814 80040000 		.4byte	.LASF109
 2672 0818 01       		.byte	0x1
 2673 0819 6A       		.byte	0x6a
 2674 081a 68000000 		.4byte	0x68
 2675 081e 05       		.uleb128 0x5
 2676 081f 03       		.byte	0x3
 2677 0820 00000000 		.4byte	sample_count
 2678 0824 1F       		.uleb128 0x1f
 2679 0825 66050000 		.4byte	.LASF110
 2680 0829 01       		.byte	0x1
 2681 082a 6C       		.byte	0x6c
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 61


 2682 082b ED070000 		.4byte	0x7ed
 2683 082f 05       		.uleb128 0x5
 2684 0830 03       		.byte	0x3
 2685 0831 00000000 		.4byte	countM1
 2686 0835 1F       		.uleb128 0x1f
 2687 0836 6E050000 		.4byte	.LASF111
 2688 083a 01       		.byte	0x1
 2689 083b 6D       		.byte	0x6d
 2690 083c ED070000 		.4byte	0x7ed
 2691 0840 05       		.uleb128 0x5
 2692 0841 03       		.byte	0x3
 2693 0842 00000000 		.4byte	countM2
 2694 0846 1F       		.uleb128 0x1f
 2695 0847 C0010000 		.4byte	.LASF112
 2696 084b 01       		.byte	0x1
 2697 084c 6E       		.byte	0x6e
 2698 084d ED070000 		.4byte	0x7ed
 2699 0851 05       		.uleb128 0x5
 2700 0852 03       		.byte	0x3
 2701 0853 00000000 		.4byte	timer_flag
 2702 0857 00       		.byte	0
 2703              		.section	.debug_abbrev,"",%progbits
 2704              	.Ldebug_abbrev0:
 2705 0000 01       		.uleb128 0x1
 2706 0001 11       		.uleb128 0x11
 2707 0002 01       		.byte	0x1
 2708 0003 25       		.uleb128 0x25
 2709 0004 0E       		.uleb128 0xe
 2710 0005 13       		.uleb128 0x13
 2711 0006 0B       		.uleb128 0xb
 2712 0007 03       		.uleb128 0x3
 2713 0008 0E       		.uleb128 0xe
 2714 0009 1B       		.uleb128 0x1b
 2715 000a 0E       		.uleb128 0xe
 2716 000b 55       		.uleb128 0x55
 2717 000c 17       		.uleb128 0x17
 2718 000d 11       		.uleb128 0x11
 2719 000e 01       		.uleb128 0x1
 2720 000f 10       		.uleb128 0x10
 2721 0010 17       		.uleb128 0x17
 2722 0011 00       		.byte	0
 2723 0012 00       		.byte	0
 2724 0013 02       		.uleb128 0x2
 2725 0014 24       		.uleb128 0x24
 2726 0015 00       		.byte	0
 2727 0016 0B       		.uleb128 0xb
 2728 0017 0B       		.uleb128 0xb
 2729 0018 3E       		.uleb128 0x3e
 2730 0019 0B       		.uleb128 0xb
 2731 001a 03       		.uleb128 0x3
 2732 001b 0E       		.uleb128 0xe
 2733 001c 00       		.byte	0
 2734 001d 00       		.byte	0
 2735 001e 03       		.uleb128 0x3
 2736 001f 16       		.uleb128 0x16
 2737 0020 00       		.byte	0
 2738 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 62


 2739 0022 0E       		.uleb128 0xe
 2740 0023 3A       		.uleb128 0x3a
 2741 0024 0B       		.uleb128 0xb
 2742 0025 3B       		.uleb128 0x3b
 2743 0026 0B       		.uleb128 0xb
 2744 0027 49       		.uleb128 0x49
 2745 0028 13       		.uleb128 0x13
 2746 0029 00       		.byte	0
 2747 002a 00       		.byte	0
 2748 002b 04       		.uleb128 0x4
 2749 002c 24       		.uleb128 0x24
 2750 002d 00       		.byte	0
 2751 002e 0B       		.uleb128 0xb
 2752 002f 0B       		.uleb128 0xb
 2753 0030 3E       		.uleb128 0x3e
 2754 0031 0B       		.uleb128 0xb
 2755 0032 03       		.uleb128 0x3
 2756 0033 08       		.uleb128 0x8
 2757 0034 00       		.byte	0
 2758 0035 00       		.byte	0
 2759 0036 05       		.uleb128 0x5
 2760 0037 0F       		.uleb128 0xf
 2761 0038 00       		.byte	0
 2762 0039 0B       		.uleb128 0xb
 2763 003a 0B       		.uleb128 0xb
 2764 003b 49       		.uleb128 0x49
 2765 003c 13       		.uleb128 0x13
 2766 003d 00       		.byte	0
 2767 003e 00       		.byte	0
 2768 003f 06       		.uleb128 0x6
 2769 0040 16       		.uleb128 0x16
 2770 0041 00       		.byte	0
 2771 0042 03       		.uleb128 0x3
 2772 0043 0E       		.uleb128 0xe
 2773 0044 3A       		.uleb128 0x3a
 2774 0045 0B       		.uleb128 0xb
 2775 0046 3B       		.uleb128 0x3b
 2776 0047 05       		.uleb128 0x5
 2777 0048 49       		.uleb128 0x49
 2778 0049 13       		.uleb128 0x13
 2779 004a 00       		.byte	0
 2780 004b 00       		.byte	0
 2781 004c 07       		.uleb128 0x7
 2782 004d 13       		.uleb128 0x13
 2783 004e 01       		.byte	0x1
 2784 004f 03       		.uleb128 0x3
 2785 0050 0E       		.uleb128 0xe
 2786 0051 0B       		.uleb128 0xb
 2787 0052 0B       		.uleb128 0xb
 2788 0053 3A       		.uleb128 0x3a
 2789 0054 0B       		.uleb128 0xb
 2790 0055 3B       		.uleb128 0x3b
 2791 0056 0B       		.uleb128 0xb
 2792 0057 01       		.uleb128 0x1
 2793 0058 13       		.uleb128 0x13
 2794 0059 00       		.byte	0
 2795 005a 00       		.byte	0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 63


 2796 005b 08       		.uleb128 0x8
 2797 005c 0D       		.uleb128 0xd
 2798 005d 00       		.byte	0
 2799 005e 03       		.uleb128 0x3
 2800 005f 0E       		.uleb128 0xe
 2801 0060 3A       		.uleb128 0x3a
 2802 0061 0B       		.uleb128 0xb
 2803 0062 3B       		.uleb128 0x3b
 2804 0063 0B       		.uleb128 0xb
 2805 0064 49       		.uleb128 0x49
 2806 0065 13       		.uleb128 0x13
 2807 0066 38       		.uleb128 0x38
 2808 0067 0B       		.uleb128 0xb
 2809 0068 00       		.byte	0
 2810 0069 00       		.byte	0
 2811 006a 09       		.uleb128 0x9
 2812 006b 04       		.uleb128 0x4
 2813 006c 01       		.byte	0x1
 2814 006d 03       		.uleb128 0x3
 2815 006e 0E       		.uleb128 0xe
 2816 006f 0B       		.uleb128 0xb
 2817 0070 0B       		.uleb128 0xb
 2818 0071 3A       		.uleb128 0x3a
 2819 0072 0B       		.uleb128 0xb
 2820 0073 3B       		.uleb128 0x3b
 2821 0074 0B       		.uleb128 0xb
 2822 0075 01       		.uleb128 0x1
 2823 0076 13       		.uleb128 0x13
 2824 0077 00       		.byte	0
 2825 0078 00       		.byte	0
 2826 0079 0A       		.uleb128 0xa
 2827 007a 28       		.uleb128 0x28
 2828 007b 00       		.byte	0
 2829 007c 03       		.uleb128 0x3
 2830 007d 0E       		.uleb128 0xe
 2831 007e 1C       		.uleb128 0x1c
 2832 007f 0D       		.uleb128 0xd
 2833 0080 00       		.byte	0
 2834 0081 00       		.byte	0
 2835 0082 0B       		.uleb128 0xb
 2836 0083 2E       		.uleb128 0x2e
 2837 0084 00       		.byte	0
 2838 0085 3F       		.uleb128 0x3f
 2839 0086 19       		.uleb128 0x19
 2840 0087 03       		.uleb128 0x3
 2841 0088 0E       		.uleb128 0xe
 2842 0089 3A       		.uleb128 0x3a
 2843 008a 0B       		.uleb128 0xb
 2844 008b 3B       		.uleb128 0x3b
 2845 008c 0B       		.uleb128 0xb
 2846 008d 27       		.uleb128 0x27
 2847 008e 19       		.uleb128 0x19
 2848 008f 11       		.uleb128 0x11
 2849 0090 01       		.uleb128 0x1
 2850 0091 12       		.uleb128 0x12
 2851 0092 06       		.uleb128 0x6
 2852 0093 40       		.uleb128 0x40
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 64


 2853 0094 18       		.uleb128 0x18
 2854 0095 9642     		.uleb128 0x2116
 2855 0097 19       		.uleb128 0x19
 2856 0098 00       		.byte	0
 2857 0099 00       		.byte	0
 2858 009a 0C       		.uleb128 0xc
 2859 009b 2E       		.uleb128 0x2e
 2860 009c 00       		.byte	0
 2861 009d 3F       		.uleb128 0x3f
 2862 009e 19       		.uleb128 0x19
 2863 009f 03       		.uleb128 0x3
 2864 00a0 0E       		.uleb128 0xe
 2865 00a1 3A       		.uleb128 0x3a
 2866 00a2 0B       		.uleb128 0xb
 2867 00a3 3B       		.uleb128 0x3b
 2868 00a4 0B       		.uleb128 0xb
 2869 00a5 27       		.uleb128 0x27
 2870 00a6 19       		.uleb128 0x19
 2871 00a7 11       		.uleb128 0x11
 2872 00a8 01       		.uleb128 0x1
 2873 00a9 12       		.uleb128 0x12
 2874 00aa 06       		.uleb128 0x6
 2875 00ab 40       		.uleb128 0x40
 2876 00ac 18       		.uleb128 0x18
 2877 00ad 9742     		.uleb128 0x2117
 2878 00af 19       		.uleb128 0x19
 2879 00b0 00       		.byte	0
 2880 00b1 00       		.byte	0
 2881 00b2 0D       		.uleb128 0xd
 2882 00b3 2E       		.uleb128 0x2e
 2883 00b4 01       		.byte	0x1
 2884 00b5 3F       		.uleb128 0x3f
 2885 00b6 19       		.uleb128 0x19
 2886 00b7 03       		.uleb128 0x3
 2887 00b8 0E       		.uleb128 0xe
 2888 00b9 3A       		.uleb128 0x3a
 2889 00ba 0B       		.uleb128 0xb
 2890 00bb 3B       		.uleb128 0x3b
 2891 00bc 0B       		.uleb128 0xb
 2892 00bd 49       		.uleb128 0x49
 2893 00be 13       		.uleb128 0x13
 2894 00bf 11       		.uleb128 0x11
 2895 00c0 01       		.uleb128 0x1
 2896 00c1 12       		.uleb128 0x12
 2897 00c2 06       		.uleb128 0x6
 2898 00c3 40       		.uleb128 0x40
 2899 00c4 18       		.uleb128 0x18
 2900 00c5 9642     		.uleb128 0x2116
 2901 00c7 19       		.uleb128 0x19
 2902 00c8 01       		.uleb128 0x1
 2903 00c9 13       		.uleb128 0x13
 2904 00ca 00       		.byte	0
 2905 00cb 00       		.byte	0
 2906 00cc 0E       		.uleb128 0xe
 2907 00cd 34       		.uleb128 0x34
 2908 00ce 00       		.byte	0
 2909 00cf 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 65


 2910 00d0 0E       		.uleb128 0xe
 2911 00d1 3A       		.uleb128 0x3a
 2912 00d2 0B       		.uleb128 0xb
 2913 00d3 3B       		.uleb128 0x3b
 2914 00d4 0B       		.uleb128 0xb
 2915 00d5 49       		.uleb128 0x49
 2916 00d6 13       		.uleb128 0x13
 2917 00d7 02       		.uleb128 0x2
 2918 00d8 18       		.uleb128 0x18
 2919 00d9 00       		.byte	0
 2920 00da 00       		.byte	0
 2921 00db 0F       		.uleb128 0xf
 2922 00dc 34       		.uleb128 0x34
 2923 00dd 00       		.byte	0
 2924 00de 03       		.uleb128 0x3
 2925 00df 0E       		.uleb128 0xe
 2926 00e0 3A       		.uleb128 0x3a
 2927 00e1 0B       		.uleb128 0xb
 2928 00e2 3B       		.uleb128 0x3b
 2929 00e3 0B       		.uleb128 0xb
 2930 00e4 49       		.uleb128 0x49
 2931 00e5 13       		.uleb128 0x13
 2932 00e6 00       		.byte	0
 2933 00e7 00       		.byte	0
 2934 00e8 10       		.uleb128 0x10
 2935 00e9 2E       		.uleb128 0x2e
 2936 00ea 01       		.byte	0x1
 2937 00eb 3F       		.uleb128 0x3f
 2938 00ec 19       		.uleb128 0x19
 2939 00ed 03       		.uleb128 0x3
 2940 00ee 0E       		.uleb128 0xe
 2941 00ef 3A       		.uleb128 0x3a
 2942 00f0 0B       		.uleb128 0xb
 2943 00f1 3B       		.uleb128 0x3b
 2944 00f2 05       		.uleb128 0x5
 2945 00f3 27       		.uleb128 0x27
 2946 00f4 19       		.uleb128 0x19
 2947 00f5 11       		.uleb128 0x11
 2948 00f6 01       		.uleb128 0x1
 2949 00f7 12       		.uleb128 0x12
 2950 00f8 06       		.uleb128 0x6
 2951 00f9 40       		.uleb128 0x40
 2952 00fa 18       		.uleb128 0x18
 2953 00fb 9642     		.uleb128 0x2116
 2954 00fd 19       		.uleb128 0x19
 2955 00fe 01       		.uleb128 0x1
 2956 00ff 13       		.uleb128 0x13
 2957 0100 00       		.byte	0
 2958 0101 00       		.byte	0
 2959 0102 11       		.uleb128 0x11
 2960 0103 05       		.uleb128 0x5
 2961 0104 00       		.byte	0
 2962 0105 03       		.uleb128 0x3
 2963 0106 0E       		.uleb128 0xe
 2964 0107 3A       		.uleb128 0x3a
 2965 0108 0B       		.uleb128 0xb
 2966 0109 3B       		.uleb128 0x3b
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 66


 2967 010a 05       		.uleb128 0x5
 2968 010b 49       		.uleb128 0x49
 2969 010c 13       		.uleb128 0x13
 2970 010d 02       		.uleb128 0x2
 2971 010e 18       		.uleb128 0x18
 2972 010f 00       		.byte	0
 2973 0110 00       		.byte	0
 2974 0111 12       		.uleb128 0x12
 2975 0112 34       		.uleb128 0x34
 2976 0113 00       		.byte	0
 2977 0114 03       		.uleb128 0x3
 2978 0115 0E       		.uleb128 0xe
 2979 0116 3A       		.uleb128 0x3a
 2980 0117 0B       		.uleb128 0xb
 2981 0118 3B       		.uleb128 0x3b
 2982 0119 05       		.uleb128 0x5
 2983 011a 49       		.uleb128 0x49
 2984 011b 13       		.uleb128 0x13
 2985 011c 02       		.uleb128 0x2
 2986 011d 18       		.uleb128 0x18
 2987 011e 00       		.byte	0
 2988 011f 00       		.byte	0
 2989 0120 13       		.uleb128 0x13
 2990 0121 2E       		.uleb128 0x2e
 2991 0122 01       		.byte	0x1
 2992 0123 3F       		.uleb128 0x3f
 2993 0124 19       		.uleb128 0x19
 2994 0125 03       		.uleb128 0x3
 2995 0126 0E       		.uleb128 0xe
 2996 0127 3A       		.uleb128 0x3a
 2997 0128 0B       		.uleb128 0xb
 2998 0129 3B       		.uleb128 0x3b
 2999 012a 05       		.uleb128 0x5
 3000 012b 27       		.uleb128 0x27
 3001 012c 19       		.uleb128 0x19
 3002 012d 49       		.uleb128 0x49
 3003 012e 13       		.uleb128 0x13
 3004 012f 11       		.uleb128 0x11
 3005 0130 01       		.uleb128 0x1
 3006 0131 12       		.uleb128 0x12
 3007 0132 06       		.uleb128 0x6
 3008 0133 40       		.uleb128 0x40
 3009 0134 18       		.uleb128 0x18
 3010 0135 9642     		.uleb128 0x2116
 3011 0137 19       		.uleb128 0x19
 3012 0138 01       		.uleb128 0x1
 3013 0139 13       		.uleb128 0x13
 3014 013a 00       		.byte	0
 3015 013b 00       		.byte	0
 3016 013c 14       		.uleb128 0x14
 3017 013d 05       		.uleb128 0x5
 3018 013e 00       		.byte	0
 3019 013f 03       		.uleb128 0x3
 3020 0140 08       		.uleb128 0x8
 3021 0141 3A       		.uleb128 0x3a
 3022 0142 0B       		.uleb128 0xb
 3023 0143 3B       		.uleb128 0x3b
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 67


 3024 0144 05       		.uleb128 0x5
 3025 0145 49       		.uleb128 0x49
 3026 0146 13       		.uleb128 0x13
 3027 0147 02       		.uleb128 0x2
 3028 0148 18       		.uleb128 0x18
 3029 0149 00       		.byte	0
 3030 014a 00       		.byte	0
 3031 014b 15       		.uleb128 0x15
 3032 014c 2E       		.uleb128 0x2e
 3033 014d 01       		.byte	0x1
 3034 014e 3F       		.uleb128 0x3f
 3035 014f 19       		.uleb128 0x19
 3036 0150 03       		.uleb128 0x3
 3037 0151 0E       		.uleb128 0xe
 3038 0152 3A       		.uleb128 0x3a
 3039 0153 0B       		.uleb128 0xb
 3040 0154 3B       		.uleb128 0x3b
 3041 0155 05       		.uleb128 0x5
 3042 0156 11       		.uleb128 0x11
 3043 0157 01       		.uleb128 0x1
 3044 0158 12       		.uleb128 0x12
 3045 0159 06       		.uleb128 0x6
 3046 015a 40       		.uleb128 0x40
 3047 015b 18       		.uleb128 0x18
 3048 015c 9642     		.uleb128 0x2116
 3049 015e 19       		.uleb128 0x19
 3050 015f 01       		.uleb128 0x1
 3051 0160 13       		.uleb128 0x13
 3052 0161 00       		.byte	0
 3053 0162 00       		.byte	0
 3054 0163 16       		.uleb128 0x16
 3055 0164 34       		.uleb128 0x34
 3056 0165 00       		.byte	0
 3057 0166 03       		.uleb128 0x3
 3058 0167 08       		.uleb128 0x8
 3059 0168 3A       		.uleb128 0x3a
 3060 0169 0B       		.uleb128 0xb
 3061 016a 3B       		.uleb128 0x3b
 3062 016b 05       		.uleb128 0x5
 3063 016c 49       		.uleb128 0x49
 3064 016d 13       		.uleb128 0x13
 3065 016e 02       		.uleb128 0x2
 3066 016f 18       		.uleb128 0x18
 3067 0170 00       		.byte	0
 3068 0171 00       		.byte	0
 3069 0172 17       		.uleb128 0x17
 3070 0173 0B       		.uleb128 0xb
 3071 0174 01       		.byte	0x1
 3072 0175 11       		.uleb128 0x11
 3073 0176 01       		.uleb128 0x1
 3074 0177 12       		.uleb128 0x12
 3075 0178 06       		.uleb128 0x6
 3076 0179 00       		.byte	0
 3077 017a 00       		.byte	0
 3078 017b 18       		.uleb128 0x18
 3079 017c 01       		.uleb128 0x1
 3080 017d 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 68


 3081 017e 49       		.uleb128 0x49
 3082 017f 13       		.uleb128 0x13
 3083 0180 01       		.uleb128 0x1
 3084 0181 13       		.uleb128 0x13
 3085 0182 00       		.byte	0
 3086 0183 00       		.byte	0
 3087 0184 19       		.uleb128 0x19
 3088 0185 21       		.uleb128 0x21
 3089 0186 00       		.byte	0
 3090 0187 49       		.uleb128 0x49
 3091 0188 13       		.uleb128 0x13
 3092 0189 2F       		.uleb128 0x2f
 3093 018a 0B       		.uleb128 0xb
 3094 018b 00       		.byte	0
 3095 018c 00       		.byte	0
 3096 018d 1A       		.uleb128 0x1a
 3097 018e 2E       		.uleb128 0x2e
 3098 018f 00       		.byte	0
 3099 0190 3F       		.uleb128 0x3f
 3100 0191 19       		.uleb128 0x19
 3101 0192 03       		.uleb128 0x3
 3102 0193 0E       		.uleb128 0xe
 3103 0194 3A       		.uleb128 0x3a
 3104 0195 0B       		.uleb128 0xb
 3105 0196 3B       		.uleb128 0x3b
 3106 0197 05       		.uleb128 0x5
 3107 0198 11       		.uleb128 0x11
 3108 0199 01       		.uleb128 0x1
 3109 019a 12       		.uleb128 0x12
 3110 019b 06       		.uleb128 0x6
 3111 019c 40       		.uleb128 0x40
 3112 019d 18       		.uleb128 0x18
 3113 019e 9642     		.uleb128 0x2116
 3114 01a0 19       		.uleb128 0x19
 3115 01a1 00       		.byte	0
 3116 01a2 00       		.byte	0
 3117 01a3 1B       		.uleb128 0x1b
 3118 01a4 2E       		.uleb128 0x2e
 3119 01a5 01       		.byte	0x1
 3120 01a6 3F       		.uleb128 0x3f
 3121 01a7 19       		.uleb128 0x19
 3122 01a8 03       		.uleb128 0x3
 3123 01a9 0E       		.uleb128 0xe
 3124 01aa 3A       		.uleb128 0x3a
 3125 01ab 0B       		.uleb128 0xb
 3126 01ac 3B       		.uleb128 0x3b
 3127 01ad 05       		.uleb128 0x5
 3128 01ae 27       		.uleb128 0x27
 3129 01af 19       		.uleb128 0x19
 3130 01b0 11       		.uleb128 0x11
 3131 01b1 01       		.uleb128 0x1
 3132 01b2 12       		.uleb128 0x12
 3133 01b3 06       		.uleb128 0x6
 3134 01b4 40       		.uleb128 0x40
 3135 01b5 18       		.uleb128 0x18
 3136 01b6 9742     		.uleb128 0x2117
 3137 01b8 19       		.uleb128 0x19
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 69


 3138 01b9 01       		.uleb128 0x1
 3139 01ba 13       		.uleb128 0x13
 3140 01bb 00       		.byte	0
 3141 01bc 00       		.byte	0
 3142 01bd 1C       		.uleb128 0x1c
 3143 01be 34       		.uleb128 0x34
 3144 01bf 00       		.byte	0
 3145 01c0 03       		.uleb128 0x3
 3146 01c1 0E       		.uleb128 0xe
 3147 01c2 3A       		.uleb128 0x3a
 3148 01c3 0B       		.uleb128 0xb
 3149 01c4 3B       		.uleb128 0x3b
 3150 01c5 05       		.uleb128 0x5
 3151 01c6 49       		.uleb128 0x49
 3152 01c7 13       		.uleb128 0x13
 3153 01c8 3F       		.uleb128 0x3f
 3154 01c9 19       		.uleb128 0x19
 3155 01ca 3C       		.uleb128 0x3c
 3156 01cb 19       		.uleb128 0x19
 3157 01cc 00       		.byte	0
 3158 01cd 00       		.byte	0
 3159 01ce 1D       		.uleb128 0x1d
 3160 01cf 35       		.uleb128 0x35
 3161 01d0 00       		.byte	0
 3162 01d1 49       		.uleb128 0x49
 3163 01d2 13       		.uleb128 0x13
 3164 01d3 00       		.byte	0
 3165 01d4 00       		.byte	0
 3166 01d5 1E       		.uleb128 0x1e
 3167 01d6 34       		.uleb128 0x34
 3168 01d7 00       		.byte	0
 3169 01d8 03       		.uleb128 0x3
 3170 01d9 08       		.uleb128 0x8
 3171 01da 3A       		.uleb128 0x3a
 3172 01db 0B       		.uleb128 0xb
 3173 01dc 3B       		.uleb128 0x3b
 3174 01dd 0B       		.uleb128 0xb
 3175 01de 49       		.uleb128 0x49
 3176 01df 13       		.uleb128 0x13
 3177 01e0 3F       		.uleb128 0x3f
 3178 01e1 19       		.uleb128 0x19
 3179 01e2 02       		.uleb128 0x2
 3180 01e3 18       		.uleb128 0x18
 3181 01e4 00       		.byte	0
 3182 01e5 00       		.byte	0
 3183 01e6 1F       		.uleb128 0x1f
 3184 01e7 34       		.uleb128 0x34
 3185 01e8 00       		.byte	0
 3186 01e9 03       		.uleb128 0x3
 3187 01ea 0E       		.uleb128 0xe
 3188 01eb 3A       		.uleb128 0x3a
 3189 01ec 0B       		.uleb128 0xb
 3190 01ed 3B       		.uleb128 0x3b
 3191 01ee 0B       		.uleb128 0xb
 3192 01ef 49       		.uleb128 0x49
 3193 01f0 13       		.uleb128 0x13
 3194 01f1 3F       		.uleb128 0x3f
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 70


 3195 01f2 19       		.uleb128 0x19
 3196 01f3 02       		.uleb128 0x2
 3197 01f4 18       		.uleb128 0x18
 3198 01f5 00       		.byte	0
 3199 01f6 00       		.byte	0
 3200 01f7 00       		.byte	0
 3201              		.section	.debug_aranges,"",%progbits
 3202 0000 9C000000 		.4byte	0x9c
 3203 0004 0200     		.2byte	0x2
 3204 0006 00000000 		.4byte	.Ldebug_info0
 3205 000a 04       		.byte	0x4
 3206 000b 00       		.byte	0
 3207 000c 0000     		.2byte	0
 3208 000e 0000     		.2byte	0
 3209 0010 00000000 		.4byte	.LFB63
 3210 0014 30000000 		.4byte	.LFE63-.LFB63
 3211 0018 00000000 		.4byte	.LFB64
 3212 001c 18000000 		.4byte	.LFE64-.LFB64
 3213 0020 00000000 		.4byte	.LFB65
 3214 0024 A0000000 		.4byte	.LFE65-.LFB65
 3215 0028 00000000 		.4byte	.LFB66
 3216 002c 78010000 		.4byte	.LFE66-.LFB66
 3217 0030 00000000 		.4byte	.LFB67
 3218 0034 CC000000 		.4byte	.LFE67-.LFB67
 3219 0038 00000000 		.4byte	.LFB68
 3220 003c 8C000000 		.4byte	.LFE68-.LFB68
 3221 0040 00000000 		.4byte	.LFB69
 3222 0044 24000000 		.4byte	.LFE69-.LFB69
 3223 0048 00000000 		.4byte	.LFB70
 3224 004c B4000000 		.4byte	.LFE70-.LFB70
 3225 0050 00000000 		.4byte	.LFB71
 3226 0054 2A000000 		.4byte	.LFE71-.LFB71
 3227 0058 00000000 		.4byte	.LFB72
 3228 005c 2A000000 		.4byte	.LFE72-.LFB72
 3229 0060 00000000 		.4byte	.LFB73
 3230 0064 52000000 		.4byte	.LFE73-.LFB73
 3231 0068 00000000 		.4byte	.LFB74
 3232 006c 2C000000 		.4byte	.LFE74-.LFB74
 3233 0070 00000000 		.4byte	.LFB75
 3234 0074 40000000 		.4byte	.LFE75-.LFB75
 3235 0078 00000000 		.4byte	.LFB76
 3236 007c 40000000 		.4byte	.LFE76-.LFB76
 3237 0080 00000000 		.4byte	.LFB77
 3238 0084 E4000000 		.4byte	.LFE77-.LFB77
 3239 0088 00000000 		.4byte	.LFB78
 3240 008c E4000000 		.4byte	.LFE78-.LFB78
 3241 0090 00000000 		.4byte	.LFB79
 3242 0094 14000000 		.4byte	.LFE79-.LFB79
 3243 0098 00000000 		.4byte	0
 3244 009c 00000000 		.4byte	0
 3245              		.section	.debug_ranges,"",%progbits
 3246              	.Ldebug_ranges0:
 3247 0000 00000000 		.4byte	.LFB63
 3248 0004 30000000 		.4byte	.LFE63
 3249 0008 00000000 		.4byte	.LFB64
 3250 000c 18000000 		.4byte	.LFE64
 3251 0010 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 71


 3252 0014 A0000000 		.4byte	.LFE65
 3253 0018 00000000 		.4byte	.LFB66
 3254 001c 78010000 		.4byte	.LFE66
 3255 0020 00000000 		.4byte	.LFB67
 3256 0024 CC000000 		.4byte	.LFE67
 3257 0028 00000000 		.4byte	.LFB68
 3258 002c 8C000000 		.4byte	.LFE68
 3259 0030 00000000 		.4byte	.LFB69
 3260 0034 24000000 		.4byte	.LFE69
 3261 0038 00000000 		.4byte	.LFB70
 3262 003c B4000000 		.4byte	.LFE70
 3263 0040 00000000 		.4byte	.LFB71
 3264 0044 2A000000 		.4byte	.LFE71
 3265 0048 00000000 		.4byte	.LFB72
 3266 004c 2A000000 		.4byte	.LFE72
 3267 0050 00000000 		.4byte	.LFB73
 3268 0054 52000000 		.4byte	.LFE73
 3269 0058 00000000 		.4byte	.LFB74
 3270 005c 2C000000 		.4byte	.LFE74
 3271 0060 00000000 		.4byte	.LFB75
 3272 0064 40000000 		.4byte	.LFE75
 3273 0068 00000000 		.4byte	.LFB76
 3274 006c 40000000 		.4byte	.LFE76
 3275 0070 00000000 		.4byte	.LFB77
 3276 0074 E4000000 		.4byte	.LFE77
 3277 0078 00000000 		.4byte	.LFB78
 3278 007c E4000000 		.4byte	.LFE78
 3279 0080 00000000 		.4byte	.LFB79
 3280 0084 14000000 		.4byte	.LFE79
 3281 0088 00000000 		.4byte	0
 3282 008c 00000000 		.4byte	0
 3283              		.section	.debug_line,"",%progbits
 3284              	.Ldebug_line0:
 3285 0000 94030000 		.section	.debug_str,"MS",%progbits,1
 3285      02005501 
 3285      00000201 
 3285      FB0E0D00 
 3285      01010101 
 3286              	.LASF78:
 3287 0000 636F7272 		.ascii	"correction\000"
 3287      65637469 
 3287      6F6E00
 3288              	.LASF48:
 3289 000b 4144435F 		.ascii	"ADC_ISR\000"
 3289      49535200 
 3290              	.LASF88:
 3291 0013 74735F65 		.ascii	"ts_enc\000"
 3291      6E6300
 3292              	.LASF60:
 3293 001a 6D325F64 		.ascii	"m2_dist\000"
 3293      69737400 
 3294              	.LASF97:
 3295 0022 666C6167 		.ascii	"flag_packet\000"
 3295      5F706163 
 3295      6B657400 
 3296              	.LASF40:
 3297 002e 4D454449 		.ascii	"MEDIUM_RIGHT\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 72


 3297      554D5F52 
 3297      49474854 
 3297      00
 3298              	.LASF114:
 3299 003b 2E5C6D61 		.ascii	".\\main.c\000"
 3299      696E2E63 
 3299      00
 3300              	.LASF37:
 3301 0044 434F5252 		.ascii	"CORRECT\000"
 3301      45435400 
 3302              	.LASF117:
 3303 004c 73746174 		.ascii	"state\000"
 3303      6500
 3304              	.LASF94:
 3305 0052 666C6167 		.ascii	"flag_ts_speed\000"
 3305      5F74735F 
 3305      73706565 
 3305      6400
 3306              	.LASF33:
 3307 0060 67325F78 		.ascii	"g2_xpos\000"
 3307      706F7300 
 3308              	.LASF2:
 3309 0068 73686F72 		.ascii	"short int\000"
 3309      7420696E 
 3309      7400
 3310              	.LASF105:
 3311 0072 73797374 		.ascii	"system_state\000"
 3311      656D5F73 
 3311      74617465 
 3311      00
 3312              	.LASF9:
 3313 007f 73697A65 		.ascii	"sizetype\000"
 3313      74797065 
 3313      00
 3314              	.LASF71:
 3315 0088 6368616E 		.ascii	"changeRightWheelSpeed\000"
 3315      67655269 
 3315      67687457 
 3315      6865656C 
 3315      53706565 
 3316              	.LASF104:
 3317 009e 75736242 		.ascii	"usbBuffer\000"
 3317      75666665 
 3317      7200
 3318              	.LASF38:
 3319 00a8 534C4947 		.ascii	"SLIGHTLY_RIGHT\000"
 3319      48544C59 
 3319      5F524947 
 3319      485400
 3320              	.LASF55:
 3321 00b7 6D61696E 		.ascii	"main\000"
 3321      00
 3322              	.LASF76:
 3323 00bc 69734C65 		.ascii	"isLeftWheel\000"
 3323      66745768 
 3323      65656C00 
 3324              	.LASF115:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 73


 3325 00c8 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Desktop\\Flik\\CS"
 3325      6C65732E 
 3325      6175636B 
 3325      6C616E64 
 3325      2E61632E 
 3326 00f5 3330315F 		.ascii	"301_Class.cyprj.Archive01-20190825T234813Z-001\\CS3"
 3326      436C6173 
 3326      732E6379 
 3326      70726A2E 
 3326      41726368 
 3327 0127 30315F43 		.ascii	"01_Class.cyprj.Archive01\\CS301_Class.cydsn\000"
 3327      6C617373 
 3327      2E637970 
 3327      726A2E41 
 3327      72636869 
 3328              	.LASF63:
 3329 0152 64697374 		.ascii	"distance_to_turn\000"
 3329      616E6365 
 3329      5F746F5F 
 3329      7475726E 
 3329      00
 3330              	.LASF87:
 3331 0163 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3331      52784275 
 3331      66666572 
 3331      00
 3332              	.LASF14:
 3333 0170 75696E74 		.ascii	"uint16\000"
 3333      313600
 3334              	.LASF21:
 3335 0177 696E6465 		.ascii	"index\000"
 3335      7800
 3336              	.LASF16:
 3337 017d 696E7431 		.ascii	"int16\000"
 3337      3600
 3338              	.LASF13:
 3339 0183 75696E74 		.ascii	"uint8\000"
 3339      3800
 3340              	.LASF32:
 3341 0189 67315F64 		.ascii	"g1_direction\000"
 3341      69726563 
 3341      74696F6E 
 3341      00
 3342              	.LASF50:
 3343 0196 70726576 		.ascii	"prevCountM2\000"
 3343      436F756E 
 3343      744D3200 
 3344              	.LASF72:
 3345 01a2 636F7272 		.ascii	"correctSpeed\000"
 3345      65637453 
 3345      70656564 
 3345      00
 3346              	.LASF66:
 3347 01af 67657456 		.ascii	"getValForChannel\000"
 3347      616C466F 
 3347      72436861 
 3347      6E6E656C 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 74


 3347      00
 3348              	.LASF112:
 3349 01c0 74696D65 		.ascii	"timer_flag\000"
 3349      725F666C 
 3349      616700
 3350              	.LASF56:
 3351 01cb 676F5374 		.ascii	"goStraight\000"
 3351      72616967 
 3351      687400
 3352              	.LASF18:
 3353 01d6 666C6F61 		.ascii	"float\000"
 3353      7400
 3354              	.LASF6:
 3355 01dc 6C6F6E67 		.ascii	"long long int\000"
 3355      206C6F6E 
 3355      6720696E 
 3355      7400
 3356              	.LASF86:
 3357 01ea 75736250 		.ascii	"usbPutString\000"
 3357      75745374 
 3357      72696E67 
 3357      00
 3358              	.LASF15:
 3359 01f7 696E7438 		.ascii	"int8\000"
 3359      00
 3360              	.LASF118:
 3361 01fc 75706461 		.ascii	"updateSensorValues\000"
 3361      74655365 
 3361      6E736F72 
 3361      56616C75 
 3361      657300
 3362              	.LASF93:
 3363 020f 666C6167 		.ascii	"flag_ts_update\000"
 3363      5F74735F 
 3363      75706461 
 3363      746500
 3364              	.LASF34:
 3365 021e 67325F79 		.ascii	"g2_ypos\000"
 3365      706F7300 
 3366              	.LASF28:
 3367 0226 67305F64 		.ascii	"g0_direction\000"
 3367      69726563 
 3367      74696F6E 
 3367      00
 3368              	.LASF81:
 3369 0233 72696768 		.ascii	"rightIsForward\000"
 3369      74497346 
 3369      6F727761 
 3369      726400
 3370              	.LASF45:
 3371 0242 50415353 		.ascii	"PASS\000"
 3371      00
 3372              	.LASF113:
 3373 0247 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3373      4320342E 
 3373      392E3320 
 3373      32303135 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 75


 3373      30333033 
 3374 027a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3374      20726576 
 3374      6973696F 
 3374      6E203232 
 3374      31323230 
 3375 02ad 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3375      66756E63 
 3375      74696F6E 
 3375      2D736563 
 3375      74696F6E 
 3376              	.LASF42:
 3377 02d5 5455524E 		.ascii	"TURN_RIGHT\000"
 3377      5F524947 
 3377      485400
 3378              	.LASF24:
 3379 02e0 726F626F 		.ascii	"robot_orientation\000"
 3379      745F6F72 
 3379      69656E74 
 3379      6174696F 
 3379      6E00
 3380              	.LASF102:
 3381 02f2 6C696E65 		.ascii	"line\000"
 3381      00
 3382              	.LASF95:
 3383 02f7 666C6167 		.ascii	"flag_ts_display\000"
 3383      5F74735F 
 3383      64697370 
 3383      6C617900 
 3384              	.LASF96:
 3385 0307 666C6167 		.ascii	"flag_rx\000"
 3385      5F727800 
 3386              	.LASF108:
 3387 030f 6164635F 		.ascii	"adc_readings\000"
 3387      72656164 
 3387      696E6773 
 3387      00
 3388              	.LASF30:
 3389 031c 67315F79 		.ascii	"g1_ypos\000"
 3389      706F7300 
 3390              	.LASF49:
 3391 0324 70726576 		.ascii	"prevCountM1\000"
 3391      436F756E 
 3391      744D3100 
 3392              	.LASF62:
 3393 0330 64656772 		.ascii	"degrees\000"
 3393      65657300 
 3394              	.LASF1:
 3395 0338 756E7369 		.ascii	"unsigned char\000"
 3395      676E6564 
 3395      20636861 
 3395      7200
 3396              	.LASF43:
 3397 0346 5455524E 		.ascii	"TURN_LEFT\000"
 3397      5F4C4546 
 3397      5400
 3398              	.LASF27:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 76


 3399 0350 67305F73 		.ascii	"g0_speed\000"
 3399      70656564 
 3399      00
 3400              	.LASF82:
 3401 0359 7475726E 		.ascii	"turnLeft\000"
 3401      4C656674 
 3401      00
 3402              	.LASF47:
 3403 0362 454E434F 		.ascii	"ENCODER_ISR\000"
 3403      4445525F 
 3403      49535200 
 3404              	.LASF0:
 3405 036e 7369676E 		.ascii	"signed char\000"
 3405      65642063 
 3405      68617200 
 3406              	.LASF75:
 3407 037a 64657369 		.ascii	"desired_count\000"
 3407      7265645F 
 3407      636F756E 
 3407      7400
 3408              	.LASF7:
 3409 0388 6C6F6E67 		.ascii	"long long unsigned int\000"
 3409      206C6F6E 
 3409      6720756E 
 3409      7369676E 
 3409      65642069 
 3410              	.LASF103:
 3411 039f 656E7472 		.ascii	"entry\000"
 3411      7900
 3412              	.LASF8:
 3413 03a5 756E7369 		.ascii	"unsigned int\000"
 3413      676E6564 
 3413      20696E74 
 3413      00
 3414              	.LASF59:
 3415 03b2 6D315F64 		.ascii	"m1_dist\000"
 3415      69737400 
 3416              	.LASF98:
 3417 03ba 666C6167 		.ascii	"flag_KB_string\000"
 3417      5F4B425F 
 3417      73747269 
 3417      6E6700
 3418              	.LASF61:
 3419 03c9 7475726E 		.ascii	"turnForDegrees\000"
 3419      466F7244 
 3419      65677265 
 3419      657300
 3420              	.LASF5:
 3421 03d8 6C6F6E67 		.ascii	"long unsigned int\000"
 3421      20756E73 
 3421      69676E65 
 3421      6420696E 
 3421      7400
 3422              	.LASF73:
 3423 03ea 70726576 		.ascii	"prevCount\000"
 3423      436F756E 
 3423      7400
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 77


 3424              	.LASF35:
 3425 03f4 67325F73 		.ascii	"g2_speed\000"
 3425      70656564 
 3425      00
 3426              	.LASF29:
 3427 03fd 67315F78 		.ascii	"g1_xpos\000"
 3427      706F7300 
 3428              	.LASF3:
 3429 0405 73686F72 		.ascii	"short unsigned int\000"
 3429      7420756E 
 3429      7369676E 
 3429      65642069 
 3429      6E7400
 3430              	.LASF116:
 3431 0418 64617461 		.ascii	"data_main\000"
 3431      5F6D6169 
 3431      6E00
 3432              	.LASF58:
 3433 0422 64697374 		.ascii	"distance\000"
 3433      616E6365 
 3433      00
 3434              	.LASF10:
 3435 042b 63686172 		.ascii	"char\000"
 3435      00
 3436              	.LASF107:
 3437 0430 6164635F 		.ascii	"adc_flag\000"
 3437      666C6167 
 3437      00
 3438              	.LASF4:
 3439 0439 6C6F6E67 		.ascii	"long int\000"
 3439      20696E74 
 3439      00
 3440              	.LASF22:
 3441 0442 726F626F 		.ascii	"robot_xpos\000"
 3441      745F7870 
 3441      6F7300
 3442              	.LASF84:
 3443 044d 73686172 		.ascii	"sharpTurnLeft\000"
 3443      70547572 
 3443      6E4C6566 
 3443      7400
 3444              	.LASF12:
 3445 045b 696E7433 		.ascii	"int32_t\000"
 3445      325F7400 
 3446              	.LASF64:
 3447 0463 64697374 		.ascii	"distance_turned\000"
 3447      616E6365 
 3447      5F747572 
 3447      6E656400 
 3448              	.LASF36:
 3449 0473 67325F64 		.ascii	"g2_direction\000"
 3449      69726563 
 3449      74696F6E 
 3449      00
 3450              	.LASF109:
 3451 0480 73616D70 		.ascii	"sample_count\000"
 3451      6C655F63 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 78


 3451      6F756E74 
 3451      00
 3452              	.LASF31:
 3453 048d 67315F73 		.ascii	"g1_speed\000"
 3453      70656564 
 3453      00
 3454              	.LASF77:
 3455 0496 64696666 		.ascii	"diff_count\000"
 3455      5F636F75 
 3455      6E7400
 3456              	.LASF46:
 3457 04a1 726F626F 		.ascii	"robot_state\000"
 3457      745F7374 
 3457      61746500 
 3458              	.LASF101:
 3459 04ad 64697370 		.ascii	"displaystring\000"
 3459      6C617973 
 3459      7472696E 
 3459      6700
 3460              	.LASF57:
 3461 04bb 64657369 		.ascii	"desired_distance\000"
 3461      7265645F 
 3461      64697374 
 3461      616E6365 
 3461      00
 3462              	.LASF41:
 3463 04cc 4D454449 		.ascii	"MEDIUM_LEFT\000"
 3463      554D5F4C 
 3463      45465400 
 3464              	.LASF67:
 3465 04d8 72656164 		.ascii	"reading\000"
 3465      696E6700 
 3466              	.LASF25:
 3467 04e0 67305F78 		.ascii	"g0_xpos\000"
 3467      706F7300 
 3468              	.LASF51:
 3469 04e8 72696768 		.ascii	"right_wheel_count\000"
 3469      745F7768 
 3469      65656C5F 
 3469      636F756E 
 3469      7400
 3470              	.LASF52:
 3471 04fa 6C656674 		.ascii	"left_wheel_count\000"
 3471      5F776865 
 3471      656C5F63 
 3471      6F756E74 
 3471      00
 3472              	.LASF17:
 3473 050b 696E7433 		.ascii	"int32\000"
 3473      3200
 3474              	.LASF19:
 3475 0511 646F7562 		.ascii	"double\000"
 3475      6C6500
 3476              	.LASF68:
 3477 0518 6368616E 		.ascii	"changeLeftWheelSpeed\000"
 3477      67654C65 
 3477      66745768 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 79


 3477      65656C53 
 3477      70656564 
 3478              	.LASF99:
 3479 052d 64617461 		.ascii	"dataready_flag\000"
 3479      72656164 
 3479      795F666C 
 3479      616700
 3480              	.LASF90:
 3481 053c 74735F73 		.ascii	"ts_speed\000"
 3481      70656564 
 3481      00
 3482              	.LASF74:
 3483 0545 636F756E 		.ascii	"count\000"
 3483      7400
 3484              	.LASF44:
 3485 054b 534C4F57 		.ascii	"SLOW\000"
 3485      00
 3486              	.LASF92:
 3487 0550 666C6167 		.ascii	"flag_ts_enc\000"
 3487      5F74735F 
 3487      656E6300 
 3488              	.LASF11:
 3489 055c 5F5F696E 		.ascii	"__int32_t\000"
 3489      7433325F 
 3489      7400
 3490              	.LASF110:
 3491 0566 636F756E 		.ascii	"countM1\000"
 3491      744D3100 
 3492              	.LASF111:
 3493 056e 636F756E 		.ascii	"countM2\000"
 3493      744D3200 
 3494              	.LASF53:
 3495 0576 706F6C6C 		.ascii	"polling_count\000"
 3495      696E675F 
 3495      636F756E 
 3495      7400
 3496              	.LASF70:
 3497 0584 6E65775F 		.ascii	"new_value\000"
 3497      76616C75 
 3497      6500
 3498              	.LASF26:
 3499 058e 67305F79 		.ascii	"g0_ypos\000"
 3499      706F7300 
 3500              	.LASF83:
 3501 0596 7475726E 		.ascii	"turnRight\000"
 3501      52696768 
 3501      7400
 3502              	.LASF91:
 3503 05a0 74735F64 		.ascii	"ts_display\000"
 3503      6973706C 
 3503      617900
 3504              	.LASF89:
 3505 05ab 74735F75 		.ascii	"ts_update\000"
 3505      70646174 
 3505      6500
 3506              	.LASF65:
 3507 05b5 67657444 		.ascii	"getDistance\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cc1YbNaa.s 			page 80


 3507      69737461 
 3507      6E636500 
 3508              	.LASF79:
 3509 05c1 73657457 		.ascii	"setWheelDirection\000"
 3509      6865656C 
 3509      44697265 
 3509      6374696F 
 3509      6E00
 3510              	.LASF100:
 3511 05d3 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3511      5F72665F 
 3511      7472616E 
 3511      736D6973 
 3511      73696F6E 
 3512              	.LASF23:
 3513 05ef 726F626F 		.ascii	"robot_ypos\000"
 3513      745F7970 
 3513      6F7300
 3514              	.LASF54:
 3515 05fa 70726576 		.ascii	"prev_state\000"
 3515      5F737461 
 3515      746500
 3516              	.LASF69:
 3517 0605 616D6F75 		.ascii	"amount\000"
 3517      6E7400
 3518              	.LASF106:
 3519 060c 73656E73 		.ascii	"sensor_readings\000"
 3519      6F725F72 
 3519      65616469 
 3519      6E677300 
 3520              	.LASF20:
 3521 061c 72737369 		.ascii	"rssi\000"
 3521      00
 3522              	.LASF80:
 3523 0621 6C656674 		.ascii	"leftIsForward\000"
 3523      4973466F 
 3523      72776172 
 3523      6400
 3524              	.LASF85:
 3525 062f 73686172 		.ascii	"sharpTurnRight\000"
 3525      70547572 
 3525      6E526967 
 3525      687400
 3526              	.LASF39:
 3527 063e 534C4947 		.ascii	"SLIGHTLY_LEFT\000"
 3527      48544C59 
 3527      5F4C4546 
 3527      5400
 3528              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
