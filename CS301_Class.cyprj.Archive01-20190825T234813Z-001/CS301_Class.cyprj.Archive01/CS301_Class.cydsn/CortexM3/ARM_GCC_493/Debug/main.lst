ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	displaystring
  95 0001 000000   		.align	2
  96              		.type	displaystring, %object
  97              		.size	displaystring, 64
  98              	displaystring:
  99 0004 43533330 		.ascii	"CS301 2020\012\000"
  99      31203230 
  99      32300A00 
 100 0010 00000000 		.space	52
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.comm	line,64,4
 102              		.comm	entry,64,4
 103              		.comm	usbBuffer,64,4
 104              		.comm	system_state,32,4
 105              		.global	sensor_readings
 106              		.bss
 107 0012 0000     		.align	2
 108              		.type	sensor_readings, %object
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 3


 109              		.size	sensor_readings, 6
 110              	sensor_readings:
 111 0014 00000000 		.space	6
 111      0000
 112              		.global	adc_flag
 113 001a 0000     		.align	2
 114              		.type	adc_flag, %object
 115              		.size	adc_flag, 4
 116              	adc_flag:
 117 001c 00000000 		.space	4
 118              		.global	adc_readings
 119              		.align	2
 120              		.type	adc_readings, %object
 121              		.size	adc_readings, 24
 122              	adc_readings:
 123 0020 00000000 		.space	24
 123      00000000 
 123      00000000 
 123      00000000 
 123      00000000 
 124              		.global	sample_count
 125              		.align	2
 126              		.type	sample_count, %object
 127              		.size	sample_count, 4
 128              	sample_count:
 129 0038 00000000 		.space	4
 130              		.global	countM1
 131              		.align	2
 132              		.type	countM1, %object
 133              		.size	countM1, 4
 134              	countM1:
 135 003c 00000000 		.space	4
 136              		.global	countM2
 137              		.align	2
 138              		.type	countM2, %object
 139              		.size	countM2, 4
 140              	countM2:
 141 0040 00000000 		.space	4
 142              		.global	prevCountM1
 143              		.align	2
 144              		.type	prevCountM1, %object
 145              		.size	prevCountM1, 4
 146              	prevCountM1:
 147 0044 00000000 		.space	4
 148              		.global	prevCountM2
 149              		.align	2
 150              		.type	prevCountM2, %object
 151              		.size	prevCountM2, 4
 152              	prevCountM2:
 153 0048 00000000 		.space	4
 154              		.global	timer_flag
 155              		.align	2
 156              		.type	timer_flag, %object
 157              		.size	timer_flag, 4
 158              	timer_flag:
 159 004c 00000000 		.space	4
 160              		.section	.text.ENCODER_ISR,"ax",%progbits
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 4


 161              		.align	2
 162              		.global	ENCODER_ISR
 163              		.thumb
 164              		.thumb_func
 165              		.type	ENCODER_ISR, %function
 166              	ENCODER_ISR:
 167              	.LFB63:
 168              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  * Copyright Univ of Auckland, 2016
   3:.\main.c      ****  * All Rights Reserved
   4:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   5:.\main.c      ****  *
   6:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   7:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   8:.\main.c      ****  *
   9:.\main.c      ****  * ================== INCLUDE ======================
  10:.\main.c      **** */
  11:.\main.c      **** #include <stdio.h>
  12:.\main.c      **** #include <string.h>
  13:.\main.c      **** #include <stdlib.h>
  14:.\main.c      **** #include <project.h>
  15:.\main.c      **** 
  16:.\main.c      **** #include "defines.h"
  17:.\main.c      **** #include "vars.h"
  18:.\main.c      **** //* =================== MACROS =====================
  19:.\main.c      **** // SENSOR MAPPINGS
  20:.\main.c      **** #define TOP_LEFT_SENSOR 0
  21:.\main.c      **** #define TOP_MID_SENSOR 1
  22:.\main.c      **** #define TOP_RIGHT_SENSOR 2
  23:.\main.c      **** #define BOTTOM_LEFT_SENSOR 3
  24:.\main.c      **** #define BOTTOM_MID_SENSOR 4
  25:.\main.c      **** #define BOTTOM_RIGHT_SENSOR 5
  26:.\main.c      **** 
  27:.\main.c      **** // LIGHT SENSORS
  28:.\main.c      **** #define NUM_SENSORS 6
  29:.\main.c      **** #define LIGHT_LEVEL 300
  30:.\main.c      **** 
  31:.\main.c      **** // ADC stuff
  32:.\main.c      **** #define ADC_READINGS_SIZE 90
  33:.\main.c      **** 
  34:.\main.c      **** // Speed calculations
  35:.\main.c      **** #define LINEAR_DISTANCE_PER_REV 20.42035225
  36:.\main.c      **** #define TICKS_PER_REV 228
  37:.\main.c      **** #define TIMER_PERIOD 0.03
  38:.\main.c      **** 
  39:.\main.c      **** // Speed control
  40:.\main.c      **** #define DESIRED_COUNT 8
  41:.\main.c      **** #define TURN_SPEED 450
  42:.\main.c      **** 
  43:.\main.c      **** // Straight line test
  44:.\main.c      **** #define GRID_SIZE 12
  45:.\main.c      **** #define HALF_ROBOT_LENGTH 10
  46:.\main.c      **** 
  47:.\main.c      **** // 90 degree turn - TODO: Calculate true values
  48:.\main.c      **** #define TICKS_FOR_TURN 190
  49:.\main.c      **** #define TURN_PWM_VAL 225
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 5


  50:.\main.c      **** 
  51:.\main.c      **** // Line following macros - require calibration
  52:.\main.c      **** #define ADJUST_SPEED_LARGE 3
  53:.\main.c      **** #define ADJUST_SPEED_SMALL 1
  54:.\main.c      **** #define MAX_SPEED 9
  55:.\main.c      **** #define MIN_SPEED 4
  56:.\main.c      **** #define SLOW_DOWN_SPEED 1
  57:.\main.c      **** 
  58:.\main.c      **** // Debug flag - uncomment when debugging
  59:.\main.c      **** //#define PUTTY
  60:.\main.c      **** #define PRINT_RATE 0x8000
  61:.\main.c      **** //* ================= TPYE DEF =======================
  62:.\main.c      **** //typedef struct wheel_speed{
  63:.\main.c      **** //    float m1;
  64:.\main.c      **** //    float m2;
  65:.\main.c      **** //} speed;
  66:.\main.c      **** typedef enum robot_state{
  67:.\main.c      ****     CORRECT,
  68:.\main.c      ****     SLIGHTLY_RIGHT,
  69:.\main.c      ****     SLIGHTLY_LEFT,
  70:.\main.c      ****     MEDIUM_RIGHT,
  71:.\main.c      ****     MEDIUM_LEFT,
  72:.\main.c      ****     TURN_RIGHT,
  73:.\main.c      ****     TURN_LEFT,
  74:.\main.c      ****     SLOW,
  75:.\main.c      ****     PASS
  76:.\main.c      **** } robot_state;
  77:.\main.c      **** //* ================= FUNCTIONS =======================
  78:.\main.c      **** void usbPutString(char *s);
  79:.\main.c      **** int getMax(int * readings);
  80:.\main.c      **** 
  81:.\main.c      **** int32 getValForChannel(int16 n);
  82:.\main.c      **** void updateSensorValues();
  83:.\main.c      **** 
  84:.\main.c      **** //speed getSpeed();
  85:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2);
  86:.\main.c      **** void turnRight();
  87:.\main.c      **** void turnLeft();
  88:.\main.c      **** void sharpTurnRight();
  89:.\main.c      **** void sharpTurnLeft();
  90:.\main.c      **** void turnForDegrees(int degrees);
  91:.\main.c      **** int8 performTurn(int isLeft);
  92:.\main.c      **** 
  93:.\main.c      **** void goStraight(int desired_distance, int *right_speed_count, int *left_wheel_count);
  94:.\main.c      **** void changeRightWheelSpeed(int amount);
  95:.\main.c      **** void changeLeftWheelSpeed(int amount);
  96:.\main.c      **** void invertWheels();
  97:.\main.c      **** void setWheelDirection(int isLeftForward, int isRightForward);
  98:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel);
  99:.\main.c      **** //* ================= GLOBAL VARIABLES =======================
 100:.\main.c      **** // ADC
 101:.\main.c      **** int8 sensor_readings[NUM_SENSORS] = { 0 };
 102:.\main.c      **** volatile int adc_flag = FALSE;
 103:.\main.c      **** int adc_readings[NUM_SENSORS] = { 0 };
 104:.\main.c      **** int sample_count = 0;
 105:.\main.c      **** // Encoder
 106:.\main.c      **** volatile int countM1 = 0;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 6


 107:.\main.c      **** volatile int countM2 = 0;
 108:.\main.c      **** int prevCountM1 = 0;
 109:.\main.c      **** int prevCountM2 = 0;
 110:.\main.c      **** volatile int timer_flag = FALSE;
 111:.\main.c      **** //* ================== ISR ======================
 112:.\main.c      **** CY_ISR(ENCODER_ISR) {
 169              		.loc 1 112 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 1, uses_anonymous_args = 0
 173 0000 80B5     		push	{r7, lr}
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 177 0002 00AF     		add	r7, sp, #0
 178              		.cfi_def_cfa_register 7
 113:.\main.c      ****     countM1 = QuadDec_M1_GetCounter();
 179              		.loc 1 113 0
 180 0004 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 181 0008 0346     		mov	r3, r0
 182 000a 1A46     		mov	r2, r3
 183 000c 054B     		ldr	r3, .L2
 184 000e 1A60     		str	r2, [r3]
 114:.\main.c      ****     countM2 = QuadDec_M2_GetCounter();
 185              		.loc 1 114 0
 186 0010 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 187 0014 0346     		mov	r3, r0
 188 0016 1A46     		mov	r2, r3
 189 0018 034B     		ldr	r3, .L2+4
 190 001a 1A60     		str	r2, [r3]
 115:.\main.c      ****     timer_flag = TRUE;
 191              		.loc 1 115 0
 192 001c 034B     		ldr	r3, .L2+8
 193 001e 0122     		movs	r2, #1
 194 0020 1A60     		str	r2, [r3]
 116:.\main.c      **** }
 195              		.loc 1 116 0
 196 0022 80BD     		pop	{r7, pc}
 197              	.L3:
 198              		.align	2
 199              	.L2:
 200 0024 00000000 		.word	countM1
 201 0028 00000000 		.word	countM2
 202 002c 00000000 		.word	timer_flag
 203              		.cfi_endproc
 204              	.LFE63:
 205              		.size	ENCODER_ISR, .-ENCODER_ISR
 206              		.section	.text.ADC_ISR,"ax",%progbits
 207              		.align	2
 208              		.global	ADC_ISR
 209              		.thumb
 210              		.thumb_func
 211              		.type	ADC_ISR, %function
 212              	ADC_ISR:
 213              	.LFB64:
 117:.\main.c      **** 
 118:.\main.c      **** /* ### Retrieve and Store Measurements ### */
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 7


 119:.\main.c      **** CY_ISR(ADC_ISR) {
 214              		.loc 1 119 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219 0000 80B4     		push	{r7}
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 7, -4
 222 0002 00AF     		add	r7, sp, #0
 223              		.cfi_def_cfa_register 7
 120:.\main.c      ****     adc_flag = TRUE;
 224              		.loc 1 120 0
 225 0004 034B     		ldr	r3, .L5
 226 0006 0122     		movs	r2, #1
 227 0008 1A60     		str	r2, [r3]
 121:.\main.c      **** }
 228              		.loc 1 121 0
 229 000a BD46     		mov	sp, r7
 230              		.cfi_def_cfa_register 13
 231              		@ sp needed
 232 000c 5DF8047B 		ldr	r7, [sp], #4
 233              		.cfi_restore 7
 234              		.cfi_def_cfa_offset 0
 235 0010 7047     		bx	lr
 236              	.L6:
 237 0012 00BF     		.align	2
 238              	.L5:
 239 0014 00000000 		.word	adc_flag
 240              		.cfi_endproc
 241              	.LFE64:
 242              		.size	ADC_ISR, .-ADC_ISR
 243              		.section	.rodata
 244              		.align	2
 245              	.LC0:
 246 0000 53686172 		.ascii	"Sharp turn right\015\012\000"
 246      70207475 
 246      726E2072 
 246      69676874 
 246      0D0A00
 247 0013 00       		.align	2
 248              	.LC1:
 249 0014 53686172 		.ascii	"Sharp turn left\015\012\000"
 249      70207475 
 249      726E206C 
 249      6566740D 
 249      0A00
 250 0026 0000     		.align	2
 251              	.LC2:
 252 0028 53747261 		.ascii	"Straight\015\012\000"
 252      69676874 
 252      0D0A00
 253              		.section	.text.main,"ax",%progbits
 254              		.align	2
 255              		.global	main
 256              		.thumb
 257              		.thumb_func
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 8


 258              		.type	main, %function
 259              	main:
 260              	.LFB65:
 122:.\main.c      **** 
 123:.\main.c      **** /** ## Notes
 124:.\main.c      ****     
 125:.\main.c      ****     Ratio of linear distance to quad decoder ticks
 126:.\main.c      ****     One revolution gives a linear distance (in cm)
 127:.\main.c      ****     Each revolution is 57 ticks (228 for 4x mode)
 128:.\main.c      ****     Centimetres per tick = linear distance / countM(1|2)
 129:.\main.c      ****     
 130:.\main.c      ****     Decoder use a 4x count, so each revolution gives 4 counts
 131:.\main.c      ****     Sampling rate is determined by our 100ms timer (might be a little slow)
 132:.\main.c      ****     
 133:.\main.c      ****     ## Algorithm Control Flow
 134:.\main.c      ****     - Get ADC value for each channel
 135:.\main.c      ****     - Get decoder val for M1 & M2
 136:.\main.c      ****     - Use these values to drive the movement of the robot
 137:.\main.c      ****     
 138:.\main.c      **** */
 139:.\main.c      **** 
 140:.\main.c      **** int main()
 141:.\main.c      **** {
 261              		.loc 1 141 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 32
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 80B5     		push	{r7, lr}
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 7, -8
 268              		.cfi_offset 14, -4
 269 0002 88B0     		sub	sp, sp, #32
 270              		.cfi_def_cfa_offset 40
 271 0004 00AF     		add	r7, sp, #0
 272              		.cfi_def_cfa_register 7
 142:.\main.c      ****     // delay
 143:.\main.c      ****     CyDelay(2000);
 273              		.loc 1 143 0
 274 0006 4FF4FA60 		mov	r0, #2000
 275 000a FFF7FEFF 		bl	CyDelay
 144:.\main.c      ****     
 145:.\main.c      ****     // --------------------------------
 146:.\main.c      ****     // ----- INITIALIZATIONS ----------
 147:.\main.c      ****     // ========================================
 148:.\main.c      ****     CYGlobalIntEnable;
 276              		.loc 1 148 0
 277              	@ 148 ".\main.c" 1
 278 000e 62B6     		CPSIE   i
 279              	@ 0 "" 2
 149:.\main.c      ****     
 150:.\main.c      ****     // PWMs
 151:.\main.c      ****     PWM_1_Start();
 280              		.loc 1 151 0
 281              		.thumb
 282 0010 FFF7FEFF 		bl	PWM_1_Start
 152:.\main.c      ****     PWM_2_Start();
 283              		.loc 1 152 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 9


 284 0014 FFF7FEFF 		bl	PWM_2_Start
 153:.\main.c      ****     
 154:.\main.c      ****     // Timer for encoder
 155:.\main.c      ****     Timer_TS_Start();
 285              		.loc 1 155 0
 286 0018 FFF7FEFF 		bl	Timer_TS_Start
 156:.\main.c      ****     isr_TS_Start(); // Timer interrupts need to be started independently
 287              		.loc 1 156 0
 288 001c FFF7FEFF 		bl	isr_TS_Start
 157:.\main.c      ****     isr_TS_StartEx(ENCODER_ISR);
 289              		.loc 1 157 0
 290 0020 4248     		ldr	r0, .L13
 291 0022 FFF7FEFF 		bl	isr_TS_StartEx
 158:.\main.c      ****     
 159:.\main.c      ****     // Quad Decoders
 160:.\main.c      ****     QuadDec_M1_Start();
 292              		.loc 1 160 0
 293 0026 FFF7FEFF 		bl	QuadDec_M1_Start
 161:.\main.c      ****     QuadDec_M2_Start();
 294              		.loc 1 161 0
 295 002a FFF7FEFF 		bl	QuadDec_M2_Start
 162:.\main.c      ****     
 163:.\main.c      ****     // ADC
 164:.\main.c      ****     ADC_Start(); // Start ADC
 296              		.loc 1 164 0
 297 002e FFF7FEFF 		bl	ADC_Start
 165:.\main.c      ****     ADC_IRQ_Enable(); // Enable ADC interrupts
 298              		.loc 1 165 0
 299 0032 FFF7FEFF 		bl	ADC_IRQ_Enable
 166:.\main.c      ****     ADC_StartConvert(); // Start conversions
 300              		.loc 1 166 0
 301 0036 FFF7FEFF 		bl	ADC_StartConvert
 167:.\main.c      ****     isr_eoc_StartEx(ADC_ISR); // link interrupt for ADC
 302              		.loc 1 167 0
 303 003a 3D48     		ldr	r0, .L13+4
 304 003c FFF7FEFF 		bl	isr_eoc_StartEx
 168:.\main.c      **** 
 169:.\main.c      ****     // ------------ USB SETUP ------------    
 170:.\main.c      ****     #ifdef USE_USB    
 171:.\main.c      ****         USBUART_Start(0, USBUART_5V_OPERATION);
 305              		.loc 1 171 0
 306 0040 0020     		movs	r0, #0
 307 0042 0121     		movs	r1, #1
 308 0044 FFF7FEFF 		bl	USBUART_Start
 172:.\main.c      ****     #endif            
 173:.\main.c      ****     
 174:.\main.c      ****     // To make sure wheels rotate in the same direction i.e. forward
 175:.\main.c      ****     INV2_Write(1);
 309              		.loc 1 175 0
 310 0048 0120     		movs	r0, #1
 311 004a FFF7FEFF 		bl	INV2_Write
 176:.\main.c      ****     
 177:.\main.c      ****     // Storing count values
 178:.\main.c      ****     int right_wheel_count = DESIRED_COUNT;
 312              		.loc 1 178 0
 313 004e 0823     		movs	r3, #8
 314 0050 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 10


 179:.\main.c      ****     int left_wheel_count = DESIRED_COUNT;
 315              		.loc 1 179 0
 316 0052 0823     		movs	r3, #8
 317 0054 BB60     		str	r3, [r7, #8]
 180:.\main.c      ****     int polling_count = 0;
 318              		.loc 1 180 0
 319 0056 0023     		movs	r3, #0
 320 0058 BB61     		str	r3, [r7, #24]
 181:.\main.c      ****     
 182:.\main.c      ****     robot_state state;
 183:.\main.c      ****     robot_state prev_state = CORRECT;
 321              		.loc 1 183 0
 322 005a 0023     		movs	r3, #0
 323 005c FB75     		strb	r3, [r7, #23]
 184:.\main.c      ****     
 185:.\main.c      ****     char directions[8] = {'4', 'L', '4', 'R', '2', 'R'};
 324              		.loc 1 185 0
 325 005e 0023     		movs	r3, #0
 326 0060 3B60     		str	r3, [r7]
 327 0062 0023     		movs	r3, #0
 328 0064 7B60     		str	r3, [r7, #4]
 329 0066 3423     		movs	r3, #52
 330 0068 3B70     		strb	r3, [r7]
 331 006a 4C23     		movs	r3, #76
 332 006c 7B70     		strb	r3, [r7, #1]
 333 006e 3423     		movs	r3, #52
 334 0070 BB70     		strb	r3, [r7, #2]
 335 0072 5223     		movs	r3, #82
 336 0074 FB70     		strb	r3, [r7, #3]
 337 0076 3223     		movs	r3, #50
 338 0078 3B71     		strb	r3, [r7, #4]
 339 007a 5223     		movs	r3, #82
 340 007c 7B71     		strb	r3, [r7, #5]
 186:.\main.c      ****     //char directions[8] = {'4', 'R', '4'};
 187:.\main.c      ****     int direction_index = 0;
 341              		.loc 1 187 0
 342 007e 0023     		movs	r3, #0
 343 0080 FB61     		str	r3, [r7, #28]
 188:.\main.c      ****     
 189:.\main.c      ****     while (directions[direction_index] != 0) {
 344              		.loc 1 189 0
 345 0082 3FE0     		b	.L8
 346              	.L12:
 190:.\main.c      ****         if (directions[direction_index] == 'R') {
 347              		.loc 1 190 0
 348 0084 3A46     		mov	r2, r7
 349 0086 FB69     		ldr	r3, [r7, #28]
 350 0088 1344     		add	r3, r3, r2
 351 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 008c 522B     		cmp	r3, #82
 353 008e 0BD1     		bne	.L9
 191:.\main.c      ****             usbPutString("Sharp turn right\r\n");
 354              		.loc 1 191 0
 355 0090 2848     		ldr	r0, .L13+8
 356 0092 FFF7FEFF 		bl	usbPutString
 192:.\main.c      ****             sharpTurnRight(&right_wheel_count, &left_wheel_count);
 357              		.loc 1 192 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 11


 358 0096 07F10C02 		add	r2, r7, #12
 359 009a 07F10803 		add	r3, r7, #8
 360 009e 1046     		mov	r0, r2
 361 00a0 1946     		mov	r1, r3
 362 00a2 FFF7FEFF 		bl	sharpTurnRight
 363 00a6 2AE0     		b	.L10
 364              	.L9:
 193:.\main.c      ****         } else if (directions[direction_index] == 'L') {
 365              		.loc 1 193 0
 366 00a8 3A46     		mov	r2, r7
 367 00aa FB69     		ldr	r3, [r7, #28]
 368 00ac 1344     		add	r3, r3, r2
 369 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 00b0 4C2B     		cmp	r3, #76
 371 00b2 0BD1     		bne	.L11
 194:.\main.c      ****             usbPutString("Sharp turn left\r\n");
 372              		.loc 1 194 0
 373 00b4 2048     		ldr	r0, .L13+12
 374 00b6 FFF7FEFF 		bl	usbPutString
 195:.\main.c      ****             sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 375              		.loc 1 195 0
 376 00ba 07F10C02 		add	r2, r7, #12
 377 00be 07F10803 		add	r3, r7, #8
 378 00c2 1046     		mov	r0, r2
 379 00c4 1946     		mov	r1, r3
 380 00c6 FFF7FEFF 		bl	sharpTurnLeft
 381 00ca 18E0     		b	.L10
 382              	.L11:
 383              	.LBB2:
 196:.\main.c      ****         } else {
 197:.\main.c      ****             usbPutString("Straight\r\n");
 384              		.loc 1 197 0
 385 00cc 1B48     		ldr	r0, .L13+16
 386 00ce FFF7FEFF 		bl	usbPutString
 198:.\main.c      ****             int num_coords = directions[direction_index] - '0';
 387              		.loc 1 198 0
 388 00d2 3A46     		mov	r2, r7
 389 00d4 FB69     		ldr	r3, [r7, #28]
 390 00d6 1344     		add	r3, r3, r2
 391 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 392 00da 303B     		subs	r3, r3, #48
 393 00dc 3B61     		str	r3, [r7, #16]
 199:.\main.c      ****             goStraight(GRID_SIZE * num_coords - HALF_ROBOT_LENGTH, &right_wheel_count, &left_wheel_
 394              		.loc 1 199 0
 395 00de 3A69     		ldr	r2, [r7, #16]
 396 00e0 1346     		mov	r3, r2
 397 00e2 5B00     		lsls	r3, r3, #1
 398 00e4 1344     		add	r3, r3, r2
 399 00e6 9B00     		lsls	r3, r3, #2
 400 00e8 A3F10A01 		sub	r1, r3, #10
 401 00ec 07F10C02 		add	r2, r7, #12
 402 00f0 07F10803 		add	r3, r7, #8
 403 00f4 0846     		mov	r0, r1
 404 00f6 1146     		mov	r1, r2
 405 00f8 1A46     		mov	r2, r3
 406 00fa FFF7FEFF 		bl	goStraight
 407              	.L10:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 12


 408              	.LBE2:
 200:.\main.c      ****         }
 201:.\main.c      ****         
 202:.\main.c      **** //        int num_coords;
 203:.\main.c      **** //            
 204:.\main.c      **** //        switch(directions[direction_index]) {
 205:.\main.c      **** //            case 'R':
 206:.\main.c      **** //                sharpTurnRight(&right_wheel_count, &left_wheel_count);
 207:.\main.c      **** //                usbPutString("Sharp turn right");
 208:.\main.c      **** //                break;
 209:.\main.c      **** //            case 'L':
 210:.\main.c      **** //                sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 211:.\main.c      **** //                usbPutString("Sharp turn left");
 212:.\main.c      **** //                break;
 213:.\main.c      **** //            default: 
 214:.\main.c      **** //                usbPutString("Straight");
 215:.\main.c      **** //                num_coords = directions[direction_index] - '0';
 216:.\main.c      **** //                goStraight(GRID_SIZE * num_coords - DESIRED_COUNT, &right_wheel_count, &left_whee
 217:.\main.c      **** //                break;
 218:.\main.c      **** //        }
 219:.\main.c      ****         direction_index++;
 409              		.loc 1 219 0
 410 00fe FB69     		ldr	r3, [r7, #28]
 411 0100 0133     		adds	r3, r3, #1
 412 0102 FB61     		str	r3, [r7, #28]
 413              	.L8:
 189:.\main.c      ****         if (directions[direction_index] == 'R') {
 414              		.loc 1 189 0
 415 0104 3A46     		mov	r2, r7
 416 0106 FB69     		ldr	r3, [r7, #28]
 417 0108 1344     		add	r3, r3, r2
 418 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419 010c 002B     		cmp	r3, #0
 420 010e B9D1     		bne	.L12
 220:.\main.c      ****         
 221:.\main.c      **** //        PWM_1_WriteCompare(0);
 222:.\main.c      **** //        PWM_2_WriteCompare(0);
 223:.\main.c      **** //        // delay
 224:.\main.c      **** //        CyDelay(1000);
 225:.\main.c      **** //        PWM_1_WriteCompare(350);
 226:.\main.c      **** //        PWM_2_WriteCompare(350);
 227:.\main.c      ****     }
 228:.\main.c      ****     LED_Write(1);
 421              		.loc 1 228 0
 422 0110 0120     		movs	r0, #1
 423 0112 FFF7FEFF 		bl	LED_Write
 229:.\main.c      ****     
 230:.\main.c      ****     //goStraight(GRID_SIZE, &right_wheel_count, &left_wheel_count);
 231:.\main.c      ****     //sharpTurnLeft(&right_wheel_count, &left_wheel_count);
 232:.\main.c      ****     
 233:.\main.c      ****     PWM_1_WriteCompare(0);
 424              		.loc 1 233 0
 425 0116 0020     		movs	r0, #0
 426 0118 FFF7FEFF 		bl	PWM_1_WriteCompare
 234:.\main.c      ****     PWM_2_WriteCompare(0);
 427              		.loc 1 234 0
 428 011c 0020     		movs	r0, #0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 13


 429 011e FFF7FEFF 		bl	PWM_2_WriteCompare
 235:.\main.c      ****     
 236:.\main.c      **** //    while(1) { // Begin main control
 237:.\main.c      **** //        polling_count++;
 238:.\main.c      **** //        
 239:.\main.c      **** //        if (adc_flag) {
 240:.\main.c      **** //            updateSensorValues();
 241:.\main.c      **** //            adc_flag = FALSE;
 242:.\main.c      **** //        }
 243:.\main.c      **** //        
 244:.\main.c      **** //         // New count values from encoder are ready
 245:.\main.c      **** //        if (timer_flag){
 246:.\main.c      **** //            isr_TS_Disable();
 247:.\main.c      **** //            
 248:.\main.c      **** //            // Correct speed
 249:.\main.c      **** //            correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 250:.\main.c      **** //            correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 251:.\main.c      **** //            
 252:.\main.c      **** //            // Update previous values
 253:.\main.c      **** //            prevCountM1 = countM1;
 254:.\main.c      **** //            prevCountM2 = countM2;
 255:.\main.c      **** //            
 256:.\main.c      **** //            // Reset flag
 257:.\main.c      **** //            timer_flag = FALSE;
 258:.\main.c      **** //            
 259:.\main.c      **** //            isr_TS_Enable();
 260:.\main.c      **** //        }
 261:.\main.c      **** //        
 262:.\main.c      **** //       // follow a line algorithm
 263:.\main.c      **** //        if (sensor_readings[TOP_MID_SENSOR]) { // on line
 264:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 265:.\main.c      **** //                state = SLIGHTLY_RIGHT;
 266:.\main.c      **** //                right_wheel_count -= ADJUST_SPEED_SMALL;
 267:.\main.c      **** //                left_wheel_count += ADJUST_SPEED_SMALL;
 268:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { 
 269:.\main.c      **** //                state = SLIGHTLY_LEFT;
 270:.\main.c      **** //                right_wheel_count += ADJUST_SPEED_SMALL;
 271:.\main.c      **** //                left_wheel_count -= ADJUST_SPEED_SMALL;
 272:.\main.c      **** //            } else { // Correct speed
 273:.\main.c      **** //                state = CORRECT;
 274:.\main.c      **** //            }
 275:.\main.c      **** //        } else { // moved off
 276:.\main.c      **** //            if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Devia
 277:.\main.c      **** //                state = MEDIUM_RIGHT;
 278:.\main.c      **** //                turnRight();
 279:.\main.c      **** //            } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {/
 280:.\main.c      **** //                state = MEDIUM_LEFT;
 281:.\main.c      **** //				turnLeft();
 282:.\main.c      **** //            // for corners
 283:.\main.c      **** //            } else if (!sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {
 284:.\main.c      **** //                if (sensor_readings[BOTTOM_LEFT_SENSOR]) {
 285:.\main.c      **** //                    state = TURN_LEFT;
 286:.\main.c      **** //                    sharpTurnLeft();
 287:.\main.c      **** //                } else if (sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 288:.\main.c      **** //                    state = TURN_RIGHT;
 289:.\main.c      **** //                    sharpTurnRight();
 290:.\main.c      **** //                 // slow down in preperation for a sharp turn
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 14


 291:.\main.c      **** //                } else if (left_wheel_count > MIN_SPEED && right_wheel_count > MIN_SPEED) {
 292:.\main.c      **** //                    state = SLOW;
 293:.\main.c      **** //                    right_wheel_count -= SLOW_DOWN_SPEED;
 294:.\main.c      **** //                    left_wheel_count -= SLOW_DOWN_SPEED;
 295:.\main.c      **** //                } else {
 296:.\main.c      **** //                    state = PASS;
 297:.\main.c      **** //                }
 298:.\main.c      **** //            }
 299:.\main.c      **** //        }
 300:.\main.c      **** //        
 301:.\main.c      **** //        if (right_wheel_count > MAX_SPEED) {
 302:.\main.c      **** //            right_wheel_count = MAX_SPEED;
 303:.\main.c      **** //        }
 304:.\main.c      **** //        if (left_wheel_count > MAX_SPEED) {
 305:.\main.c      **** //            left_wheel_count = MAX_SPEED;
 306:.\main.c      **** //        }
 307:.\main.c      **** //        if (right_wheel_count < MIN_SPEED) {
 308:.\main.c      **** //            right_wheel_count = MIN_SPEED;
 309:.\main.c      **** //        }
 310:.\main.c      **** //        if (left_wheel_count < MIN_SPEED) {
 311:.\main.c      **** //            left_wheel_count = MIN_SPEED;
 312:.\main.c      **** //        }
 313:.\main.c      **** //        
 314:.\main.c      **** ////        if (polling_count == PRINT_RATE) {
 315:.\main.c      **** //        if (prev_state != state) {
 316:.\main.c      **** //            if (state == SLIGHTLY_LEFT) {
 317:.\main.c      **** //                usbPutString("SLIGHTLY_LEFT\r\n");
 318:.\main.c      **** //            } else if (state == SLIGHTLY_RIGHT) {
 319:.\main.c      **** //                usbPutString("SLIGHTLY_RIGHT\r\n");
 320:.\main.c      **** //            } else if (state == MEDIUM_LEFT) {
 321:.\main.c      **** //                usbPutString("MEDIUM_LEFT\r\n");
 322:.\main.c      **** //            } else if (state == MEDIUM_RIGHT) {
 323:.\main.c      **** //                usbPutString("MEDIUM_RIGHT\r\n");
 324:.\main.c      **** //            } else if (state == TURN_LEFT) {
 325:.\main.c      **** //                usbPutString("TURN_LEFT\r\n");
 326:.\main.c      **** //            } else if (state == TURN_RIGHT) {
 327:.\main.c      **** //                usbPutString("TURN_RIGHT\r\n");
 328:.\main.c      **** //            } else if (state == SLOW) {
 329:.\main.c      **** //                usbPutString("SLOW\r\n");
 330:.\main.c      **** //            } else if (state == PASS) {
 331:.\main.c      **** //                usbPutString("PASS\r\n");
 332:.\main.c      **** //            } else if (state == CORRECT) {
 333:.\main.c      **** //                usbPutString("CORRECT\r\n");
 334:.\main.c      **** //            }
 335:.\main.c      **** //            prev_state = state;
 336:.\main.c      **** //        }
 337:.\main.c      **** //                
 338:.\main.c      **** //                
 339:.\main.c      **** //        if (polling_count == PRINT_RATE) polling_count = 0;
 340:.\main.c      **** //    }
 341:.\main.c      **** }
 430              		.loc 1 341 0
 431 0122 1846     		mov	r0, r3
 432 0124 2037     		adds	r7, r7, #32
 433              		.cfi_def_cfa_offset 8
 434 0126 BD46     		mov	sp, r7
 435              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 15


 436              		@ sp needed
 437 0128 80BD     		pop	{r7, pc}
 438              	.L14:
 439 012a 00BF     		.align	2
 440              	.L13:
 441 012c 00000000 		.word	ENCODER_ISR
 442 0130 00000000 		.word	ADC_ISR
 443 0134 00000000 		.word	.LC0
 444 0138 14000000 		.word	.LC1
 445 013c 28000000 		.word	.LC2
 446              		.cfi_endproc
 447              	.LFE65:
 448              		.size	main, .-main
 449              		.section	.rodata
 450 0033 00       		.align	2
 451              	.LC3:
 452 0034 202D2064 		.ascii	" - desired  \000"
 452      65736972 
 452      65642020 
 452      00
 453 0041 000000   		.align	2
 454              	.LC4:
 455 0044 0D0A202D 		.ascii	"\015\012 - distance \000"
 455      20646973 
 455      74616E63 
 455      652000
 456              		.global	__aeabi_f2iz
 457 0053 00       		.align	2
 458              	.LC5:
 459 0054 0D0A00   		.ascii	"\015\012\000"
 460              		.global	__aeabi_fadd
 461 0057 00       		.align	2
 462              	.LC6:
 463 0058 202D2074 		.ascii	" - turn right\015\012\000"
 463      75726E20 
 463      72696768 
 463      740D0A00 
 464              		.align	2
 465              	.LC7:
 466 0068 202D2074 		.ascii	" - turn left\015\012\000"
 466      75726E20 
 466      6C656674 
 466      0D0A00
 467              		.global	__aeabi_i2f
 468              		.global	__aeabi_fcmpgt
 469              		.section	.text.goStraight,"ax",%progbits
 470              		.align	2
 471              		.global	goStraight
 472              		.thumb
 473              		.thumb_func
 474              		.type	goStraight, %function
 475              	goStraight:
 476              	.LFB66:
 342:.\main.c      **** 
 343:.\main.c      **** 
 344:.\main.c      **** /* Template code */
 345:.\main.c      **** /*
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 16


 346:.\main.c      ****     while(TRUE){
 347:.\main.c      ****         
 348:.\main.c      ****         // Update sensor values from ADC
 349:.\main.c      ****         if (adc_flag){
 350:.\main.c      ****             updateSensorValues();
 351:.\main.c      ****             adc_flag = FALSE;
 352:.\main.c      ****         }
 353:.\main.c      ****         // Update distance and speed of robot
 354:.\main.c      ****         if (timer_flag){
 355:.\main.c      ****             isr_TS_Disable();
 356:.\main.c      ****             
 357:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 358:.\main.c      ****             
 359:.\main.c      ****             // Correct speed
 360:.\main.c      ****             correctSpeed(prevCountM1,countM1,left_wheel_count,TRUE);
 361:.\main.c      ****             correctSpeed(prevCountM2,countM2,right_wheel_count,FALSE);
 362:.\main.c      ****             
 363:.\main.c      ****             // Update previous values
 364:.\main.c      ****             prevCountM1 = countM1;
 365:.\main.c      ****             prevCountM2 = countM2;
 366:.\main.c      ****             
 367:.\main.c      ****             // Reset flag
 368:.\main.c      ****             timer_flag = FALSE;
 369:.\main.c      ****             
 370:.\main.c      ****             isr_TS_Enable();
 371:.\main.c      ****         }
 372:.\main.c      **** 
 373:.\main.c      ****         // Execute next instruction in queue after reaching a certain distance
 374:.\main.c      ****         if (distance == NODE_DISTANCE){
 375:.\main.c      ****             // Execute the next instruction (uses function pointers)
 376:.\main.c      ****             instructions[instruction_count]();
 377:.\main.c      ****             instruction_count++;
 378:.\main.c      ****             distance = 0;
 379:.\main.c      ****         }
 380:.\main.c      ****     }
 381:.\main.c      **** */
 382:.\main.c      **** 
 383:.\main.c      **** void goStraight(int desired_distance, int *right_wheel_count, int *left_wheel_count) {
 477              		.loc 1 383 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 56
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 80B5     		push	{r7, lr}
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 8EB0     		sub	sp, sp, #56
 486              		.cfi_def_cfa_offset 64
 487 0004 00AF     		add	r7, sp, #0
 488              		.cfi_def_cfa_register 7
 489 0006 F860     		str	r0, [r7, #12]
 490 0008 B960     		str	r1, [r7, #8]
 491 000a 7A60     		str	r2, [r7, #4]
 384:.\main.c      ****     usbPutString(" - desired  ");
 492              		.loc 1 384 0
 493 000c 7048     		ldr	r0, .L28
 494 000e FFF7FEFF 		bl	usbPutString
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 17


 385:.\main.c      ****     char buf[32];
 386:.\main.c      ****     itoa(desired_distance, buf, 10);
 495              		.loc 1 386 0
 496 0012 07F11403 		add	r3, r7, #20
 497 0016 F868     		ldr	r0, [r7, #12]
 498 0018 1946     		mov	r1, r3
 499 001a 0A22     		movs	r2, #10
 500 001c FFF7FEFF 		bl	itoa
 387:.\main.c      ****     usbPutString(buf);
 501              		.loc 1 387 0
 502 0020 07F11403 		add	r3, r7, #20
 503 0024 1846     		mov	r0, r3
 504 0026 FFF7FEFF 		bl	usbPutString
 388:.\main.c      ****     
 389:.\main.c      **** //    PWM_1_WriteCompare(350);
 390:.\main.c      **** //    PWM_2_WriteCompare(350);
 391:.\main.c      ****     *right_wheel_count = DESIRED_COUNT;
 505              		.loc 1 391 0
 506 002a BB68     		ldr	r3, [r7, #8]
 507 002c 0822     		movs	r2, #8
 508 002e 1A60     		str	r2, [r3]
 392:.\main.c      ****     *left_wheel_count = DESIRED_COUNT;
 509              		.loc 1 392 0
 510 0030 7B68     		ldr	r3, [r7, #4]
 511 0032 0822     		movs	r2, #8
 512 0034 1A60     		str	r2, [r3]
 393:.\main.c      ****     // Storing count values
 394:.\main.c      ****     
 395:.\main.c      ****     float distance = 0;
 513              		.loc 1 395 0
 514 0036 4FF00003 		mov	r3, #0
 515 003a 7B63     		str	r3, [r7, #52]	@ float
 396:.\main.c      ****     
 397:.\main.c      ****     usbPutString("\r\n - distance ");
 516              		.loc 1 397 0
 517 003c 6548     		ldr	r0, .L28+4
 518 003e FFF7FEFF 		bl	usbPutString
 398:.\main.c      ****     itoa(distance, buf, 10);
 519              		.loc 1 398 0
 520 0042 786B     		ldr	r0, [r7, #52]	@ float
 521 0044 FFF7FEFF 		bl	__aeabi_f2iz
 522 0048 0246     		mov	r2, r0
 523 004a 07F11403 		add	r3, r7, #20
 524 004e 1046     		mov	r0, r2
 525 0050 1946     		mov	r1, r3
 526 0052 0A22     		movs	r2, #10
 527 0054 FFF7FEFF 		bl	itoa
 399:.\main.c      ****     usbPutString(buf);
 528              		.loc 1 399 0
 529 0058 07F11403 		add	r3, r7, #20
 530 005c 1846     		mov	r0, r3
 531 005e FFF7FEFF 		bl	usbPutString
 400:.\main.c      ****     usbPutString("\r\n");
 532              		.loc 1 400 0
 533 0062 5D48     		ldr	r0, .L28+8
 534 0064 FFF7FEFF 		bl	usbPutString
 401:.\main.c      ****         
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 18


 402:.\main.c      ****     while (distance < desired_distance) {
 535              		.loc 1 402 0
 536 0068 A3E0     		b	.L16
 537              	.L27:
 403:.\main.c      ****         if (adc_flag) {
 538              		.loc 1 403 0
 539 006a 5C4B     		ldr	r3, .L28+12
 540 006c 1B68     		ldr	r3, [r3]
 541 006e 002B     		cmp	r3, #0
 542 0070 04D0     		beq	.L17
 404:.\main.c      ****             updateSensorValues();
 543              		.loc 1 404 0
 544 0072 FFF7FEFF 		bl	updateSensorValues
 405:.\main.c      ****             adc_flag = FALSE;
 545              		.loc 1 405 0
 546 0076 594B     		ldr	r3, .L28+12
 547 0078 0022     		movs	r2, #0
 548 007a 1A60     		str	r2, [r3]
 549              	.L17:
 406:.\main.c      ****         }
 407:.\main.c      ****         
 408:.\main.c      ****          // New count values from encoder are ready
 409:.\main.c      ****         if (timer_flag){
 550              		.loc 1 409 0
 551 007c 584B     		ldr	r3, .L28+16
 552 007e 1B68     		ldr	r3, [r3]
 553 0080 002B     		cmp	r3, #0
 554 0082 35D0     		beq	.L18
 410:.\main.c      ****             isr_TS_Disable();
 555              		.loc 1 410 0
 556 0084 FFF7FEFF 		bl	isr_TS_Disable
 411:.\main.c      ****             
 412:.\main.c      ****             // update distance
 413:.\main.c      ****             distance += getDistance(prevCountM1, prevCountM2);
 557              		.loc 1 413 0
 558 0088 564B     		ldr	r3, .L28+20
 559 008a 1A68     		ldr	r2, [r3]
 560 008c 564B     		ldr	r3, .L28+24
 561 008e 1B68     		ldr	r3, [r3]
 562 0090 1046     		mov	r0, r2
 563 0092 1946     		mov	r1, r3
 564 0094 FFF7FEFF 		bl	getDistance
 565 0098 0346     		mov	r3, r0
 566 009a 786B     		ldr	r0, [r7, #52]	@ float
 567 009c 1946     		mov	r1, r3
 568 009e FFF7FEFF 		bl	__aeabi_fadd
 569 00a2 0346     		mov	r3, r0
 570 00a4 7B63     		str	r3, [r7, #52]	@ float
 414:.\main.c      ****             
 415:.\main.c      ****             // Correct speed
 416:.\main.c      ****             correctSpeed(prevCountM1,countM1,*left_wheel_count,TRUE);
 571              		.loc 1 416 0
 572 00a6 4F4B     		ldr	r3, .L28+20
 573 00a8 1968     		ldr	r1, [r3]
 574 00aa 504B     		ldr	r3, .L28+28
 575 00ac 1A68     		ldr	r2, [r3]
 576 00ae 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 19


 577 00b0 1B68     		ldr	r3, [r3]
 578 00b2 0846     		mov	r0, r1
 579 00b4 1146     		mov	r1, r2
 580 00b6 1A46     		mov	r2, r3
 581 00b8 0123     		movs	r3, #1
 582 00ba FFF7FEFF 		bl	correctSpeed
 417:.\main.c      ****             correctSpeed(prevCountM2,countM2,*right_wheel_count,FALSE);
 583              		.loc 1 417 0
 584 00be 4A4B     		ldr	r3, .L28+24
 585 00c0 1968     		ldr	r1, [r3]
 586 00c2 4B4B     		ldr	r3, .L28+32
 587 00c4 1A68     		ldr	r2, [r3]
 588 00c6 BB68     		ldr	r3, [r7, #8]
 589 00c8 1B68     		ldr	r3, [r3]
 590 00ca 0846     		mov	r0, r1
 591 00cc 1146     		mov	r1, r2
 592 00ce 1A46     		mov	r2, r3
 593 00d0 0023     		movs	r3, #0
 594 00d2 FFF7FEFF 		bl	correctSpeed
 418:.\main.c      ****             
 419:.\main.c      ****             // Update previous values
 420:.\main.c      ****             prevCountM1 = countM1;
 595              		.loc 1 420 0
 596 00d6 454B     		ldr	r3, .L28+28
 597 00d8 1B68     		ldr	r3, [r3]
 598 00da 424A     		ldr	r2, .L28+20
 599 00dc 1360     		str	r3, [r2]
 421:.\main.c      ****             prevCountM2 = countM2;
 600              		.loc 1 421 0
 601 00de 444B     		ldr	r3, .L28+32
 602 00e0 1B68     		ldr	r3, [r3]
 603 00e2 414A     		ldr	r2, .L28+24
 604 00e4 1360     		str	r3, [r2]
 422:.\main.c      ****             
 423:.\main.c      ****             // Reset flag
 424:.\main.c      ****             timer_flag = FALSE;
 605              		.loc 1 424 0
 606 00e6 3E4B     		ldr	r3, .L28+16
 607 00e8 0022     		movs	r2, #0
 608 00ea 1A60     		str	r2, [r3]
 425:.\main.c      ****             
 426:.\main.c      ****             isr_TS_Enable();
 609              		.loc 1 426 0
 610 00ec FFF7FEFF 		bl	isr_TS_Enable
 611              	.L18:
 427:.\main.c      ****         }
 428:.\main.c      ****         
 429:.\main.c      ****         // follow a line algorithm
 430:.\main.c      ****         if (sensor_readings[TOP_MID_SENSOR]) { // on line
 612              		.loc 1 430 0
 613 00f0 404B     		ldr	r3, .L28+36
 614 00f2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 615 00f4 002B     		cmp	r3, #0
 616 00f6 25D0     		beq	.L19
 431:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 617              		.loc 1 431 0
 618 00f8 3E4B     		ldr	r3, .L28+36
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 20


 619 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 620 00fc 002B     		cmp	r3, #0
 621 00fe 0ED1     		bne	.L20
 622              		.loc 1 431 0 is_stmt 0 discriminator 1
 623 0100 3C4B     		ldr	r3, .L28+36
 624 0102 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 625 0104 002B     		cmp	r3, #0
 626 0106 0AD0     		beq	.L20
 432:.\main.c      ****                 *right_wheel_count -= ADJUST_SPEED_SMALL;
 627              		.loc 1 432 0 is_stmt 1
 628 0108 BB68     		ldr	r3, [r7, #8]
 629 010a 1B68     		ldr	r3, [r3]
 630 010c 5A1E     		subs	r2, r3, #1
 631 010e BB68     		ldr	r3, [r7, #8]
 632 0110 1A60     		str	r2, [r3]
 433:.\main.c      ****                 *left_wheel_count += ADJUST_SPEED_SMALL;
 633              		.loc 1 433 0
 634 0112 7B68     		ldr	r3, [r7, #4]
 635 0114 1B68     		ldr	r3, [r3]
 636 0116 5A1C     		adds	r2, r3, #1
 637 0118 7B68     		ldr	r3, [r7, #4]
 638 011a 1A60     		str	r2, [r3]
 639 011c 2DE0     		b	.L22
 640              	.L20:
 434:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) { //
 641              		.loc 1 434 0
 642 011e 354B     		ldr	r3, .L28+36
 643 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 644 0122 002B     		cmp	r3, #0
 645 0124 29D0     		beq	.L22
 646              		.loc 1 434 0 is_stmt 0 discriminator 1
 647 0126 334B     		ldr	r3, .L28+36
 648 0128 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 649 012a 002B     		cmp	r3, #0
 650 012c 25D1     		bne	.L22
 435:.\main.c      ****                 *right_wheel_count += ADJUST_SPEED_SMALL;
 651              		.loc 1 435 0 is_stmt 1
 652 012e BB68     		ldr	r3, [r7, #8]
 653 0130 1B68     		ldr	r3, [r3]
 654 0132 5A1C     		adds	r2, r3, #1
 655 0134 BB68     		ldr	r3, [r7, #8]
 656 0136 1A60     		str	r2, [r3]
 436:.\main.c      ****                 *left_wheel_count -= ADJUST_SPEED_SMALL;
 657              		.loc 1 436 0
 658 0138 7B68     		ldr	r3, [r7, #4]
 659 013a 1B68     		ldr	r3, [r3]
 660 013c 5A1E     		subs	r2, r3, #1
 661 013e 7B68     		ldr	r3, [r7, #4]
 662 0140 1A60     		str	r2, [r3]
 663 0142 1AE0     		b	.L22
 664              	.L19:
 437:.\main.c      ****             }
 438:.\main.c      ****         } else { // moved off
 439:.\main.c      ****             if (!sensor_readings[TOP_LEFT_SENSOR] && sensor_readings[TOP_RIGHT_SENSOR]) {// Deviate
 665              		.loc 1 439 0
 666 0144 2B4B     		ldr	r3, .L28+36
 667 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 21


 668 0148 002B     		cmp	r3, #0
 669 014a 09D1     		bne	.L23
 670              		.loc 1 439 0 is_stmt 0 discriminator 1
 671 014c 294B     		ldr	r3, .L28+36
 672 014e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 673 0150 002B     		cmp	r3, #0
 674 0152 05D0     		beq	.L23
 440:.\main.c      ****                 usbPutString(" - turn right\r\n");
 675              		.loc 1 440 0 is_stmt 1
 676 0154 2848     		ldr	r0, .L28+40
 677 0156 FFF7FEFF 		bl	usbPutString
 441:.\main.c      ****                 turnRight();
 678              		.loc 1 441 0
 679 015a FFF7FEFF 		bl	turnRight
 680 015e 0CE0     		b	.L22
 681              	.L23:
 442:.\main.c      ****             } else if (sensor_readings[TOP_LEFT_SENSOR] && !sensor_readings[TOP_RIGHT_SENSOR]) {// 
 682              		.loc 1 442 0
 683 0160 244B     		ldr	r3, .L28+36
 684 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 685 0164 002B     		cmp	r3, #0
 686 0166 08D0     		beq	.L22
 687              		.loc 1 442 0 is_stmt 0 discriminator 1
 688 0168 224B     		ldr	r3, .L28+36
 689 016a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 690 016c 002B     		cmp	r3, #0
 691 016e 04D1     		bne	.L22
 443:.\main.c      ****                 usbPutString(" - turn left\r\n");
 692              		.loc 1 443 0 is_stmt 1
 693 0170 2248     		ldr	r0, .L28+44
 694 0172 FFF7FEFF 		bl	usbPutString
 444:.\main.c      **** 				turnLeft();
 695              		.loc 1 444 0
 696 0176 FFF7FEFF 		bl	turnLeft
 697              	.L22:
 445:.\main.c      ****             }
 446:.\main.c      ****         }
 447:.\main.c      ****         
 448:.\main.c      ****         if (*right_wheel_count > MAX_SPEED) {
 698              		.loc 1 448 0
 699 017a BB68     		ldr	r3, [r7, #8]
 700 017c 1B68     		ldr	r3, [r3]
 701 017e 092B     		cmp	r3, #9
 702 0180 02DD     		ble	.L24
 449:.\main.c      ****             *right_wheel_count = MAX_SPEED;
 703              		.loc 1 449 0
 704 0182 BB68     		ldr	r3, [r7, #8]
 705 0184 0922     		movs	r2, #9
 706 0186 1A60     		str	r2, [r3]
 707              	.L24:
 450:.\main.c      ****         }
 451:.\main.c      ****         if (*left_wheel_count > MAX_SPEED) {
 708              		.loc 1 451 0
 709 0188 7B68     		ldr	r3, [r7, #4]
 710 018a 1B68     		ldr	r3, [r3]
 711 018c 092B     		cmp	r3, #9
 712 018e 02DD     		ble	.L25
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 22


 452:.\main.c      ****             *left_wheel_count = MAX_SPEED;
 713              		.loc 1 452 0
 714 0190 7B68     		ldr	r3, [r7, #4]
 715 0192 0922     		movs	r2, #9
 716 0194 1A60     		str	r2, [r3]
 717              	.L25:
 453:.\main.c      ****         }
 454:.\main.c      ****         if (*right_wheel_count < MIN_SPEED) {
 718              		.loc 1 454 0
 719 0196 BB68     		ldr	r3, [r7, #8]
 720 0198 1B68     		ldr	r3, [r3]
 721 019a 032B     		cmp	r3, #3
 722 019c 02DC     		bgt	.L26
 455:.\main.c      ****             *right_wheel_count = MIN_SPEED;
 723              		.loc 1 455 0
 724 019e BB68     		ldr	r3, [r7, #8]
 725 01a0 0422     		movs	r2, #4
 726 01a2 1A60     		str	r2, [r3]
 727              	.L26:
 456:.\main.c      ****         }
 457:.\main.c      ****         if (*left_wheel_count < MIN_SPEED) {
 728              		.loc 1 457 0
 729 01a4 7B68     		ldr	r3, [r7, #4]
 730 01a6 1B68     		ldr	r3, [r3]
 731 01a8 032B     		cmp	r3, #3
 732 01aa 02DC     		bgt	.L16
 458:.\main.c      ****             *left_wheel_count = MIN_SPEED;
 733              		.loc 1 458 0
 734 01ac 7B68     		ldr	r3, [r7, #4]
 735 01ae 0422     		movs	r2, #4
 736 01b0 1A60     		str	r2, [r3]
 737              	.L16:
 402:.\main.c      ****         if (adc_flag) {
 738              		.loc 1 402 0
 739 01b2 F868     		ldr	r0, [r7, #12]
 740 01b4 FFF7FEFF 		bl	__aeabi_i2f
 741 01b8 0346     		mov	r3, r0
 742 01ba 1846     		mov	r0, r3
 743 01bc 796B     		ldr	r1, [r7, #52]	@ float
 744 01be FFF7FEFF 		bl	__aeabi_fcmpgt
 745 01c2 0346     		mov	r3, r0
 746 01c4 002B     		cmp	r3, #0
 747 01c6 7FF450AF 		bne	.L27
 459:.\main.c      ****         }
 460:.\main.c      ****     }
 461:.\main.c      **** }
 748              		.loc 1 461 0
 749 01ca 3837     		adds	r7, r7, #56
 750              		.cfi_def_cfa_offset 8
 751 01cc BD46     		mov	sp, r7
 752              		.cfi_def_cfa_register 13
 753              		@ sp needed
 754 01ce 80BD     		pop	{r7, pc}
 755              	.L29:
 756              		.align	2
 757              	.L28:
 758 01d0 34000000 		.word	.LC3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 23


 759 01d4 44000000 		.word	.LC4
 760 01d8 54000000 		.word	.LC5
 761 01dc 00000000 		.word	adc_flag
 762 01e0 00000000 		.word	timer_flag
 763 01e4 00000000 		.word	prevCountM1
 764 01e8 00000000 		.word	prevCountM2
 765 01ec 00000000 		.word	countM1
 766 01f0 00000000 		.word	countM2
 767 01f4 00000000 		.word	sensor_readings
 768 01f8 58000000 		.word	.LC6
 769 01fc 68000000 		.word	.LC7
 770              		.cfi_endproc
 771              	.LFE66:
 772              		.size	goStraight, .-goStraight
 773              		.global	__aeabi_fdiv
 774              		.global	__aeabi_f2d
 775              		.global	__aeabi_dmul
 776              		.global	__aeabi_d2f
 777              		.section	.text.getDistance,"ax",%progbits
 778              		.align	2
 779              		.global	getDistance
 780              		.thumb
 781              		.thumb_func
 782              		.type	getDistance, %function
 783              	getDistance:
 784              	.LFB67:
 462:.\main.c      **** 
 463:.\main.c      **** float getDistance(int prevCountM1, int prevCountM2) {
 785              		.loc 1 463 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 16
 788              		@ frame_needed = 1, uses_anonymous_args = 0
 789 0000 80B5     		push	{r7, lr}
 790              		.cfi_def_cfa_offset 8
 791              		.cfi_offset 7, -8
 792              		.cfi_offset 14, -4
 793 0002 84B0     		sub	sp, sp, #16
 794              		.cfi_def_cfa_offset 24
 795 0004 00AF     		add	r7, sp, #0
 796              		.cfi_def_cfa_register 7
 797 0006 7860     		str	r0, [r7, #4]
 798 0008 3960     		str	r1, [r7]
 464:.\main.c      ****     float m1_dist = ((float)abs(countM1 - prevCountM1) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 799              		.loc 1 464 0
 800 000a 2D4B     		ldr	r3, .L32+8
 801 000c 1A68     		ldr	r2, [r3]
 802 000e 7B68     		ldr	r3, [r7, #4]
 803 0010 D31A     		subs	r3, r2, r3
 804 0012 002B     		cmp	r3, #0
 805 0014 B8BF     		it	lt
 806 0016 5B42     		rsblt	r3, r3, #0
 807 0018 1846     		mov	r0, r3
 808 001a FFF7FEFF 		bl	__aeabi_i2f
 809 001e 0346     		mov	r3, r0
 810 0020 1846     		mov	r0, r3
 811 0022 2849     		ldr	r1, .L32+12
 812 0024 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 24


 813 0028 0346     		mov	r3, r0
 814 002a 1846     		mov	r0, r3
 815 002c FFF7FEFF 		bl	__aeabi_f2d
 816 0030 0246     		mov	r2, r0
 817 0032 0B46     		mov	r3, r1
 818 0034 1046     		mov	r0, r2
 819 0036 1946     		mov	r1, r3
 820 0038 1FA3     		adr	r3, .L32
 821 003a D3E90023 		ldrd	r2, [r3]
 822 003e FFF7FEFF 		bl	__aeabi_dmul
 823 0042 0246     		mov	r2, r0
 824 0044 0B46     		mov	r3, r1
 825 0046 1046     		mov	r0, r2
 826 0048 1946     		mov	r1, r3
 827 004a FFF7FEFF 		bl	__aeabi_d2f
 828 004e 0346     		mov	r3, r0
 829 0050 FB60     		str	r3, [r7, #12]	@ float
 465:.\main.c      ****     float m2_dist = ((float)abs(countM2 - prevCountM2) / TICKS_PER_REV) * LINEAR_DISTANCE_PER_REV;
 830              		.loc 1 465 0
 831 0052 1D4B     		ldr	r3, .L32+16
 832 0054 1A68     		ldr	r2, [r3]
 833 0056 3B68     		ldr	r3, [r7]
 834 0058 D31A     		subs	r3, r2, r3
 835 005a 002B     		cmp	r3, #0
 836 005c B8BF     		it	lt
 837 005e 5B42     		rsblt	r3, r3, #0
 838 0060 1846     		mov	r0, r3
 839 0062 FFF7FEFF 		bl	__aeabi_i2f
 840 0066 0346     		mov	r3, r0
 841 0068 1846     		mov	r0, r3
 842 006a 1649     		ldr	r1, .L32+12
 843 006c FFF7FEFF 		bl	__aeabi_fdiv
 844 0070 0346     		mov	r3, r0
 845 0072 1846     		mov	r0, r3
 846 0074 FFF7FEFF 		bl	__aeabi_f2d
 847 0078 0246     		mov	r2, r0
 848 007a 0B46     		mov	r3, r1
 849 007c 1046     		mov	r0, r2
 850 007e 1946     		mov	r1, r3
 851 0080 0DA3     		adr	r3, .L32
 852 0082 D3E90023 		ldrd	r2, [r3]
 853 0086 FFF7FEFF 		bl	__aeabi_dmul
 854 008a 0246     		mov	r2, r0
 855 008c 0B46     		mov	r3, r1
 856 008e 1046     		mov	r0, r2
 857 0090 1946     		mov	r1, r3
 858 0092 FFF7FEFF 		bl	__aeabi_d2f
 859 0096 0346     		mov	r3, r0
 860 0098 BB60     		str	r3, [r7, #8]	@ float
 466:.\main.c      ****     return (m1_dist + m2_dist) / 2;
 861              		.loc 1 466 0
 862 009a F868     		ldr	r0, [r7, #12]	@ float
 863 009c B968     		ldr	r1, [r7, #8]	@ float
 864 009e FFF7FEFF 		bl	__aeabi_fadd
 865 00a2 0346     		mov	r3, r0
 866 00a4 1846     		mov	r0, r3
 867 00a6 4FF08041 		mov	r1, #1073741824
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 25


 868 00aa FFF7FEFF 		bl	__aeabi_fdiv
 869 00ae 0346     		mov	r3, r0
 467:.\main.c      **** };
 870              		.loc 1 467 0
 871 00b0 1846     		mov	r0, r3
 872 00b2 1037     		adds	r7, r7, #16
 873              		.cfi_def_cfa_offset 8
 874 00b4 BD46     		mov	sp, r7
 875              		.cfi_def_cfa_register 13
 876              		@ sp needed
 877 00b6 80BD     		pop	{r7, pc}
 878              	.L33:
 879              		.align	3
 880              	.L32:
 881 00b8 CE8C7E34 		.word	880708814
 882 00bc 9C6B3440 		.word	1077177244
 883 00c0 00000000 		.word	countM1
 884 00c4 00006443 		.word	1130627072
 885 00c8 00000000 		.word	countM2
 886              		.cfi_endproc
 887              	.LFE67:
 888              		.size	getDistance, .-getDistance
 889              		.global	__aeabi_fcmplt
 890 00cc AFF30080 		.section	.text.turnForDegrees,"ax",%progbits
 891              		.align	2
 892              		.global	turnForDegrees
 893              		.thumb
 894              		.thumb_func
 895              		.type	turnForDegrees, %function
 896              	turnForDegrees:
 897              	.LFB68:
 468:.\main.c      **** 
 469:.\main.c      **** void turnForDegrees(int degrees) {
 898              		.loc 1 469 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 16
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902 0000 80B5     		push	{r7, lr}
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 7, -8
 905              		.cfi_offset 14, -4
 906 0002 84B0     		sub	sp, sp, #16
 907              		.cfi_def_cfa_offset 24
 908 0004 00AF     		add	r7, sp, #0
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 470:.\main.c      ****     float distance_to_turn = degrees / 13;
 911              		.loc 1 470 0
 912 0008 7B68     		ldr	r3, [r7, #4]
 913 000a 1D4A     		ldr	r2, .L37
 914 000c 82FB0312 		smull	r1, r2, r2, r3
 915 0010 9210     		asrs	r2, r2, #2
 916 0012 DB17     		asrs	r3, r3, #31
 917 0014 D31A     		subs	r3, r2, r3
 918 0016 1846     		mov	r0, r3
 919 0018 FFF7FEFF 		bl	__aeabi_i2f
 920 001c 0346     		mov	r3, r0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 26


 921 001e BB60     		str	r3, [r7, #8]	@ float
 471:.\main.c      ****     float distance_turned = 0;
 922              		.loc 1 471 0
 923 0020 4FF00003 		mov	r3, #0
 924 0024 FB60     		str	r3, [r7, #12]	@ float
 472:.\main.c      ****     // Storing count values
 473:.\main.c      **** //    int prevCountM1 = 0;
 474:.\main.c      **** //    int prevCountM2 = 0;
 475:.\main.c      ****     
 476:.\main.c      ****     while (distance_turned < distance_to_turn) {
 925              		.loc 1 476 0
 926 0026 21E0     		b	.L35
 927              	.L36:
 477:.\main.c      ****          // New count values from encoder are ready
 478:.\main.c      ****         if (timer_flag){
 928              		.loc 1 478 0
 929 0028 164B     		ldr	r3, .L37+4
 930 002a 1B68     		ldr	r3, [r3]
 931 002c 002B     		cmp	r3, #0
 932 002e 1DD0     		beq	.L35
 479:.\main.c      ****             isr_TS_Disable();
 933              		.loc 1 479 0
 934 0030 FFF7FEFF 		bl	isr_TS_Disable
 480:.\main.c      ****             
 481:.\main.c      ****             distance_turned += getDistance(prevCountM1, prevCountM2);
 935              		.loc 1 481 0
 936 0034 144B     		ldr	r3, .L37+8
 937 0036 1A68     		ldr	r2, [r3]
 938 0038 144B     		ldr	r3, .L37+12
 939 003a 1B68     		ldr	r3, [r3]
 940 003c 1046     		mov	r0, r2
 941 003e 1946     		mov	r1, r3
 942 0040 FFF7FEFF 		bl	getDistance
 943 0044 0346     		mov	r3, r0
 944 0046 F868     		ldr	r0, [r7, #12]	@ float
 945 0048 1946     		mov	r1, r3
 946 004a FFF7FEFF 		bl	__aeabi_fadd
 947 004e 0346     		mov	r3, r0
 948 0050 FB60     		str	r3, [r7, #12]	@ float
 482:.\main.c      ****             
 483:.\main.c      ****             // Update previous values
 484:.\main.c      ****             prevCountM1 = countM1;
 949              		.loc 1 484 0
 950 0052 0F4B     		ldr	r3, .L37+16
 951 0054 1B68     		ldr	r3, [r3]
 952 0056 0C4A     		ldr	r2, .L37+8
 953 0058 1360     		str	r3, [r2]
 485:.\main.c      ****             prevCountM2 = countM2;
 954              		.loc 1 485 0
 955 005a 0E4B     		ldr	r3, .L37+20
 956 005c 1B68     		ldr	r3, [r3]
 957 005e 0B4A     		ldr	r2, .L37+12
 958 0060 1360     		str	r3, [r2]
 486:.\main.c      ****             
 487:.\main.c      ****             // Reset flag
 488:.\main.c      ****             timer_flag = FALSE;
 959              		.loc 1 488 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 27


 960 0062 084B     		ldr	r3, .L37+4
 961 0064 0022     		movs	r2, #0
 962 0066 1A60     		str	r2, [r3]
 489:.\main.c      ****             
 490:.\main.c      ****             isr_TS_Enable();
 963              		.loc 1 490 0
 964 0068 FFF7FEFF 		bl	isr_TS_Enable
 965              	.L35:
 476:.\main.c      ****          // New count values from encoder are ready
 966              		.loc 1 476 0
 967 006c F868     		ldr	r0, [r7, #12]	@ float
 968 006e B968     		ldr	r1, [r7, #8]	@ float
 969 0070 FFF7FEFF 		bl	__aeabi_fcmplt
 970 0074 0346     		mov	r3, r0
 971 0076 002B     		cmp	r3, #0
 972 0078 D6D1     		bne	.L36
 491:.\main.c      ****         }
 492:.\main.c      ****     }
 493:.\main.c      **** }
 973              		.loc 1 493 0
 974 007a 1037     		adds	r7, r7, #16
 975              		.cfi_def_cfa_offset 8
 976 007c BD46     		mov	sp, r7
 977              		.cfi_def_cfa_register 13
 978              		@ sp needed
 979 007e 80BD     		pop	{r7, pc}
 980              	.L38:
 981              		.align	2
 982              	.L37:
 983 0080 4FECC44E 		.word	1321528399
 984 0084 00000000 		.word	timer_flag
 985 0088 00000000 		.word	prevCountM1
 986 008c 00000000 		.word	prevCountM2
 987 0090 00000000 		.word	countM1
 988 0094 00000000 		.word	countM2
 989              		.cfi_endproc
 990              	.LFE68:
 991              		.size	turnForDegrees, .-turnForDegrees
 992              		.section	.text.getValForChannel,"ax",%progbits
 993              		.align	2
 994              		.global	getValForChannel
 995              		.thumb
 996              		.thumb_func
 997              		.type	getValForChannel, %function
 998              	getValForChannel:
 999              	.LFB69:
 494:.\main.c      ****     
 495:.\main.c      **** 
 496:.\main.c      **** // Simple ADC conversion
 497:.\main.c      **** int32 getValForChannel(int16 n){
 1000              		.loc 1 497 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004 0000 80B5     		push	{r7, lr}
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 7, -8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 28


 1007              		.cfi_offset 14, -4
 1008 0002 82B0     		sub	sp, sp, #8
 1009              		.cfi_def_cfa_offset 16
 1010 0004 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 1012 0006 0346     		mov	r3, r0
 1013 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 498:.\main.c      ****     return ADC_CountsTo_mVolts(ADC_GetResult16(n));
 1014              		.loc 1 498 0
 1015 000a FB88     		ldrh	r3, [r7, #6]
 1016 000c 1846     		mov	r0, r3
 1017 000e FFF7FEFF 		bl	ADC_GetResult16
 1018 0012 0346     		mov	r3, r0
 1019 0014 1846     		mov	r0, r3
 1020 0016 FFF7FEFF 		bl	ADC_CountsTo_mVolts
 1021 001a 0346     		mov	r3, r0
 499:.\main.c      **** }
 1022              		.loc 1 499 0
 1023 001c 1846     		mov	r0, r3
 1024 001e 0837     		adds	r7, r7, #8
 1025              		.cfi_def_cfa_offset 8
 1026 0020 BD46     		mov	sp, r7
 1027              		.cfi_def_cfa_register 13
 1028              		@ sp needed
 1029 0022 80BD     		pop	{r7, pc}
 1030              		.cfi_endproc
 1031              	.LFE69:
 1032              		.size	getValForChannel, .-getValForChannel
 1033              		.section	.text.updateSensorValues,"ax",%progbits
 1034              		.align	2
 1035              		.global	updateSensorValues
 1036              		.thumb
 1037              		.thumb_func
 1038              		.type	updateSensorValues, %function
 1039              	updateSensorValues:
 1040              	.LFB70:
 500:.\main.c      **** 
 501:.\main.c      **** void updateSensorValues(){
 1041              		.loc 1 501 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 8
 1044              		@ frame_needed = 1, uses_anonymous_args = 0
 1045 0000 80B5     		push	{r7, lr}
 1046              		.cfi_def_cfa_offset 8
 1047              		.cfi_offset 7, -8
 1048              		.cfi_offset 14, -4
 1049 0002 82B0     		sub	sp, sp, #8
 1050              		.cfi_def_cfa_offset 16
 1051 0004 00AF     		add	r7, sp, #0
 1052              		.cfi_def_cfa_register 7
 502:.\main.c      ****     // update each sensor with the maximum reading so far
 503:.\main.c      ****     int i;
 504:.\main.c      ****     for (i = 0; i < NUM_SENSORS; i++){
 1053              		.loc 1 504 0
 1054 0006 0023     		movs	r3, #0
 1055 0008 7B60     		str	r3, [r7, #4]
 1056 000a 15E0     		b	.L42
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 29


 1057              	.L44:
 1058              	.LBB3:
 505:.\main.c      ****         int reading = getValForChannel(i);
 1059              		.loc 1 505 0
 1060 000c 7B68     		ldr	r3, [r7, #4]
 1061 000e 9BB2     		uxth	r3, r3
 1062 0010 1BB2     		sxth	r3, r3
 1063 0012 1846     		mov	r0, r3
 1064 0014 FFF7FEFF 		bl	getValForChannel
 1065 0018 3860     		str	r0, [r7]
 506:.\main.c      ****         if (reading > adc_readings[i]) {
 1066              		.loc 1 506 0
 1067 001a 234A     		ldr	r2, .L49
 1068 001c 7B68     		ldr	r3, [r7, #4]
 1069 001e 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1070 0022 3B68     		ldr	r3, [r7]
 1071 0024 9A42     		cmp	r2, r3
 1072 0026 04DA     		bge	.L43
 507:.\main.c      ****             adc_readings[i] = reading;
 1073              		.loc 1 507 0
 1074 0028 1F49     		ldr	r1, .L49
 1075 002a 7B68     		ldr	r3, [r7, #4]
 1076 002c 3A68     		ldr	r2, [r7]
 1077 002e 41F82320 		str	r2, [r1, r3, lsl #2]
 1078              	.L43:
 1079              	.LBE3:
 504:.\main.c      ****         int reading = getValForChannel(i);
 1080              		.loc 1 504 0 discriminator 2
 1081 0032 7B68     		ldr	r3, [r7, #4]
 1082 0034 0133     		adds	r3, r3, #1
 1083 0036 7B60     		str	r3, [r7, #4]
 1084              	.L42:
 504:.\main.c      ****         int reading = getValForChannel(i);
 1085              		.loc 1 504 0 is_stmt 0 discriminator 1
 1086 0038 7B68     		ldr	r3, [r7, #4]
 1087 003a 052B     		cmp	r3, #5
 1088 003c E6DD     		ble	.L44
 508:.\main.c      ****         }
 509:.\main.c      ****     }
 510:.\main.c      **** 
 511:.\main.c      ****     sample_count++;
 1089              		.loc 1 511 0 is_stmt 1
 1090 003e 1B4B     		ldr	r3, .L49+4
 1091 0040 1B68     		ldr	r3, [r3]
 1092 0042 0133     		adds	r3, r3, #1
 1093 0044 194A     		ldr	r2, .L49+4
 1094 0046 1360     		str	r3, [r2]
 512:.\main.c      ****     if (sample_count == ADC_READINGS_SIZE){
 1095              		.loc 1 512 0
 1096 0048 184B     		ldr	r3, .L49+4
 1097 004a 1B68     		ldr	r3, [r3]
 1098 004c 5A2B     		cmp	r3, #90
 1099 004e 25D1     		bne	.L45
 513:.\main.c      ****         // Black = 1 (high voltage level)
 514:.\main.c      ****         for (i = 0; i < NUM_SENSORS; i++){
 1100              		.loc 1 514 0
 1101 0050 0023     		movs	r3, #0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 30


 1102 0052 7B60     		str	r3, [r7, #4]
 1103 0054 18E0     		b	.L46
 1104              	.L47:
 515:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 1105              		.loc 1 515 0 discriminator 3
 1106 0056 144A     		ldr	r2, .L49
 1107 0058 7B68     		ldr	r3, [r7, #4]
 1108 005a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1109 005e 40F22B12 		movw	r2, #299
 1110 0062 9342     		cmp	r3, r2
 1111 0064 D4BF     		ite	le
 1112 0066 0123     		movle	r3, #1
 1113 0068 0023     		movgt	r3, #0
 1114 006a DBB2     		uxtb	r3, r3
 1115 006c D9B2     		uxtb	r1, r3
 1116 006e 104A     		ldr	r2, .L49+8
 1117 0070 7B68     		ldr	r3, [r7, #4]
 1118 0072 1344     		add	r3, r3, r2
 1119 0074 0A46     		mov	r2, r1
 1120 0076 1A70     		strb	r2, [r3]
 516:.\main.c      ****             adc_readings[i] = 0; // Reset max value from samples
 1121              		.loc 1 516 0 discriminator 3
 1122 0078 0B4A     		ldr	r2, .L49
 1123 007a 7B68     		ldr	r3, [r7, #4]
 1124 007c 0021     		movs	r1, #0
 1125 007e 42F82310 		str	r1, [r2, r3, lsl #2]
 514:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 1126              		.loc 1 514 0 discriminator 3
 1127 0082 7B68     		ldr	r3, [r7, #4]
 1128 0084 0133     		adds	r3, r3, #1
 1129 0086 7B60     		str	r3, [r7, #4]
 1130              	.L46:
 514:.\main.c      ****             sensor_readings[i] = !!(adc_readings[i] < LIGHT_LEVEL);
 1131              		.loc 1 514 0 is_stmt 0 discriminator 1
 1132 0088 7B68     		ldr	r3, [r7, #4]
 1133 008a 052B     		cmp	r3, #5
 1134 008c E3DD     		ble	.L47
 517:.\main.c      ****         }
 518:.\main.c      ****         ADC_DEBUG_Write(1);
 1135              		.loc 1 518 0 is_stmt 1
 1136 008e 0120     		movs	r0, #1
 1137 0090 FFF7FEFF 		bl	ADC_DEBUG_Write
 519:.\main.c      ****         sample_count = 0;
 1138              		.loc 1 519 0
 1139 0094 054B     		ldr	r3, .L49+4
 1140 0096 0022     		movs	r2, #0
 1141 0098 1A60     		str	r2, [r3]
 1142 009a 02E0     		b	.L41
 1143              	.L45:
 520:.\main.c      ****     }
 521:.\main.c      ****     else ADC_DEBUG_Write(0);
 1144              		.loc 1 521 0
 1145 009c 0020     		movs	r0, #0
 1146 009e FFF7FEFF 		bl	ADC_DEBUG_Write
 1147              	.L41:
 522:.\main.c      **** }
 1148              		.loc 1 522 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 31


 1149 00a2 0837     		adds	r7, r7, #8
 1150              		.cfi_def_cfa_offset 8
 1151 00a4 BD46     		mov	sp, r7
 1152              		.cfi_def_cfa_register 13
 1153              		@ sp needed
 1154 00a6 80BD     		pop	{r7, pc}
 1155              	.L50:
 1156              		.align	2
 1157              	.L49:
 1158 00a8 00000000 		.word	adc_readings
 1159 00ac 00000000 		.word	sample_count
 1160 00b0 00000000 		.word	sensor_readings
 1161              		.cfi_endproc
 1162              	.LFE70:
 1163              		.size	updateSensorValues, .-updateSensorValues
 1164              		.section	.text.changeLeftWheelSpeed,"ax",%progbits
 1165              		.align	2
 1166              		.global	changeLeftWheelSpeed
 1167              		.thumb
 1168              		.thumb_func
 1169              		.type	changeLeftWheelSpeed, %function
 1170              	changeLeftWheelSpeed:
 1171              	.LFB71:
 523:.\main.c      **** 
 524:.\main.c      **** void changeLeftWheelSpeed(int amount) {
 1172              		.loc 1 524 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 16
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0000 80B5     		push	{r7, lr}
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 7, -8
 1179              		.cfi_offset 14, -4
 1180 0002 84B0     		sub	sp, sp, #16
 1181              		.cfi_def_cfa_offset 24
 1182 0004 00AF     		add	r7, sp, #0
 1183              		.cfi_def_cfa_register 7
 1184 0006 7860     		str	r0, [r7, #4]
 525:.\main.c      ****     int new_value = PWM_1_ReadCompare() + amount;
 1185              		.loc 1 525 0
 1186 0008 FFF7FEFF 		bl	PWM_1_ReadCompare
 1187 000c 0346     		mov	r3, r0
 1188 000e 1A46     		mov	r2, r3
 1189 0010 7B68     		ldr	r3, [r7, #4]
 1190 0012 1344     		add	r3, r3, r2
 1191 0014 FB60     		str	r3, [r7, #12]
 526:.\main.c      ****     PWM_1_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1192              		.loc 1 526 0
 1193 0016 FB68     		ldr	r3, [r7, #12]
 1194 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1195 001c 9BB2     		uxth	r3, r3
 1196 001e 1846     		mov	r0, r3
 1197 0020 FFF7FEFF 		bl	PWM_1_WriteCompare
 527:.\main.c      **** }
 1198              		.loc 1 527 0
 1199 0024 1037     		adds	r7, r7, #16
 1200              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 32


 1201 0026 BD46     		mov	sp, r7
 1202              		.cfi_def_cfa_register 13
 1203              		@ sp needed
 1204 0028 80BD     		pop	{r7, pc}
 1205              		.cfi_endproc
 1206              	.LFE71:
 1207              		.size	changeLeftWheelSpeed, .-changeLeftWheelSpeed
 1208 002a 00BF     		.section	.text.changeRightWheelSpeed,"ax",%progbits
 1209              		.align	2
 1210              		.global	changeRightWheelSpeed
 1211              		.thumb
 1212              		.thumb_func
 1213              		.type	changeRightWheelSpeed, %function
 1214              	changeRightWheelSpeed:
 1215              	.LFB72:
 528:.\main.c      **** 
 529:.\main.c      **** void changeRightWheelSpeed(int amount){
 1216              		.loc 1 529 0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 16
 1219              		@ frame_needed = 1, uses_anonymous_args = 0
 1220 0000 80B5     		push	{r7, lr}
 1221              		.cfi_def_cfa_offset 8
 1222              		.cfi_offset 7, -8
 1223              		.cfi_offset 14, -4
 1224 0002 84B0     		sub	sp, sp, #16
 1225              		.cfi_def_cfa_offset 24
 1226 0004 00AF     		add	r7, sp, #0
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
 530:.\main.c      ****     int new_value = PWM_2_ReadCompare() + amount;
 1229              		.loc 1 530 0
 1230 0008 FFF7FEFF 		bl	PWM_2_ReadCompare
 1231 000c 0346     		mov	r3, r0
 1232 000e 1A46     		mov	r2, r3
 1233 0010 7B68     		ldr	r3, [r7, #4]
 1234 0012 1344     		add	r3, r3, r2
 1235 0014 FB60     		str	r3, [r7, #12]
 531:.\main.c      ****     PWM_2_WriteCompare((new_value > 0) ? new_value:0); // account for underflow
 1236              		.loc 1 531 0
 1237 0016 FB68     		ldr	r3, [r7, #12]
 1238 0018 23EAE373 		bic	r3, r3, r3, asr #31
 1239 001c 9BB2     		uxth	r3, r3
 1240 001e 1846     		mov	r0, r3
 1241 0020 FFF7FEFF 		bl	PWM_2_WriteCompare
 532:.\main.c      **** }
 1242              		.loc 1 532 0
 1243 0024 1037     		adds	r7, r7, #16
 1244              		.cfi_def_cfa_offset 8
 1245 0026 BD46     		mov	sp, r7
 1246              		.cfi_def_cfa_register 13
 1247              		@ sp needed
 1248 0028 80BD     		pop	{r7, pc}
 1249              		.cfi_endproc
 1250              	.LFE72:
 1251              		.size	changeRightWheelSpeed, .-changeRightWheelSpeed
 1252 002a 00BF     		.section	.text.correctSpeed,"ax",%progbits
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 33


 1253              		.align	2
 1254              		.global	correctSpeed
 1255              		.thumb
 1256              		.thumb_func
 1257              		.type	correctSpeed, %function
 1258              	correctSpeed:
 1259              	.LFB73:
 533:.\main.c      **** 
 534:.\main.c      **** /* ## SPEED CONTROL ## 
 535:.\main.c      **** * Algorithm: Get difference between counts, compare to
 536:.\main.c      **** * the difference we expect. Add the correction to the PWM.
 537:.\main.c      **** */
 538:.\main.c      **** void correctSpeed(int prevCount, int count, int desired_count, int isLeftWheel){    
 1260              		.loc 1 538 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 88
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264 0000 80B5     		push	{r7, lr}
 1265              		.cfi_def_cfa_offset 8
 1266              		.cfi_offset 7, -8
 1267              		.cfi_offset 14, -4
 1268 0002 96B0     		sub	sp, sp, #88
 1269              		.cfi_def_cfa_offset 96
 1270 0004 00AF     		add	r7, sp, #0
 1271              		.cfi_def_cfa_register 7
 1272 0006 F860     		str	r0, [r7, #12]
 1273 0008 B960     		str	r1, [r7, #8]
 1274 000a 7A60     		str	r2, [r7, #4]
 1275 000c 3B60     		str	r3, [r7]
 539:.\main.c      ****     
 540:.\main.c      ****     // Account for overflow edge or other unknown error
 541:.\main.c      ****     if (prevCount > count) return;
 1276              		.loc 1 541 0
 1277 000e FA68     		ldr	r2, [r7, #12]
 1278 0010 BB68     		ldr	r3, [r7, #8]
 1279 0012 9A42     		cmp	r2, r3
 1280 0014 00DD     		ble	.L54
 1281 0016 19E0     		b	.L53
 1282              	.L54:
 542:.\main.c      ****     
 543:.\main.c      ****     int diff_count = abs(count - prevCount);
 1283              		.loc 1 543 0
 1284 0018 BA68     		ldr	r2, [r7, #8]
 1285 001a FB68     		ldr	r3, [r7, #12]
 1286 001c D31A     		subs	r3, r2, r3
 1287 001e 002B     		cmp	r3, #0
 1288 0020 B8BF     		it	lt
 1289 0022 5B42     		rsblt	r3, r3, #0
 1290 0024 7B65     		str	r3, [r7, #84]
 544:.\main.c      ****     
 545:.\main.c      ****     // Account for a situation where PSoc is powered but wheels aren't moving
 546:.\main.c      ****     if (diff_count == 0) return;
 1291              		.loc 1 546 0
 1292 0026 7B6D     		ldr	r3, [r7, #84]
 1293 0028 002B     		cmp	r3, #0
 1294 002a 00D1     		bne	.L56
 1295              		.loc 1 546 0 is_stmt 0 discriminator 2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 34


 1296 002c 0EE0     		b	.L53
 1297              	.L56:
 547:.\main.c      ****     
 548:.\main.c      ****     char msg[64];
 549:.\main.c      ****         
 550:.\main.c      ****     /* Determine correction that must be applied to the wheel
 551:.\main.c      ****     * desired_count > diff_count :-> wheel is slow; increase PWM
 552:.\main.c      ****     * desired_count < diff_count :-> wheel is fast; decrease PWM
 553:.\main.c      ****     * desired_count == diff_count :-> wheel is stable; do nothing
 554:.\main.c      ****     */
 555:.\main.c      ****     int correction = desired_count-diff_count;
 1298              		.loc 1 555 0 is_stmt 1
 1299 002e 7A68     		ldr	r2, [r7, #4]
 1300 0030 7B6D     		ldr	r3, [r7, #84]
 1301 0032 D31A     		subs	r3, r2, r3
 1302 0034 3B65     		str	r3, [r7, #80]
 556:.\main.c      ****     
 557:.\main.c      ****     // Apply the speed correction to the appropriate wheel          
 558:.\main.c      ****     if (isLeftWheel){
 1303              		.loc 1 558 0
 1304 0036 3B68     		ldr	r3, [r7]
 1305 0038 002B     		cmp	r3, #0
 1306 003a 03D0     		beq	.L57
 559:.\main.c      ****         changeLeftWheelSpeed(correction);
 1307              		.loc 1 559 0
 1308 003c 386D     		ldr	r0, [r7, #80]
 1309 003e FFF7FEFF 		bl	changeLeftWheelSpeed
 1310 0042 02E0     		b	.L58
 1311              	.L57:
 560:.\main.c      ****     }
 561:.\main.c      ****     else{
 562:.\main.c      ****         changeRightWheelSpeed(correction);
 1312              		.loc 1 562 0
 1313 0044 386D     		ldr	r0, [r7, #80]
 1314 0046 FFF7FEFF 		bl	changeRightWheelSpeed
 1315              	.L58:
 563:.\main.c      ****     }
 564:.\main.c      ****     
 565:.\main.c      ****     return;
 1316              		.loc 1 565 0 discriminator 3
 1317 004a 00BF     		nop
 1318              	.L53:
 566:.\main.c      **** }
 1319              		.loc 1 566 0
 1320 004c 5837     		adds	r7, r7, #88
 1321              		.cfi_def_cfa_offset 8
 1322 004e BD46     		mov	sp, r7
 1323              		.cfi_def_cfa_register 13
 1324              		@ sp needed
 1325 0050 80BD     		pop	{r7, pc}
 1326              		.cfi_endproc
 1327              	.LFE73:
 1328              		.size	correctSpeed, .-correctSpeed
 1329 0052 00BF     		.section	.text.setWheelDirection,"ax",%progbits
 1330              		.align	2
 1331              		.global	setWheelDirection
 1332              		.thumb
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 35


 1333              		.thumb_func
 1334              		.type	setWheelDirection, %function
 1335              	setWheelDirection:
 1336              	.LFB74:
 567:.\main.c      **** 
 568:.\main.c      **** /* Set wheel direction explicitly
 569:.\main.c      **** * Parameters are boolean, UNKNOWN can be passed
 570:.\main.c      **** * in if you wish the value to be unchanged
 571:.\main.c      **** */
 572:.\main.c      **** void setWheelDirection(int leftIsForward, int rightIsForward){
 1337              		.loc 1 572 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 8
 1340              		@ frame_needed = 1, uses_anonymous_args = 0
 1341 0000 80B5     		push	{r7, lr}
 1342              		.cfi_def_cfa_offset 8
 1343              		.cfi_offset 7, -8
 1344              		.cfi_offset 14, -4
 1345 0002 82B0     		sub	sp, sp, #8
 1346              		.cfi_def_cfa_offset 16
 1347 0004 00AF     		add	r7, sp, #0
 1348              		.cfi_def_cfa_register 7
 1349 0006 7860     		str	r0, [r7, #4]
 1350 0008 3960     		str	r1, [r7]
 573:.\main.c      ****     INV1_Write(!leftIsForward);
 1351              		.loc 1 573 0
 1352 000a 7B68     		ldr	r3, [r7, #4]
 1353 000c 002B     		cmp	r3, #0
 1354 000e 0CBF     		ite	eq
 1355 0010 0123     		moveq	r3, #1
 1356 0012 0023     		movne	r3, #0
 1357 0014 DBB2     		uxtb	r3, r3
 1358 0016 1846     		mov	r0, r3
 1359 0018 FFF7FEFF 		bl	INV1_Write
 574:.\main.c      ****     INV2_Write(rightIsForward);
 1360              		.loc 1 574 0
 1361 001c 3B68     		ldr	r3, [r7]
 1362 001e DBB2     		uxtb	r3, r3
 1363 0020 1846     		mov	r0, r3
 1364 0022 FFF7FEFF 		bl	INV2_Write
 575:.\main.c      **** }
 1365              		.loc 1 575 0
 1366 0026 0837     		adds	r7, r7, #8
 1367              		.cfi_def_cfa_offset 8
 1368 0028 BD46     		mov	sp, r7
 1369              		.cfi_def_cfa_register 13
 1370              		@ sp needed
 1371 002a 80BD     		pop	{r7, pc}
 1372              		.cfi_endproc
 1373              	.LFE74:
 1374              		.size	setWheelDirection, .-setWheelDirection
 1375              		.section	.text.turnLeft,"ax",%progbits
 1376              		.align	2
 1377              		.global	turnLeft
 1378              		.thumb
 1379              		.thumb_func
 1380              		.type	turnLeft, %function
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 36


 1381              	turnLeft:
 1382              	.LFB75:
 576:.\main.c      **** 
 577:.\main.c      **** void turnLeft() {
 1383              		.loc 1 577 0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 1, uses_anonymous_args = 0
 1387 0000 80B5     		push	{r7, lr}
 1388              		.cfi_def_cfa_offset 8
 1389              		.cfi_offset 7, -8
 1390              		.cfi_offset 14, -4
 1391 0002 00AF     		add	r7, sp, #0
 1392              		.cfi_def_cfa_register 7
 578:.\main.c      ****     PWM_1_WriteCompare(0);
 1393              		.loc 1 578 0
 1394 0004 0020     		movs	r0, #0
 1395 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 579:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1396              		.loc 1 579 0
 1397 000a 4FF4E170 		mov	r0, #450
 1398 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 580:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1399              		.loc 1 580 0
 1400 0012 08E0     		b	.L62
 1401              	.L63:
 581:.\main.c      ****         if (adc_flag) {
 1402              		.loc 1 581 0
 1403 0014 084B     		ldr	r3, .L64
 1404 0016 1B68     		ldr	r3, [r3]
 1405 0018 002B     		cmp	r3, #0
 1406 001a 04D0     		beq	.L62
 582:.\main.c      ****             updateSensorValues();
 1407              		.loc 1 582 0
 1408 001c FFF7FEFF 		bl	updateSensorValues
 583:.\main.c      ****             adc_flag = FALSE;
 1409              		.loc 1 583 0
 1410 0020 054B     		ldr	r3, .L64
 1411 0022 0022     		movs	r2, #0
 1412 0024 1A60     		str	r2, [r3]
 1413              	.L62:
 580:.\main.c      ****         if (adc_flag) {
 1414              		.loc 1 580 0
 1415 0026 054B     		ldr	r3, .L64+4
 1416 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1417 002a 002B     		cmp	r3, #0
 1418 002c F2D0     		beq	.L63
 584:.\main.c      ****         }
 585:.\main.c      ****     }
 586:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1419              		.loc 1 586 0
 1420 002e 4FF4E170 		mov	r0, #450
 1421 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
 587:.\main.c      **** }
 1422              		.loc 1 587 0
 1423 0036 80BD     		pop	{r7, pc}
 1424              	.L65:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 37


 1425              		.align	2
 1426              	.L64:
 1427 0038 00000000 		.word	adc_flag
 1428 003c 00000000 		.word	sensor_readings
 1429              		.cfi_endproc
 1430              	.LFE75:
 1431              		.size	turnLeft, .-turnLeft
 1432              		.section	.text.turnRight,"ax",%progbits
 1433              		.align	2
 1434              		.global	turnRight
 1435              		.thumb
 1436              		.thumb_func
 1437              		.type	turnRight, %function
 1438              	turnRight:
 1439              	.LFB76:
 588:.\main.c      **** 
 589:.\main.c      **** void turnRight() {
 1440              		.loc 1 589 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 1, uses_anonymous_args = 0
 1444 0000 80B5     		push	{r7, lr}
 1445              		.cfi_def_cfa_offset 8
 1446              		.cfi_offset 7, -8
 1447              		.cfi_offset 14, -4
 1448 0002 00AF     		add	r7, sp, #0
 1449              		.cfi_def_cfa_register 7
 590:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1450              		.loc 1 590 0
 1451 0004 4FF4E170 		mov	r0, #450
 1452 0008 FFF7FEFF 		bl	PWM_1_WriteCompare
 591:.\main.c      ****     PWM_2_WriteCompare(0);
 1453              		.loc 1 591 0
 1454 000c 0020     		movs	r0, #0
 1455 000e FFF7FEFF 		bl	PWM_2_WriteCompare
 592:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1456              		.loc 1 592 0
 1457 0012 08E0     		b	.L67
 1458              	.L68:
 593:.\main.c      ****         if (adc_flag) {
 1459              		.loc 1 593 0
 1460 0014 084B     		ldr	r3, .L69
 1461 0016 1B68     		ldr	r3, [r3]
 1462 0018 002B     		cmp	r3, #0
 1463 001a 04D0     		beq	.L67
 594:.\main.c      ****             updateSensorValues();
 1464              		.loc 1 594 0
 1465 001c FFF7FEFF 		bl	updateSensorValues
 595:.\main.c      ****             adc_flag = FALSE;
 1466              		.loc 1 595 0
 1467 0020 054B     		ldr	r3, .L69
 1468 0022 0022     		movs	r2, #0
 1469 0024 1A60     		str	r2, [r3]
 1470              	.L67:
 592:.\main.c      ****         if (adc_flag) {
 1471              		.loc 1 592 0
 1472 0026 054B     		ldr	r3, .L69+4
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 38


 1473 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1474 002a 002B     		cmp	r3, #0
 1475 002c F2D0     		beq	.L68
 596:.\main.c      ****         }
 597:.\main.c      ****     }
 598:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1476              		.loc 1 598 0
 1477 002e 4FF4E170 		mov	r0, #450
 1478 0032 FFF7FEFF 		bl	PWM_2_WriteCompare
 599:.\main.c      **** }
 1479              		.loc 1 599 0
 1480 0036 80BD     		pop	{r7, pc}
 1481              	.L70:
 1482              		.align	2
 1483              	.L69:
 1484 0038 00000000 		.word	adc_flag
 1485 003c 00000000 		.word	sensor_readings
 1486              		.cfi_endproc
 1487              	.LFE76:
 1488              		.size	turnRight, .-turnRight
 1489              		.section	.rodata
 1490 0077 00       		.align	2
 1491              	.LC8:
 1492 0078 202D2066 		.ascii	" - forward\015\012\000"
 1492      6F727761 
 1492      72640D0A 
 1492      00
 1493 0085 000000   		.align	2
 1494              	.LC9:
 1495 0088 202D2074 		.ascii	" - turn 45\015\012\000"
 1495      75726E20 
 1495      34350D0A 
 1495      00
 1496 0095 000000   		.align	2
 1497              	.LC10:
 1498 0098 202D2066 		.ascii	" - finish turn\015\012\000"
 1498      696E6973 
 1498      68207475 
 1498      726E0D0A 
 1498      00
 1499 00a9 000000   		.section	.text.sharpTurnLeft,"ax",%progbits
 1500              		.align	2
 1501              		.global	sharpTurnLeft
 1502              		.thumb
 1503              		.thumb_func
 1504              		.type	sharpTurnLeft, %function
 1505              	sharpTurnLeft:
 1506              	.LFB77:
 600:.\main.c      **** 
 601:.\main.c      **** void sharpTurnLeft() {
 1507              		.loc 1 601 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 1, uses_anonymous_args = 0
 1511 0000 80B5     		push	{r7, lr}
 1512              		.cfi_def_cfa_offset 8
 1513              		.cfi_offset 7, -8
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 39


 1514              		.cfi_offset 14, -4
 1515 0002 00AF     		add	r7, sp, #0
 1516              		.cfi_def_cfa_register 7
 602:.\main.c      ****     usbPutString(" - forward\r\n");
 1517              		.loc 1 602 0
 1518 0004 1C48     		ldr	r0, .L76
 1519 0006 FFF7FEFF 		bl	usbPutString
 603:.\main.c      ****     // go until we reach the junction
 604:.\main.c      ****     while (!sensor_readings[BOTTOM_LEFT_SENSOR]) {
 1520              		.loc 1 604 0
 1521 000a 08E0     		b	.L72
 1522              	.L73:
 605:.\main.c      ****         if (adc_flag) {
 1523              		.loc 1 605 0
 1524 000c 1B4B     		ldr	r3, .L76+4
 1525 000e 1B68     		ldr	r3, [r3]
 1526 0010 002B     		cmp	r3, #0
 1527 0012 04D0     		beq	.L72
 606:.\main.c      ****             updateSensorValues();
 1528              		.loc 1 606 0
 1529 0014 FFF7FEFF 		bl	updateSensorValues
 607:.\main.c      ****             adc_flag = FALSE;
 1530              		.loc 1 607 0
 1531 0018 184B     		ldr	r3, .L76+4
 1532 001a 0022     		movs	r2, #0
 1533 001c 1A60     		str	r2, [r3]
 1534              	.L72:
 604:.\main.c      ****         if (adc_flag) {
 1535              		.loc 1 604 0
 1536 001e 184B     		ldr	r3, .L76+8
 1537 0020 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1538 0022 002B     		cmp	r3, #0
 1539 0024 F2D0     		beq	.L73
 608:.\main.c      ****         }
 609:.\main.c      ****     }
 610:.\main.c      ****     
 611:.\main.c      ****     usbPutString(" - turn 45\r\n");
 1540              		.loc 1 611 0
 1541 0026 1748     		ldr	r0, .L76+12
 1542 0028 FFF7FEFF 		bl	usbPutString
 612:.\main.c      ****     
 613:.\main.c      ****     // make the turn
 614:.\main.c      ****     setWheelDirection(FALSE, TRUE);
 1543              		.loc 1 614 0
 1544 002c 0020     		movs	r0, #0
 1545 002e 0121     		movs	r1, #1
 1546 0030 FFF7FEFF 		bl	setWheelDirection
 615:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1547              		.loc 1 615 0
 1548 0034 4FF4E170 		mov	r0, #450
 1549 0038 FFF7FEFF 		bl	PWM_1_WriteCompare
 616:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1550              		.loc 1 616 0
 1551 003c 4FF4E170 		mov	r0, #450
 1552 0040 FFF7FEFF 		bl	PWM_2_WriteCompare
 617:.\main.c      ****     
 618:.\main.c      ****     turnForDegrees(45); // so that it doesn't stop if it's already on a line
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 40


 1553              		.loc 1 618 0
 1554 0044 2D20     		movs	r0, #45
 1555 0046 FFF7FEFF 		bl	turnForDegrees
 619:.\main.c      ****     
 620:.\main.c      ****     usbPutString(" - finish turn\r\n");
 1556              		.loc 1 620 0
 1557 004a 0F48     		ldr	r0, .L76+16
 1558 004c FFF7FEFF 		bl	usbPutString
 621:.\main.c      ****     
 622:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1559              		.loc 1 622 0
 1560 0050 08E0     		b	.L74
 1561              	.L75:
 623:.\main.c      ****         if (adc_flag) {
 1562              		.loc 1 623 0
 1563 0052 0A4B     		ldr	r3, .L76+4
 1564 0054 1B68     		ldr	r3, [r3]
 1565 0056 002B     		cmp	r3, #0
 1566 0058 04D0     		beq	.L74
 624:.\main.c      ****             updateSensorValues();
 1567              		.loc 1 624 0
 1568 005a FFF7FEFF 		bl	updateSensorValues
 625:.\main.c      ****             adc_flag = FALSE;
 1569              		.loc 1 625 0
 1570 005e 074B     		ldr	r3, .L76+4
 1571 0060 0022     		movs	r2, #0
 1572 0062 1A60     		str	r2, [r3]
 1573              	.L74:
 622:.\main.c      ****         if (adc_flag) {
 1574              		.loc 1 622 0
 1575 0064 064B     		ldr	r3, .L76+8
 1576 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1577 0068 002B     		cmp	r3, #0
 1578 006a F2D0     		beq	.L75
 626:.\main.c      ****         }
 627:.\main.c      ****     }
 628:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1579              		.loc 1 628 0
 1580 006c 0120     		movs	r0, #1
 1581 006e 0121     		movs	r1, #1
 1582 0070 FFF7FEFF 		bl	setWheelDirection
 629:.\main.c      **** }
 1583              		.loc 1 629 0
 1584 0074 80BD     		pop	{r7, pc}
 1585              	.L77:
 1586 0076 00BF     		.align	2
 1587              	.L76:
 1588 0078 78000000 		.word	.LC8
 1589 007c 00000000 		.word	adc_flag
 1590 0080 00000000 		.word	sensor_readings
 1591 0084 88000000 		.word	.LC9
 1592 0088 98000000 		.word	.LC10
 1593              		.cfi_endproc
 1594              	.LFE77:
 1595              		.size	sharpTurnLeft, .-sharpTurnLeft
 1596              		.section	.text.sharpTurnRight,"ax",%progbits
 1597              		.align	2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 41


 1598              		.global	sharpTurnRight
 1599              		.thumb
 1600              		.thumb_func
 1601              		.type	sharpTurnRight, %function
 1602              	sharpTurnRight:
 1603              	.LFB78:
 630:.\main.c      **** 
 631:.\main.c      **** void sharpTurnRight() {
 1604              		.loc 1 631 0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 0
 1607              		@ frame_needed = 1, uses_anonymous_args = 0
 1608 0000 80B5     		push	{r7, lr}
 1609              		.cfi_def_cfa_offset 8
 1610              		.cfi_offset 7, -8
 1611              		.cfi_offset 14, -4
 1612 0002 00AF     		add	r7, sp, #0
 1613              		.cfi_def_cfa_register 7
 632:.\main.c      ****     usbPutString(" - forward\r\n");
 1614              		.loc 1 632 0
 1615 0004 1C48     		ldr	r0, .L83
 1616 0006 FFF7FEFF 		bl	usbPutString
 633:.\main.c      ****     
 634:.\main.c      ****     // go until we reach the junction
 635:.\main.c      ****     while (!sensor_readings[BOTTOM_RIGHT_SENSOR]) {
 1617              		.loc 1 635 0
 1618 000a 08E0     		b	.L79
 1619              	.L80:
 636:.\main.c      ****         if (adc_flag) {
 1620              		.loc 1 636 0
 1621 000c 1B4B     		ldr	r3, .L83+4
 1622 000e 1B68     		ldr	r3, [r3]
 1623 0010 002B     		cmp	r3, #0
 1624 0012 04D0     		beq	.L79
 637:.\main.c      ****             updateSensorValues();
 1625              		.loc 1 637 0
 1626 0014 FFF7FEFF 		bl	updateSensorValues
 638:.\main.c      ****             adc_flag = FALSE;
 1627              		.loc 1 638 0
 1628 0018 184B     		ldr	r3, .L83+4
 1629 001a 0022     		movs	r2, #0
 1630 001c 1A60     		str	r2, [r3]
 1631              	.L79:
 635:.\main.c      ****         if (adc_flag) {
 1632              		.loc 1 635 0
 1633 001e 184B     		ldr	r3, .L83+8
 1634 0020 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1635 0022 002B     		cmp	r3, #0
 1636 0024 F2D0     		beq	.L80
 639:.\main.c      ****         }
 640:.\main.c      ****     }
 641:.\main.c      ****     
 642:.\main.c      ****     usbPutString(" - turn 45\r\n");
 1637              		.loc 1 642 0
 1638 0026 1748     		ldr	r0, .L83+12
 1639 0028 FFF7FEFF 		bl	usbPutString
 643:.\main.c      ****     
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 42


 644:.\main.c      ****     // make the turn
 645:.\main.c      ****     setWheelDirection(TRUE, FALSE);
 1640              		.loc 1 645 0
 1641 002c 0120     		movs	r0, #1
 1642 002e 0021     		movs	r1, #0
 1643 0030 FFF7FEFF 		bl	setWheelDirection
 646:.\main.c      ****     PWM_1_WriteCompare(TURN_SPEED);
 1644              		.loc 1 646 0
 1645 0034 4FF4E170 		mov	r0, #450
 1646 0038 FFF7FEFF 		bl	PWM_1_WriteCompare
 647:.\main.c      ****     PWM_2_WriteCompare(TURN_SPEED);
 1647              		.loc 1 647 0
 1648 003c 4FF4E170 		mov	r0, #450
 1649 0040 FFF7FEFF 		bl	PWM_2_WriteCompare
 648:.\main.c      ****     
 649:.\main.c      ****     turnForDegrees(45); // so that it doesn't stop if it's already on a line
 1650              		.loc 1 649 0
 1651 0044 2D20     		movs	r0, #45
 1652 0046 FFF7FEFF 		bl	turnForDegrees
 650:.\main.c      ****     
 651:.\main.c      ****     usbPutString(" - finish turn\r\n");
 1653              		.loc 1 651 0
 1654 004a 0F48     		ldr	r0, .L83+16
 1655 004c FFF7FEFF 		bl	usbPutString
 652:.\main.c      ****     
 653:.\main.c      ****     while (!sensor_readings[TOP_MID_SENSOR]) {
 1656              		.loc 1 653 0
 1657 0050 08E0     		b	.L81
 1658              	.L82:
 654:.\main.c      ****         if (adc_flag) {
 1659              		.loc 1 654 0
 1660 0052 0A4B     		ldr	r3, .L83+4
 1661 0054 1B68     		ldr	r3, [r3]
 1662 0056 002B     		cmp	r3, #0
 1663 0058 04D0     		beq	.L81
 655:.\main.c      ****             updateSensorValues();
 1664              		.loc 1 655 0
 1665 005a FFF7FEFF 		bl	updateSensorValues
 656:.\main.c      ****             adc_flag = FALSE;
 1666              		.loc 1 656 0
 1667 005e 074B     		ldr	r3, .L83+4
 1668 0060 0022     		movs	r2, #0
 1669 0062 1A60     		str	r2, [r3]
 1670              	.L81:
 653:.\main.c      ****         if (adc_flag) {
 1671              		.loc 1 653 0
 1672 0064 064B     		ldr	r3, .L83+8
 1673 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1674 0068 002B     		cmp	r3, #0
 1675 006a F2D0     		beq	.L82
 657:.\main.c      ****         }
 658:.\main.c      ****     }
 659:.\main.c      ****     setWheelDirection(TRUE, TRUE);
 1676              		.loc 1 659 0
 1677 006c 0120     		movs	r0, #1
 1678 006e 0121     		movs	r1, #1
 1679 0070 FFF7FEFF 		bl	setWheelDirection
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 43


 660:.\main.c      **** }
 1680              		.loc 1 660 0
 1681 0074 80BD     		pop	{r7, pc}
 1682              	.L84:
 1683 0076 00BF     		.align	2
 1684              	.L83:
 1685 0078 78000000 		.word	.LC8
 1686 007c 00000000 		.word	adc_flag
 1687 0080 00000000 		.word	sensor_readings
 1688 0084 88000000 		.word	.LC9
 1689 0088 98000000 		.word	.LC10
 1690              		.cfi_endproc
 1691              	.LFE78:
 1692              		.size	sharpTurnRight, .-sharpTurnRight
 1693              		.section	.text.usbPutString,"ax",%progbits
 1694              		.align	2
 1695              		.global	usbPutString
 1696              		.thumb
 1697              		.thumb_func
 1698              		.type	usbPutString, %function
 1699              	usbPutString:
 1700              	.LFB79:
 661:.\main.c      **** //* ================== UNUSED FUNCTIONS ======================
 662:.\main.c      **** 
 663:.\main.c      **** /*
 664:.\main.c      **** * Function for performing a 90 degree turn
 665:.\main.c      **** * returns true once finished
 666:.\main.c      **** */
 667:.\main.c      **** //int8 performTurn(int isLeft){
 668:.\main.c      **** //    // Reset decoder measurements
 669:.\main.c      **** //    QuadDec_M1_SetCounter(0);
 670:.\main.c      **** //    QuadDec_M2_SetCounter(0);
 671:.\main.c      **** //    
 672:.\main.c      **** //    int M1_count, M2_count = 0;
 673:.\main.c      **** //    
 674:.\main.c      **** //    // Set PWMs to rotate
 675:.\main.c      **** //    PWM_1_WriteCompare(TURN_PWM_VAL);
 676:.\main.c      **** //    PWM_2_WriteCompare(TURN_PWM_VAL);
 677:.\main.c      **** //    
 678:.\main.c      **** //    // Set wheel direction for rotating on the spot
 679:.\main.c      **** //    if (isLeft){
 680:.\main.c      **** //        // left wheel moves backwarsd, right moves forwards
 681:.\main.c      **** //        setWheelDirection(FALSE, TRUE);}
 682:.\main.c      **** //    else {
 683:.\main.c      **** //        // right wheel moves forwards, left moves backwards
 684:.\main.c      **** //        setWheelDirection(TRUE, FALSE);
 685:.\main.c      **** //    }
 686:.\main.c      **** //    
 687:.\main.c      **** //    while (M1_count < TICKS_FOR_TURN || M2_count < TICKS_FOR_TURN) {
 688:.\main.c      **** //        M1_count = QuadDec_M1_GetCounter();
 689:.\main.c      **** //        M2_count = QuadDec_M2_GetCounter();
 690:.\main.c      **** //    }
 691:.\main.c      **** //    
 692:.\main.c      **** //    PWM_1_WriteCompare(0);
 693:.\main.c      **** //    PWM_2_WriteCompare(0);
 694:.\main.c      **** //    
 695:.\main.c      **** //    return TRUE;
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 44


 696:.\main.c      **** //}
 697:.\main.c      **** 
 698:.\main.c      **** 
 699:.\main.c      **** //* ========================================
 700:.\main.c      **** void usbPutString(char *s)
 701:.\main.c      **** {
 1701              		.loc 1 701 0
 1702              		.cfi_startproc
 1703              		@ args = 0, pretend = 0, frame = 8
 1704              		@ frame_needed = 1, uses_anonymous_args = 0
 1705              		@ link register save eliminated.
 1706 0000 80B4     		push	{r7}
 1707              		.cfi_def_cfa_offset 4
 1708              		.cfi_offset 7, -4
 1709 0002 83B0     		sub	sp, sp, #12
 1710              		.cfi_def_cfa_offset 16
 1711 0004 00AF     		add	r7, sp, #0
 1712              		.cfi_def_cfa_register 7
 1713 0006 7860     		str	r0, [r7, #4]
 702:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
 703:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
 704:.\main.c      **** //  length to 62 char (63rd char is a '!')
 705:.\main.c      ****     
 706:.\main.c      **** #ifdef PUTTY
 707:.\main.c      ****     while (USBUART_CDCIsReady() == 0){ };
 708:.\main.c      ****     USBUART_PutData((uint8 *)s, strlen(s));
 709:.\main.c      **** #endif
 710:.\main.c      ****     (void)s;
 711:.\main.c      ****     return;
 1714              		.loc 1 711 0
 1715 0008 00BF     		nop
 712:.\main.c      **** }
 1716              		.loc 1 712 0
 1717 000a 0C37     		adds	r7, r7, #12
 1718              		.cfi_def_cfa_offset 4
 1719 000c BD46     		mov	sp, r7
 1720              		.cfi_def_cfa_register 13
 1721              		@ sp needed
 1722 000e 5DF8047B 		ldr	r7, [sp], #4
 1723              		.cfi_restore 7
 1724              		.cfi_def_cfa_offset 0
 1725 0012 7047     		bx	lr
 1726              		.cfi_endproc
 1727              	.LFE79:
 1728              		.size	usbPutString, .-usbPutString
 1729              		.text
 1730              	.Letext0:
 1731              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1732              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1733              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1734              		.file 5 ".\\vars.h"
 1735              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1736              		.section	.debug_info,"",%progbits
 1737              	.Ldebug_info0:
 1738 0000 FF070000 		.4byte	0x7ff
 1739 0004 0400     		.2byte	0x4
 1740 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 45


 1741 000a 04       		.byte	0x4
 1742 000b 01       		.uleb128 0x1
 1743 000c 8B020000 		.4byte	.LASF116
 1744 0010 01       		.byte	0x1
 1745 0011 69060000 		.4byte	.LASF117
 1746 0015 32040000 		.4byte	.LASF118
 1747 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1748 001d 00000000 		.4byte	0
 1749 0021 00000000 		.4byte	.Ldebug_line0
 1750 0025 02       		.uleb128 0x2
 1751 0026 01       		.byte	0x1
 1752 0027 06       		.byte	0x6
 1753 0028 E4050000 		.4byte	.LASF0
 1754 002c 02       		.uleb128 0x2
 1755 002d 01       		.byte	0x1
 1756 002e 08       		.byte	0x8
 1757 002f 61050000 		.4byte	.LASF1
 1758 0033 02       		.uleb128 0x2
 1759 0034 02       		.byte	0x2
 1760 0035 05       		.byte	0x5
 1761 0036 C6030000 		.4byte	.LASF2
 1762 003a 02       		.uleb128 0x2
 1763 003b 02       		.byte	0x2
 1764 003c 07       		.byte	0x7
 1765 003d F0050000 		.4byte	.LASF3
 1766 0041 03       		.uleb128 0x3
 1767 0042 5D000000 		.4byte	.LASF11
 1768 0046 02       		.byte	0x2
 1769 0047 3F       		.byte	0x3f
 1770 0048 4C000000 		.4byte	0x4c
 1771 004c 02       		.uleb128 0x2
 1772 004d 04       		.byte	0x4
 1773 004e 05       		.byte	0x5
 1774 004f EF030000 		.4byte	.LASF4
 1775 0053 02       		.uleb128 0x2
 1776 0054 04       		.byte	0x4
 1777 0055 07       		.byte	0x7
 1778 0056 10050000 		.4byte	.LASF5
 1779 005a 02       		.uleb128 0x2
 1780 005b 08       		.byte	0x8
 1781 005c 05       		.byte	0x5
 1782 005d 59020000 		.4byte	.LASF6
 1783 0061 02       		.uleb128 0x2
 1784 0062 08       		.byte	0x8
 1785 0063 07       		.byte	0x7
 1786 0064 5A010000 		.4byte	.LASF7
 1787 0068 04       		.uleb128 0x4
 1788 0069 04       		.byte	0x4
 1789 006a 05       		.byte	0x5
 1790 006b 696E7400 		.ascii	"int\000"
 1791 006f 02       		.uleb128 0x2
 1792 0070 04       		.byte	0x4
 1793 0071 07       		.byte	0x7
 1794 0072 42000000 		.4byte	.LASF8
 1795 0076 02       		.uleb128 0x2
 1796 0077 04       		.byte	0x4
 1797 0078 07       		.byte	0x7
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 46


 1798 0079 FC040000 		.4byte	.LASF9
 1799 007d 05       		.uleb128 0x5
 1800 007e 04       		.byte	0x4
 1801 007f 83000000 		.4byte	0x83
 1802 0083 02       		.uleb128 0x2
 1803 0084 01       		.byte	0x1
 1804 0085 08       		.byte	0x8
 1805 0086 F7010000 		.4byte	.LASF10
 1806 008a 06       		.uleb128 0x6
 1807 008b 83000000 		.4byte	0x83
 1808 008f 9A000000 		.4byte	0x9a
 1809 0093 07       		.uleb128 0x7
 1810 0094 76000000 		.4byte	0x76
 1811 0098 07       		.byte	0x7
 1812 0099 00       		.byte	0
 1813 009a 03       		.uleb128 0x3
 1814 009b 3A050000 		.4byte	.LASF12
 1815 009f 03       		.byte	0x3
 1816 00a0 2C       		.byte	0x2c
 1817 00a1 41000000 		.4byte	0x41
 1818 00a5 08       		.uleb128 0x8
 1819 00a6 31060000 		.4byte	.LASF13
 1820 00aa 04       		.byte	0x4
 1821 00ab 9201     		.2byte	0x192
 1822 00ad 2C000000 		.4byte	0x2c
 1823 00b1 08       		.uleb128 0x8
 1824 00b2 0F020000 		.4byte	.LASF14
 1825 00b6 04       		.byte	0x4
 1826 00b7 9301     		.2byte	0x193
 1827 00b9 3A000000 		.4byte	0x3a
 1828 00bd 08       		.uleb128 0x8
 1829 00be 16020000 		.4byte	.LASF15
 1830 00c2 04       		.byte	0x4
 1831 00c3 9501     		.2byte	0x195
 1832 00c5 25000000 		.4byte	0x25
 1833 00c9 08       		.uleb128 0x8
 1834 00ca 67000000 		.4byte	.LASF16
 1835 00ce 04       		.byte	0x4
 1836 00cf 9601     		.2byte	0x196
 1837 00d1 33000000 		.4byte	0x33
 1838 00d5 08       		.uleb128 0x8
 1839 00d6 27010000 		.4byte	.LASF17
 1840 00da 04       		.byte	0x4
 1841 00db 9701     		.2byte	0x197
 1842 00dd 4C000000 		.4byte	0x4c
 1843 00e1 02       		.uleb128 0x2
 1844 00e2 04       		.byte	0x4
 1845 00e3 04       		.byte	0x4
 1846 00e4 0F010000 		.4byte	.LASF18
 1847 00e8 02       		.uleb128 0x2
 1848 00e9 08       		.byte	0x8
 1849 00ea 04       		.byte	0x4
 1850 00eb 37060000 		.4byte	.LASF19
 1851 00ef 09       		.uleb128 0x9
 1852 00f0 51030000 		.4byte	.LASF119
 1853 00f4 20       		.byte	0x20
 1854 00f5 05       		.byte	0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 47


 1855 00f6 29       		.byte	0x29
 1856 00f7 C8010000 		.4byte	0x1c8
 1857 00fb 0A       		.uleb128 0xa
 1858 00fc 6C030000 		.4byte	.LASF20
 1859 0100 05       		.byte	0x5
 1860 0101 2A       		.byte	0x2a
 1861 0102 BD000000 		.4byte	0xbd
 1862 0106 00       		.byte	0
 1863 0107 0A       		.uleb128 0xa
 1864 0108 33010000 		.4byte	.LASF21
 1865 010c 05       		.byte	0x5
 1866 010d 2B       		.byte	0x2b
 1867 010e A5000000 		.4byte	0xa5
 1868 0112 01       		.byte	0x1
 1869 0113 0A       		.uleb128 0xa
 1870 0114 42050000 		.4byte	.LASF22
 1871 0118 05       		.byte	0x5
 1872 0119 2C       		.byte	0x2c
 1873 011a C9000000 		.4byte	0xc9
 1874 011e 02       		.byte	0x2
 1875 011f 0A       		.uleb128 0xa
 1876 0120 E1010000 		.4byte	.LASF23
 1877 0124 05       		.byte	0x5
 1878 0125 2D       		.byte	0x2d
 1879 0126 C9000000 		.4byte	0xc9
 1880 012a 04       		.byte	0x4
 1881 012b 0A       		.uleb128 0xa
 1882 012c 1A060000 		.4byte	.LASF24
 1883 0130 05       		.byte	0x5
 1884 0131 2E       		.byte	0x2e
 1885 0132 C9000000 		.4byte	0xc9
 1886 0136 06       		.byte	0x6
 1887 0137 0A       		.uleb128 0xa
 1888 0138 49060000 		.4byte	.LASF25
 1889 013c 05       		.byte	0x5
 1890 013d 2F       		.byte	0x2f
 1891 013e C9000000 		.4byte	0xc9
 1892 0142 08       		.byte	0x8
 1893 0143 0A       		.uleb128 0xa
 1894 0144 22030000 		.4byte	.LASF26
 1895 0148 05       		.byte	0x5
 1896 0149 30       		.byte	0x30
 1897 014a C9000000 		.4byte	0xc9
 1898 014e 0A       		.byte	0xa
 1899 014f 0A       		.uleb128 0xa
 1900 0150 06020000 		.4byte	.LASF27
 1901 0154 05       		.byte	0x5
 1902 0155 31       		.byte	0x31
 1903 0156 C9000000 		.4byte	0xc9
 1904 015a 0C       		.byte	0xc
 1905 015b 0A       		.uleb128 0xa
 1906 015c 71030000 		.4byte	.LASF28
 1907 0160 05       		.byte	0x5
 1908 0161 32       		.byte	0x32
 1909 0162 C9000000 		.4byte	0xc9
 1910 0166 0E       		.byte	0xe
 1911 0167 0A       		.uleb128 0xa
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 48


 1912 0168 72020000 		.4byte	.LASF29
 1913 016c 05       		.byte	0x5
 1914 016d 33       		.byte	0x33
 1915 016e C9000000 		.4byte	0xc9
 1916 0172 10       		.byte	0x10
 1917 0173 0A       		.uleb128 0xa
 1918 0174 DE040000 		.4byte	.LASF30
 1919 0178 05       		.byte	0x5
 1920 0179 34       		.byte	0x34
 1921 017a C9000000 		.4byte	0xc9
 1922 017e 12       		.byte	0x12
 1923 017f 0A       		.uleb128 0xa
 1924 0180 60060000 		.4byte	.LASF31
 1925 0184 05       		.byte	0x5
 1926 0185 35       		.byte	0x35
 1927 0186 C9000000 		.4byte	0xc9
 1928 018a 14       		.byte	0x14
 1929 018b 0A       		.uleb128 0xa
 1930 018c 1B020000 		.4byte	.LASF32
 1931 0190 05       		.byte	0x5
 1932 0191 36       		.byte	0x36
 1933 0192 C9000000 		.4byte	0xc9
 1934 0196 16       		.byte	0x16
 1935 0197 0A       		.uleb128 0xa
 1936 0198 90000000 		.4byte	.LASF33
 1937 019c 05       		.byte	0x5
 1938 019d 37       		.byte	0x37
 1939 019e C9000000 		.4byte	0xc9
 1940 01a2 18       		.byte	0x18
 1941 01a3 0A       		.uleb128 0xa
 1942 01a4 18040000 		.4byte	.LASF34
 1943 01a8 05       		.byte	0x5
 1944 01a9 38       		.byte	0x38
 1945 01aa C9000000 		.4byte	0xc9
 1946 01ae 1A       		.byte	0x1a
 1947 01af 0A       		.uleb128 0xa
 1948 01b0 19030000 		.4byte	.LASF35
 1949 01b4 05       		.byte	0x5
 1950 01b5 39       		.byte	0x39
 1951 01b6 C9000000 		.4byte	0xc9
 1952 01ba 1C       		.byte	0x1c
 1953 01bb 0A       		.uleb128 0xa
 1954 01bc 02010000 		.4byte	.LASF36
 1955 01c0 05       		.byte	0x5
 1956 01c1 3A       		.byte	0x3a
 1957 01c2 C9000000 		.4byte	0xc9
 1958 01c6 1E       		.byte	0x1e
 1959 01c7 00       		.byte	0
 1960 01c8 0B       		.uleb128 0xb
 1961 01c9 29000000 		.4byte	.LASF46
 1962 01cd 01       		.byte	0x1
 1963 01ce 01       		.byte	0x1
 1964 01cf 42       		.byte	0x42
 1965 01d0 0B020000 		.4byte	0x20b
 1966 01d4 0C       		.uleb128 0xc
 1967 01d5 52010000 		.4byte	.LASF37
 1968 01d9 00       		.sleb128 0
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 49


 1969 01da 0C       		.uleb128 0xc
 1970 01db 90010000 		.4byte	.LASF38
 1971 01df 01       		.sleb128 1
 1972 01e0 0C       		.uleb128 0xc
 1973 01e1 39030000 		.4byte	.LASF39
 1974 01e5 02       		.sleb128 2
 1975 01e6 0C       		.uleb128 0xc
 1976 01e7 DD000000 		.4byte	.LASF40
 1977 01eb 03       		.sleb128 3
 1978 01ec 0C       		.uleb128 0xc
 1979 01ed BC040000 		.4byte	.LASF41
 1980 01f1 04       		.sleb128 4
 1981 01f2 0C       		.uleb128 0xc
 1982 01f3 0F060000 		.4byte	.LASF42
 1983 01f7 05       		.sleb128 5
 1984 01f8 0C       		.uleb128 0xc
 1985 01f9 E6040000 		.4byte	.LASF43
 1986 01fd 06       		.sleb128 6
 1987 01fe 0C       		.uleb128 0xc
 1988 01ff B3050000 		.4byte	.LASF44
 1989 0203 07       		.sleb128 7
 1990 0204 0C       		.uleb128 0xc
 1991 0205 15000000 		.4byte	.LASF45
 1992 0209 08       		.sleb128 8
 1993 020a 00       		.byte	0
 1994 020b 03       		.uleb128 0x3
 1995 020c 29000000 		.4byte	.LASF46
 1996 0210 01       		.byte	0x1
 1997 0211 4C       		.byte	0x4c
 1998 0212 C8010000 		.4byte	0x1c8
 1999 0216 0D       		.uleb128 0xd
 2000 0217 D2040000 		.4byte	.LASF47
 2001 021b 01       		.byte	0x1
 2002 021c 70       		.byte	0x70
 2003 021d 00000000 		.4byte	.LFB63
 2004 0221 30000000 		.4byte	.LFE63-.LFB63
 2005 0225 01       		.uleb128 0x1
 2006 0226 9C       		.byte	0x9c
 2007 0227 0E       		.uleb128 0xe
 2008 0228 CE050000 		.4byte	.LASF48
 2009 022c 01       		.byte	0x1
 2010 022d 77       		.byte	0x77
 2011 022e 00000000 		.4byte	.LFB64
 2012 0232 18000000 		.4byte	.LFE64-.LFB64
 2013 0236 01       		.uleb128 0x1
 2014 0237 9C       		.byte	0x9c
 2015 0238 0F       		.uleb128 0xf
 2016 0239 2C060000 		.4byte	.LASF56
 2017 023d 01       		.byte	0x1
 2018 023e 8C       		.byte	0x8c
 2019 023f 68000000 		.4byte	0x68
 2020 0243 00000000 		.4byte	.LFB65
 2021 0247 40010000 		.4byte	.LFE65-.LFB65
 2022 024b 01       		.uleb128 0x1
 2023 024c 9C       		.byte	0x9c
 2024 024d C9020000 		.4byte	0x2c9
 2025 0251 10       		.uleb128 0x10
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 50


 2026 0252 20040000 		.4byte	.LASF49
 2027 0256 01       		.byte	0x1
 2028 0257 B2       		.byte	0xb2
 2029 0258 68000000 		.4byte	0x68
 2030 025c 02       		.uleb128 0x2
 2031 025d 91       		.byte	0x91
 2032 025e 64       		.sleb128 -28
 2033 025f 10       		.uleb128 0x10
 2034 0260 D0010000 		.4byte	.LASF50
 2035 0264 01       		.byte	0x1
 2036 0265 B3       		.byte	0xb3
 2037 0266 68000000 		.4byte	0x68
 2038 026a 02       		.uleb128 0x2
 2039 026b 91       		.byte	0x91
 2040 026c 60       		.sleb128 -32
 2041 026d 10       		.uleb128 0x10
 2042 026e 2C050000 		.4byte	.LASF51
 2043 0272 01       		.byte	0x1
 2044 0273 B4       		.byte	0xb4
 2045 0274 68000000 		.4byte	0x68
 2046 0278 02       		.uleb128 0x2
 2047 0279 91       		.byte	0x91
 2048 027a 70       		.sleb128 -16
 2049 027b 11       		.uleb128 0x11
 2050 027c C8050000 		.4byte	.LASF120
 2051 0280 01       		.byte	0x1
 2052 0281 B6       		.byte	0xb6
 2053 0282 0B020000 		.4byte	0x20b
 2054 0286 10       		.uleb128 0x10
 2055 0287 67020000 		.4byte	.LASF52
 2056 028b 01       		.byte	0x1
 2057 028c B7       		.byte	0xb7
 2058 028d 0B020000 		.4byte	0x20b
 2059 0291 02       		.uleb128 0x2
 2060 0292 91       		.byte	0x91
 2061 0293 6F       		.sleb128 -17
 2062 0294 10       		.uleb128 0x10
 2063 0295 F7000000 		.4byte	.LASF53
 2064 0299 01       		.byte	0x1
 2065 029a B9       		.byte	0xb9
 2066 029b 8A000000 		.4byte	0x8a
 2067 029f 02       		.uleb128 0x2
 2068 02a0 91       		.byte	0x91
 2069 02a1 58       		.sleb128 -40
 2070 02a2 10       		.uleb128 0x10
 2071 02a3 9C050000 		.4byte	.LASF54
 2072 02a7 01       		.byte	0x1
 2073 02a8 BB       		.byte	0xbb
 2074 02a9 68000000 		.4byte	0x68
 2075 02ad 02       		.uleb128 0x2
 2076 02ae 91       		.byte	0x91
 2077 02af 74       		.sleb128 -12
 2078 02b0 12       		.uleb128 0x12
 2079 02b1 CC000000 		.4byte	.LBB2
 2080 02b5 32000000 		.4byte	.LBE2-.LBB2
 2081 02b9 10       		.uleb128 0x10
 2082 02ba 7E030000 		.4byte	.LASF55
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 51


 2083 02be 01       		.byte	0x1
 2084 02bf C6       		.byte	0xc6
 2085 02c0 68000000 		.4byte	0x68
 2086 02c4 02       		.uleb128 0x2
 2087 02c5 91       		.byte	0x91
 2088 02c6 68       		.sleb128 -24
 2089 02c7 00       		.byte	0
 2090 02c8 00       		.byte	0
 2091 02c9 13       		.uleb128 0x13
 2092 02ca 3E060000 		.4byte	.LASF57
 2093 02ce 01       		.byte	0x1
 2094 02cf 7F01     		.2byte	0x17f
 2095 02d1 00000000 		.4byte	.LFB66
 2096 02d5 00020000 		.4byte	.LFE66-.LFB66
 2097 02d9 01       		.uleb128 0x1
 2098 02da 9C       		.byte	0x9c
 2099 02db 2B030000 		.4byte	0x32b
 2100 02df 14       		.uleb128 0x14
 2101 02e0 31020000 		.4byte	.LASF58
 2102 02e4 01       		.byte	0x1
 2103 02e5 7F01     		.2byte	0x17f
 2104 02e7 68000000 		.4byte	0x68
 2105 02eb 02       		.uleb128 0x2
 2106 02ec 91       		.byte	0x91
 2107 02ed 4C       		.sleb128 -52
 2108 02ee 14       		.uleb128 0x14
 2109 02ef 20040000 		.4byte	.LASF49
 2110 02f3 01       		.byte	0x1
 2111 02f4 7F01     		.2byte	0x17f
 2112 02f6 2B030000 		.4byte	0x32b
 2113 02fa 02       		.uleb128 0x2
 2114 02fb 91       		.byte	0x91
 2115 02fc 48       		.sleb128 -56
 2116 02fd 14       		.uleb128 0x14
 2117 02fe D0010000 		.4byte	.LASF50
 2118 0302 01       		.byte	0x1
 2119 0303 7F01     		.2byte	0x17f
 2120 0305 2B030000 		.4byte	0x32b
 2121 0309 02       		.uleb128 0x2
 2122 030a 91       		.byte	0x91
 2123 030b 44       		.sleb128 -60
 2124 030c 15       		.uleb128 0x15
 2125 030d 62756600 		.ascii	"buf\000"
 2126 0311 01       		.byte	0x1
 2127 0312 8101     		.2byte	0x181
 2128 0314 31030000 		.4byte	0x331
 2129 0318 02       		.uleb128 0x2
 2130 0319 91       		.byte	0x91
 2131 031a 54       		.sleb128 -44
 2132 031b 16       		.uleb128 0x16
 2133 031c 0F040000 		.4byte	.LASF59
 2134 0320 01       		.byte	0x1
 2135 0321 8B01     		.2byte	0x18b
 2136 0323 E1000000 		.4byte	0xe1
 2137 0327 02       		.uleb128 0x2
 2138 0328 91       		.byte	0x91
 2139 0329 74       		.sleb128 -12
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 52


 2140 032a 00       		.byte	0
 2141 032b 05       		.uleb128 0x5
 2142 032c 04       		.byte	0x4
 2143 032d 68000000 		.4byte	0x68
 2144 0331 06       		.uleb128 0x6
 2145 0332 83000000 		.4byte	0x83
 2146 0336 41030000 		.4byte	0x341
 2147 033a 07       		.uleb128 0x7
 2148 033b 76000000 		.4byte	0x76
 2149 033f 1F       		.byte	0x1f
 2150 0340 00       		.byte	0
 2151 0341 17       		.uleb128 0x17
 2152 0342 F0040000 		.4byte	.LASF68
 2153 0346 01       		.byte	0x1
 2154 0347 CF01     		.2byte	0x1cf
 2155 0349 E1000000 		.4byte	0xe1
 2156 034d 00000000 		.4byte	.LFB67
 2157 0351 CC000000 		.4byte	.LFE67-.LFB67
 2158 0355 01       		.uleb128 0x1
 2159 0356 9C       		.byte	0x9c
 2160 0357 98030000 		.4byte	0x398
 2161 035b 14       		.uleb128 0x14
 2162 035c 89030000 		.4byte	.LASF60
 2163 0360 01       		.byte	0x1
 2164 0361 CF01     		.2byte	0x1cf
 2165 0363 68000000 		.4byte	0x68
 2166 0367 02       		.uleb128 0x2
 2167 0368 91       		.byte	0x91
 2168 0369 6C       		.sleb128 -20
 2169 036a 14       		.uleb128 0x14
 2170 036b 95030000 		.4byte	.LASF61
 2171 036f 01       		.byte	0x1
 2172 0370 CF01     		.2byte	0x1cf
 2173 0372 68000000 		.4byte	0x68
 2174 0376 02       		.uleb128 0x2
 2175 0377 91       		.byte	0x91
 2176 0378 68       		.sleb128 -24
 2177 0379 16       		.uleb128 0x16
 2178 037a 6F050000 		.4byte	.LASF62
 2179 037e 01       		.byte	0x1
 2180 037f D001     		.2byte	0x1d0
 2181 0381 E1000000 		.4byte	0xe1
 2182 0385 02       		.uleb128 0x2
 2183 0386 91       		.byte	0x91
 2184 0387 74       		.sleb128 -12
 2185 0388 16       		.uleb128 0x16
 2186 0389 42020000 		.4byte	.LASF63
 2187 038d 01       		.byte	0x1
 2188 038e D101     		.2byte	0x1d1
 2189 0390 E1000000 		.4byte	0xe1
 2190 0394 02       		.uleb128 0x2
 2191 0395 91       		.byte	0x91
 2192 0396 70       		.sleb128 -16
 2193 0397 00       		.byte	0
 2194 0398 13       		.uleb128 0x13
 2195 0399 E0030000 		.4byte	.LASF64
 2196 039d 01       		.byte	0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 53


 2197 039e D501     		.2byte	0x1d5
 2198 03a0 00000000 		.4byte	.LFB68
 2199 03a4 98000000 		.4byte	.LFE68-.LFB68
 2200 03a8 01       		.uleb128 0x1
 2201 03a9 9C       		.byte	0x9c
 2202 03aa DC030000 		.4byte	0x3dc
 2203 03ae 14       		.uleb128 0x14
 2204 03af 1A000000 		.4byte	.LASF65
 2205 03b3 01       		.byte	0x1
 2206 03b4 D501     		.2byte	0x1d5
 2207 03b6 68000000 		.4byte	0x68
 2208 03ba 02       		.uleb128 0x2
 2209 03bb 91       		.byte	0x91
 2210 03bc 6C       		.sleb128 -20
 2211 03bd 16       		.uleb128 0x16
 2212 03be 7A020000 		.4byte	.LASF66
 2213 03c2 01       		.byte	0x1
 2214 03c3 D601     		.2byte	0x1d6
 2215 03c5 E1000000 		.4byte	0xe1
 2216 03c9 02       		.uleb128 0x2
 2217 03ca 91       		.byte	0x91
 2218 03cb 70       		.sleb128 -16
 2219 03cc 16       		.uleb128 0x16
 2220 03cd A3000000 		.4byte	.LASF67
 2221 03d1 01       		.byte	0x1
 2222 03d2 D701     		.2byte	0x1d7
 2223 03d4 E1000000 		.4byte	0xe1
 2224 03d8 02       		.uleb128 0x2
 2225 03d9 91       		.byte	0x91
 2226 03da 74       		.sleb128 -12
 2227 03db 00       		.byte	0
 2228 03dc 17       		.uleb128 0x17
 2229 03dd 5B030000 		.4byte	.LASF69
 2230 03e1 01       		.byte	0x1
 2231 03e2 F101     		.2byte	0x1f1
 2232 03e4 D5000000 		.4byte	0xd5
 2233 03e8 00000000 		.4byte	.LFB69
 2234 03ec 24000000 		.4byte	.LFE69-.LFB69
 2235 03f0 01       		.uleb128 0x1
 2236 03f1 9C       		.byte	0x9c
 2237 03f2 04040000 		.4byte	0x404
 2238 03f6 18       		.uleb128 0x18
 2239 03f7 6E00     		.ascii	"n\000"
 2240 03f9 01       		.byte	0x1
 2241 03fa F101     		.2byte	0x1f1
 2242 03fc C9000000 		.4byte	0xc9
 2243 0400 02       		.uleb128 0x2
 2244 0401 91       		.byte	0x91
 2245 0402 76       		.sleb128 -10
 2246 0403 00       		.byte	0
 2247 0404 19       		.uleb128 0x19
 2248 0405 7D010000 		.4byte	.LASF121
 2249 0409 01       		.byte	0x1
 2250 040a F501     		.2byte	0x1f5
 2251 040c 00000000 		.4byte	.LFB70
 2252 0410 B4000000 		.4byte	.LFE70-.LFB70
 2253 0414 01       		.uleb128 0x1
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 54


 2254 0415 9C       		.byte	0x9c
 2255 0416 41040000 		.4byte	0x441
 2256 041a 15       		.uleb128 0x15
 2257 041b 6900     		.ascii	"i\000"
 2258 041d 01       		.byte	0x1
 2259 041e F701     		.2byte	0x1f7
 2260 0420 68000000 		.4byte	0x68
 2261 0424 02       		.uleb128 0x2
 2262 0425 91       		.byte	0x91
 2263 0426 74       		.sleb128 -12
 2264 0427 12       		.uleb128 0x12
 2265 0428 0C000000 		.4byte	.LBB3
 2266 042c 26000000 		.4byte	.LBE3-.LBB3
 2267 0430 16       		.uleb128 0x16
 2268 0431 00000000 		.4byte	.LASF70
 2269 0435 01       		.byte	0x1
 2270 0436 F901     		.2byte	0x1f9
 2271 0438 68000000 		.4byte	0x68
 2272 043c 02       		.uleb128 0x2
 2273 043d 91       		.byte	0x91
 2274 043e 70       		.sleb128 -16
 2275 043f 00       		.byte	0
 2276 0440 00       		.byte	0
 2277 0441 13       		.uleb128 0x13
 2278 0442 7C050000 		.4byte	.LASF71
 2279 0446 01       		.byte	0x1
 2280 0447 0C02     		.2byte	0x20c
 2281 0449 00000000 		.4byte	.LFB71
 2282 044d 2A000000 		.4byte	.LFE71-.LFB71
 2283 0451 01       		.uleb128 0x1
 2284 0452 9C       		.byte	0x9c
 2285 0453 76040000 		.4byte	0x476
 2286 0457 14       		.uleb128 0x14
 2287 0458 22000000 		.4byte	.LASF72
 2288 045c 01       		.byte	0x1
 2289 045d 0C02     		.2byte	0x20c
 2290 045f 68000000 		.4byte	0x68
 2291 0463 02       		.uleb128 0x2
 2292 0464 91       		.byte	0x91
 2293 0465 6C       		.sleb128 -20
 2294 0466 16       		.uleb128 0x16
 2295 0467 47030000 		.4byte	.LASF73
 2296 046b 01       		.byte	0x1
 2297 046c 0D02     		.2byte	0x20d
 2298 046e 68000000 		.4byte	0x68
 2299 0472 02       		.uleb128 0x2
 2300 0473 91       		.byte	0x91
 2301 0474 74       		.sleb128 -12
 2302 0475 00       		.byte	0
 2303 0476 13       		.uleb128 0x13
 2304 0477 7A000000 		.4byte	.LASF74
 2305 047b 01       		.byte	0x1
 2306 047c 1102     		.2byte	0x211
 2307 047e 00000000 		.4byte	.LFB72
 2308 0482 2A000000 		.4byte	.LFE72-.LFB72
 2309 0486 01       		.uleb128 0x1
 2310 0487 9C       		.byte	0x9c
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 55


 2311 0488 AB040000 		.4byte	0x4ab
 2312 048c 14       		.uleb128 0x14
 2313 048d 22000000 		.4byte	.LASF72
 2314 0491 01       		.byte	0x1
 2315 0492 1102     		.2byte	0x211
 2316 0494 68000000 		.4byte	0x68
 2317 0498 02       		.uleb128 0x2
 2318 0499 91       		.byte	0x91
 2319 049a 6C       		.sleb128 -20
 2320 049b 16       		.uleb128 0x16
 2321 049c 47030000 		.4byte	.LASF73
 2322 04a0 01       		.byte	0x1
 2323 04a1 1202     		.2byte	0x212
 2324 04a3 68000000 		.4byte	0x68
 2325 04a7 02       		.uleb128 0x2
 2326 04a8 91       		.byte	0x91
 2327 04a9 74       		.sleb128 -12
 2328 04aa 00       		.byte	0
 2329 04ab 13       		.uleb128 0x13
 2330 04ac 08000000 		.4byte	.LASF75
 2331 04b0 01       		.byte	0x1
 2332 04b1 1A02     		.2byte	0x21a
 2333 04b3 00000000 		.4byte	.LFB73
 2334 04b7 52000000 		.4byte	.LFE73-.LFB73
 2335 04bb 01       		.uleb128 0x1
 2336 04bc 9C       		.byte	0x9c
 2337 04bd 30050000 		.4byte	0x530
 2338 04c1 14       		.uleb128 0x14
 2339 04c2 22050000 		.4byte	.LASF76
 2340 04c6 01       		.byte	0x1
 2341 04c7 1A02     		.2byte	0x21a
 2342 04c9 68000000 		.4byte	0x68
 2343 04cd 03       		.uleb128 0x3
 2344 04ce 91       		.byte	0x91
 2345 04cf AC7F     		.sleb128 -84
 2346 04d1 14       		.uleb128 0x14
 2347 04d2 2D010000 		.4byte	.LASF77
 2348 04d6 01       		.byte	0x1
 2349 04d7 1A02     		.2byte	0x21a
 2350 04d9 68000000 		.4byte	0x68
 2351 04dd 03       		.uleb128 0x3
 2352 04de 91       		.byte	0x91
 2353 04df A87F     		.sleb128 -88
 2354 04e1 14       		.uleb128 0x14
 2355 04e2 4F000000 		.4byte	.LASF78
 2356 04e6 01       		.byte	0x1
 2357 04e7 1A02     		.2byte	0x21a
 2358 04e9 68000000 		.4byte	0x68
 2359 04ed 03       		.uleb128 0x3
 2360 04ee 91       		.byte	0x91
 2361 04ef A47F     		.sleb128 -92
 2362 04f1 14       		.uleb128 0x14
 2363 04f2 03060000 		.4byte	.LASF79
 2364 04f6 01       		.byte	0x1
 2365 04f7 1A02     		.2byte	0x21a
 2366 04f9 68000000 		.4byte	0x68
 2367 04fd 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 56


 2368 04fe 91       		.byte	0x91
 2369 04ff A07F     		.sleb128 -96
 2370 0501 16       		.uleb128 0x16
 2371 0502 05050000 		.4byte	.LASF80
 2372 0506 01       		.byte	0x1
 2373 0507 1F02     		.2byte	0x21f
 2374 0509 68000000 		.4byte	0x68
 2375 050d 02       		.uleb128 0x2
 2376 050e 91       		.byte	0x91
 2377 050f 74       		.sleb128 -12
 2378 0510 15       		.uleb128 0x15
 2379 0511 6D736700 		.ascii	"msg\000"
 2380 0515 01       		.byte	0x1
 2381 0516 2402     		.2byte	0x224
 2382 0518 30050000 		.4byte	0x530
 2383 051c 03       		.uleb128 0x3
 2384 051d 91       		.byte	0x91
 2385 051e B07F     		.sleb128 -80
 2386 0520 16       		.uleb128 0x16
 2387 0521 98000000 		.4byte	.LASF81
 2388 0525 01       		.byte	0x1
 2389 0526 2B02     		.2byte	0x22b
 2390 0528 68000000 		.4byte	0x68
 2391 052c 02       		.uleb128 0x2
 2392 052d 91       		.byte	0x91
 2393 052e 70       		.sleb128 -16
 2394 052f 00       		.byte	0
 2395 0530 06       		.uleb128 0x6
 2396 0531 83000000 		.4byte	0x83
 2397 0535 40050000 		.4byte	0x540
 2398 0539 07       		.uleb128 0x7
 2399 053a 76000000 		.4byte	0x76
 2400 053e 3F       		.byte	0x3f
 2401 053f 00       		.byte	0
 2402 0540 13       		.uleb128 0x13
 2403 0541 15010000 		.4byte	.LASF82
 2404 0545 01       		.byte	0x1
 2405 0546 3C02     		.2byte	0x23c
 2406 0548 00000000 		.4byte	.LFB74
 2407 054c 2C000000 		.4byte	.LFE74-.LFB74
 2408 0550 01       		.uleb128 0x1
 2409 0551 9C       		.byte	0x9c
 2410 0552 75050000 		.4byte	0x575
 2411 0556 14       		.uleb128 0x14
 2412 0557 53050000 		.4byte	.LASF83
 2413 055b 01       		.byte	0x1
 2414 055c 3C02     		.2byte	0x23c
 2415 055e 68000000 		.4byte	0x68
 2416 0562 02       		.uleb128 0x2
 2417 0563 91       		.byte	0x91
 2418 0564 74       		.sleb128 -12
 2419 0565 14       		.uleb128 0x14
 2420 0566 4A020000 		.4byte	.LASF84
 2421 056a 01       		.byte	0x1
 2422 056b 3C02     		.2byte	0x23c
 2423 056d 68000000 		.4byte	0x68
 2424 0571 02       		.uleb128 0x2
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 57


 2425 0572 91       		.byte	0x91
 2426 0573 70       		.sleb128 -16
 2427 0574 00       		.byte	0
 2428 0575 1A       		.uleb128 0x1a
 2429 0576 49010000 		.4byte	.LASF85
 2430 057a 01       		.byte	0x1
 2431 057b 4102     		.2byte	0x241
 2432 057d 00000000 		.4byte	.LFB75
 2433 0581 40000000 		.4byte	.LFE75-.LFB75
 2434 0585 01       		.uleb128 0x1
 2435 0586 9C       		.byte	0x9c
 2436 0587 1A       		.uleb128 0x1a
 2437 0588 C8040000 		.4byte	.LASF86
 2438 058c 01       		.byte	0x1
 2439 058d 4D02     		.2byte	0x24d
 2440 058f 00000000 		.4byte	.LFB76
 2441 0593 40000000 		.4byte	.LFE76-.LFB76
 2442 0597 01       		.uleb128 0x1
 2443 0598 9C       		.byte	0x9c
 2444 0599 1A       		.uleb128 0x1a
 2445 059a B3000000 		.4byte	.LASF87
 2446 059e 01       		.byte	0x1
 2447 059f 5902     		.2byte	0x259
 2448 05a1 00000000 		.4byte	.LFB77
 2449 05a5 8C000000 		.4byte	.LFE77-.LFB77
 2450 05a9 01       		.uleb128 0x1
 2451 05aa 9C       		.byte	0x9c
 2452 05ab 1A       		.uleb128 0x1a
 2453 05ac 2A030000 		.4byte	.LASF88
 2454 05b0 01       		.byte	0x1
 2455 05b1 7702     		.2byte	0x277
 2456 05b3 00000000 		.4byte	.LFB78
 2457 05b7 8C000000 		.4byte	.LFE78-.LFB78
 2458 05bb 01       		.uleb128 0x1
 2459 05bc 9C       		.byte	0x9c
 2460 05bd 1B       		.uleb128 0x1b
 2461 05be EA000000 		.4byte	.LASF89
 2462 05c2 01       		.byte	0x1
 2463 05c3 BC02     		.2byte	0x2bc
 2464 05c5 00000000 		.4byte	.LFB79
 2465 05c9 14000000 		.4byte	.LFE79-.LFB79
 2466 05cd 01       		.uleb128 0x1
 2467 05ce 9C       		.byte	0x9c
 2468 05cf E1050000 		.4byte	0x5e1
 2469 05d3 18       		.uleb128 0x18
 2470 05d4 7300     		.ascii	"s\000"
 2471 05d6 01       		.byte	0x1
 2472 05d7 BC02     		.2byte	0x2bc
 2473 05d9 7D000000 		.4byte	0x7d
 2474 05dd 02       		.uleb128 0x2
 2475 05de 91       		.byte	0x91
 2476 05df 74       		.sleb128 -12
 2477 05e0 00       		.byte	0
 2478 05e1 1C       		.uleb128 0x1c
 2479 05e2 F8030000 		.4byte	.LASF90
 2480 05e6 06       		.byte	0x6
 2481 05e7 9606     		.2byte	0x696
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 58


 2482 05e9 ED050000 		.4byte	0x5ed
 2483 05ed 1D       		.uleb128 0x1d
 2484 05ee 9A000000 		.4byte	0x9a
 2485 05f2 1E       		.uleb128 0x1e
 2486 05f3 747300   		.ascii	"ts\000"
 2487 05f6 05       		.byte	0x5
 2488 05f7 10       		.byte	0x10
 2489 05f8 A5000000 		.4byte	0xa5
 2490 05fc 05       		.uleb128 0x5
 2491 05fd 03       		.byte	0x3
 2492 05fe 00000000 		.4byte	ts
 2493 0602 1F       		.uleb128 0x1f
 2494 0603 AC050000 		.4byte	.LASF91
 2495 0607 05       		.byte	0x5
 2496 0608 11       		.byte	0x11
 2497 0609 B1000000 		.4byte	0xb1
 2498 060d 05       		.uleb128 0x5
 2499 060e 03       		.byte	0x3
 2500 060f 00000000 		.4byte	ts_enc
 2501 0613 1F       		.uleb128 0x1f
 2502 0614 05040000 		.4byte	.LASF92
 2503 0618 05       		.byte	0x5
 2504 0619 12       		.byte	0x12
 2505 061a B1000000 		.4byte	0xb1
 2506 061e 05       		.uleb128 0x5
 2507 061f 03       		.byte	0x3
 2508 0620 00000000 		.4byte	ts_update
 2509 0624 1F       		.uleb128 0x1f
 2510 0625 C7010000 		.4byte	.LASF93
 2511 0629 05       		.byte	0x5
 2512 062a 13       		.byte	0x13
 2513 062b B1000000 		.4byte	0xb1
 2514 062f 05       		.uleb128 0x5
 2515 0630 03       		.byte	0x3
 2516 0631 00000000 		.4byte	ts_speed
 2517 0635 1F       		.uleb128 0x1f
 2518 0636 EC010000 		.4byte	.LASF94
 2519 063a 05       		.byte	0x5
 2520 063b 14       		.byte	0x14
 2521 063c B1000000 		.4byte	0xb1
 2522 0640 05       		.uleb128 0x5
 2523 0641 03       		.byte	0x3
 2524 0642 00000000 		.4byte	ts_display
 2525 0646 1F       		.uleb128 0x1f
 2526 0647 AE010000 		.4byte	.LASF95
 2527 064b 05       		.byte	0x5
 2528 064c 16       		.byte	0x16
 2529 064d A5000000 		.4byte	0xa5
 2530 0651 05       		.uleb128 0x5
 2531 0652 03       		.byte	0x3
 2532 0653 00000000 		.4byte	flag_ts_enc
 2533 0657 1F       		.uleb128 0x1f
 2534 0658 9F010000 		.4byte	.LASF96
 2535 065c 05       		.byte	0x5
 2536 065d 17       		.byte	0x17
 2537 065e A5000000 		.4byte	0xa5
 2538 0662 05       		.uleb128 0x5
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 59


 2539 0663 03       		.byte	0x3
 2540 0664 00000000 		.4byte	flag_ts_update
 2541 0668 1F       		.uleb128 0x1f
 2542 0669 A1030000 		.4byte	.LASF97
 2543 066d 05       		.byte	0x5
 2544 066e 18       		.byte	0x18
 2545 066f A5000000 		.4byte	0xa5
 2546 0673 05       		.uleb128 0x5
 2547 0674 03       		.byte	0x3
 2548 0675 00000000 		.4byte	flag_ts_speed
 2549 0679 1F       		.uleb128 0x1f
 2550 067a B8050000 		.4byte	.LASF98
 2551 067e 05       		.byte	0x5
 2552 067f 19       		.byte	0x19
 2553 0680 A5000000 		.4byte	0xa5
 2554 0684 05       		.uleb128 0x5
 2555 0685 03       		.byte	0x3
 2556 0686 00000000 		.4byte	flag_ts_display
 2557 068a 1F       		.uleb128 0x1f
 2558 068b BE030000 		.4byte	.LASF99
 2559 068f 05       		.byte	0x5
 2560 0690 1C       		.byte	0x1c
 2561 0691 A5000000 		.4byte	0xa5
 2562 0695 05       		.uleb128 0x5
 2563 0696 03       		.byte	0x3
 2564 0697 00000000 		.4byte	flag_rx
 2565 069b 1F       		.uleb128 0x1f
 2566 069c 71010000 		.4byte	.LASF100
 2567 06a0 05       		.byte	0x5
 2568 06a1 1D       		.byte	0x1d
 2569 06a2 A5000000 		.4byte	0xa5
 2570 06a6 05       		.uleb128 0x5
 2571 06a7 03       		.byte	0x3
 2572 06a8 00000000 		.4byte	flag_packet
 2573 06ac 1F       		.uleb128 0x1f
 2574 06ad 51060000 		.4byte	.LASF101
 2575 06b1 05       		.byte	0x5
 2576 06b2 1E       		.byte	0x1e
 2577 06b3 A5000000 		.4byte	0xa5
 2578 06b7 05       		.uleb128 0x5
 2579 06b8 03       		.byte	0x3
 2580 06b9 00000000 		.4byte	flag_KB_string
 2581 06bd 1F       		.uleb128 0x1f
 2582 06be AF030000 		.4byte	.LASF102
 2583 06c2 05       		.byte	0x5
 2584 06c3 20       		.byte	0x20
 2585 06c4 A5000000 		.4byte	0xa5
 2586 06c8 05       		.uleb128 0x5
 2587 06c9 03       		.byte	0x3
 2588 06ca 00000000 		.4byte	dataready_flag
 2589 06ce 1F       		.uleb128 0x1f
 2590 06cf C1000000 		.4byte	.LASF103
 2591 06d3 05       		.byte	0x5
 2592 06d4 22       		.byte	0x22
 2593 06d5 A5000000 		.4byte	0xa5
 2594 06d9 05       		.uleb128 0x5
 2595 06da 03       		.byte	0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 60


 2596 06db 00000000 		.4byte	flag_rf_transmission_active
 2597 06df 1F       		.uleb128 0x1f
 2598 06e0 D6050000 		.4byte	.LASF104
 2599 06e4 05       		.byte	0x5
 2600 06e5 25       		.byte	0x25
 2601 06e6 30050000 		.4byte	0x530
 2602 06ea 05       		.uleb128 0x5
 2603 06eb 03       		.byte	0x3
 2604 06ec 00000000 		.4byte	displaystring
 2605 06f0 1F       		.uleb128 0x1f
 2606 06f1 77050000 		.4byte	.LASF105
 2607 06f5 05       		.byte	0x5
 2608 06f6 26       		.byte	0x26
 2609 06f7 30050000 		.4byte	0x530
 2610 06fb 05       		.uleb128 0x5
 2611 06fc 03       		.byte	0x3
 2612 06fd 00000000 		.4byte	line
 2613 0701 1F       		.uleb128 0x1f
 2614 0702 4D050000 		.4byte	.LASF106
 2615 0706 05       		.byte	0x5
 2616 0707 26       		.byte	0x26
 2617 0708 30050000 		.4byte	0x530
 2618 070c 05       		.uleb128 0x5
 2619 070d 03       		.byte	0x3
 2620 070e 00000000 		.4byte	entry
 2621 0712 06       		.uleb128 0x6
 2622 0713 A5000000 		.4byte	0xa5
 2623 0717 22070000 		.4byte	0x722
 2624 071b 07       		.uleb128 0x7
 2625 071c 76000000 		.4byte	0x76
 2626 0720 3F       		.byte	0x3f
 2627 0721 00       		.byte	0
 2628 0722 1F       		.uleb128 0x1f
 2629 0723 FC010000 		.4byte	.LASF107
 2630 0727 05       		.byte	0x5
 2631 0728 27       		.byte	0x27
 2632 0729 12070000 		.4byte	0x712
 2633 072d 05       		.uleb128 0x5
 2634 072e 03       		.byte	0x3
 2635 072f 00000000 		.4byte	usbBuffer
 2636 0733 1F       		.uleb128 0x1f
 2637 0734 6D000000 		.4byte	.LASF108
 2638 0738 05       		.byte	0x5
 2639 0739 3C       		.byte	0x3c
 2640 073a EF000000 		.4byte	0xef
 2641 073e 05       		.uleb128 0x5
 2642 073f 03       		.byte	0x3
 2643 0740 00000000 		.4byte	system_state
 2644 0744 06       		.uleb128 0x6
 2645 0745 BD000000 		.4byte	0xbd
 2646 0749 54070000 		.4byte	0x754
 2647 074d 07       		.uleb128 0x7
 2648 074e 76000000 		.4byte	0x76
 2649 0752 05       		.byte	0x5
 2650 0753 00       		.byte	0
 2651 0754 1F       		.uleb128 0x1f
 2652 0755 39010000 		.4byte	.LASF109
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 61


 2653 0759 01       		.byte	0x1
 2654 075a 65       		.byte	0x65
 2655 075b 44070000 		.4byte	0x744
 2656 075f 05       		.uleb128 0x5
 2657 0760 03       		.byte	0x3
 2658 0761 00000000 		.4byte	sensor_readings
 2659 0765 1F       		.uleb128 0x1f
 2660 0766 28020000 		.4byte	.LASF110
 2661 076a 01       		.byte	0x1
 2662 076b 66       		.byte	0x66
 2663 076c 76070000 		.4byte	0x776
 2664 0770 05       		.uleb128 0x5
 2665 0771 03       		.byte	0x3
 2666 0772 00000000 		.4byte	adc_flag
 2667 0776 1D       		.uleb128 0x1d
 2668 0777 68000000 		.4byte	0x68
 2669 077b 06       		.uleb128 0x6
 2670 077c 68000000 		.4byte	0x68
 2671 0780 8B070000 		.4byte	0x78b
 2672 0784 07       		.uleb128 0x7
 2673 0785 76000000 		.4byte	0x76
 2674 0789 05       		.byte	0x5
 2675 078a 00       		.byte	0
 2676 078b 1F       		.uleb128 0x1f
 2677 078c BA010000 		.4byte	.LASF111
 2678 0790 01       		.byte	0x1
 2679 0791 67       		.byte	0x67
 2680 0792 7B070000 		.4byte	0x77b
 2681 0796 05       		.uleb128 0x5
 2682 0797 03       		.byte	0x3
 2683 0798 00000000 		.4byte	adc_readings
 2684 079c 1F       		.uleb128 0x1f
 2685 079d 35000000 		.4byte	.LASF112
 2686 07a1 01       		.byte	0x1
 2687 07a2 68       		.byte	0x68
 2688 07a3 68000000 		.4byte	0x68
 2689 07a7 05       		.uleb128 0x5
 2690 07a8 03       		.byte	0x3
 2691 07a9 00000000 		.4byte	sample_count
 2692 07ad 1F       		.uleb128 0x1f
 2693 07ae D0030000 		.4byte	.LASF113
 2694 07b2 01       		.byte	0x1
 2695 07b3 6A       		.byte	0x6a
 2696 07b4 76070000 		.4byte	0x776
 2697 07b8 05       		.uleb128 0x5
 2698 07b9 03       		.byte	0x3
 2699 07ba 00000000 		.4byte	countM1
 2700 07be 1F       		.uleb128 0x1f
 2701 07bf D8030000 		.4byte	.LASF114
 2702 07c3 01       		.byte	0x1
 2703 07c4 6B       		.byte	0x6b
 2704 07c5 76070000 		.4byte	0x776
 2705 07c9 05       		.uleb128 0x5
 2706 07ca 03       		.byte	0x3
 2707 07cb 00000000 		.4byte	countM2
 2708 07cf 1F       		.uleb128 0x1f
 2709 07d0 89030000 		.4byte	.LASF60
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 62


 2710 07d4 01       		.byte	0x1
 2711 07d5 6C       		.byte	0x6c
 2712 07d6 68000000 		.4byte	0x68
 2713 07da 05       		.uleb128 0x5
 2714 07db 03       		.byte	0x3
 2715 07dc 00000000 		.4byte	prevCountM1
 2716 07e0 1F       		.uleb128 0x1f
 2717 07e1 95030000 		.4byte	.LASF61
 2718 07e5 01       		.byte	0x1
 2719 07e6 6D       		.byte	0x6d
 2720 07e7 68000000 		.4byte	0x68
 2721 07eb 05       		.uleb128 0x5
 2722 07ec 03       		.byte	0x3
 2723 07ed 00000000 		.4byte	prevCountM2
 2724 07f1 1F       		.uleb128 0x1f
 2725 07f2 91050000 		.4byte	.LASF115
 2726 07f6 01       		.byte	0x1
 2727 07f7 6E       		.byte	0x6e
 2728 07f8 76070000 		.4byte	0x776
 2729 07fc 05       		.uleb128 0x5
 2730 07fd 03       		.byte	0x3
 2731 07fe 00000000 		.4byte	timer_flag
 2732 0802 00       		.byte	0
 2733              		.section	.debug_abbrev,"",%progbits
 2734              	.Ldebug_abbrev0:
 2735 0000 01       		.uleb128 0x1
 2736 0001 11       		.uleb128 0x11
 2737 0002 01       		.byte	0x1
 2738 0003 25       		.uleb128 0x25
 2739 0004 0E       		.uleb128 0xe
 2740 0005 13       		.uleb128 0x13
 2741 0006 0B       		.uleb128 0xb
 2742 0007 03       		.uleb128 0x3
 2743 0008 0E       		.uleb128 0xe
 2744 0009 1B       		.uleb128 0x1b
 2745 000a 0E       		.uleb128 0xe
 2746 000b 55       		.uleb128 0x55
 2747 000c 17       		.uleb128 0x17
 2748 000d 11       		.uleb128 0x11
 2749 000e 01       		.uleb128 0x1
 2750 000f 10       		.uleb128 0x10
 2751 0010 17       		.uleb128 0x17
 2752 0011 00       		.byte	0
 2753 0012 00       		.byte	0
 2754 0013 02       		.uleb128 0x2
 2755 0014 24       		.uleb128 0x24
 2756 0015 00       		.byte	0
 2757 0016 0B       		.uleb128 0xb
 2758 0017 0B       		.uleb128 0xb
 2759 0018 3E       		.uleb128 0x3e
 2760 0019 0B       		.uleb128 0xb
 2761 001a 03       		.uleb128 0x3
 2762 001b 0E       		.uleb128 0xe
 2763 001c 00       		.byte	0
 2764 001d 00       		.byte	0
 2765 001e 03       		.uleb128 0x3
 2766 001f 16       		.uleb128 0x16
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 63


 2767 0020 00       		.byte	0
 2768 0021 03       		.uleb128 0x3
 2769 0022 0E       		.uleb128 0xe
 2770 0023 3A       		.uleb128 0x3a
 2771 0024 0B       		.uleb128 0xb
 2772 0025 3B       		.uleb128 0x3b
 2773 0026 0B       		.uleb128 0xb
 2774 0027 49       		.uleb128 0x49
 2775 0028 13       		.uleb128 0x13
 2776 0029 00       		.byte	0
 2777 002a 00       		.byte	0
 2778 002b 04       		.uleb128 0x4
 2779 002c 24       		.uleb128 0x24
 2780 002d 00       		.byte	0
 2781 002e 0B       		.uleb128 0xb
 2782 002f 0B       		.uleb128 0xb
 2783 0030 3E       		.uleb128 0x3e
 2784 0031 0B       		.uleb128 0xb
 2785 0032 03       		.uleb128 0x3
 2786 0033 08       		.uleb128 0x8
 2787 0034 00       		.byte	0
 2788 0035 00       		.byte	0
 2789 0036 05       		.uleb128 0x5
 2790 0037 0F       		.uleb128 0xf
 2791 0038 00       		.byte	0
 2792 0039 0B       		.uleb128 0xb
 2793 003a 0B       		.uleb128 0xb
 2794 003b 49       		.uleb128 0x49
 2795 003c 13       		.uleb128 0x13
 2796 003d 00       		.byte	0
 2797 003e 00       		.byte	0
 2798 003f 06       		.uleb128 0x6
 2799 0040 01       		.uleb128 0x1
 2800 0041 01       		.byte	0x1
 2801 0042 49       		.uleb128 0x49
 2802 0043 13       		.uleb128 0x13
 2803 0044 01       		.uleb128 0x1
 2804 0045 13       		.uleb128 0x13
 2805 0046 00       		.byte	0
 2806 0047 00       		.byte	0
 2807 0048 07       		.uleb128 0x7
 2808 0049 21       		.uleb128 0x21
 2809 004a 00       		.byte	0
 2810 004b 49       		.uleb128 0x49
 2811 004c 13       		.uleb128 0x13
 2812 004d 2F       		.uleb128 0x2f
 2813 004e 0B       		.uleb128 0xb
 2814 004f 00       		.byte	0
 2815 0050 00       		.byte	0
 2816 0051 08       		.uleb128 0x8
 2817 0052 16       		.uleb128 0x16
 2818 0053 00       		.byte	0
 2819 0054 03       		.uleb128 0x3
 2820 0055 0E       		.uleb128 0xe
 2821 0056 3A       		.uleb128 0x3a
 2822 0057 0B       		.uleb128 0xb
 2823 0058 3B       		.uleb128 0x3b
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 64


 2824 0059 05       		.uleb128 0x5
 2825 005a 49       		.uleb128 0x49
 2826 005b 13       		.uleb128 0x13
 2827 005c 00       		.byte	0
 2828 005d 00       		.byte	0
 2829 005e 09       		.uleb128 0x9
 2830 005f 13       		.uleb128 0x13
 2831 0060 01       		.byte	0x1
 2832 0061 03       		.uleb128 0x3
 2833 0062 0E       		.uleb128 0xe
 2834 0063 0B       		.uleb128 0xb
 2835 0064 0B       		.uleb128 0xb
 2836 0065 3A       		.uleb128 0x3a
 2837 0066 0B       		.uleb128 0xb
 2838 0067 3B       		.uleb128 0x3b
 2839 0068 0B       		.uleb128 0xb
 2840 0069 01       		.uleb128 0x1
 2841 006a 13       		.uleb128 0x13
 2842 006b 00       		.byte	0
 2843 006c 00       		.byte	0
 2844 006d 0A       		.uleb128 0xa
 2845 006e 0D       		.uleb128 0xd
 2846 006f 00       		.byte	0
 2847 0070 03       		.uleb128 0x3
 2848 0071 0E       		.uleb128 0xe
 2849 0072 3A       		.uleb128 0x3a
 2850 0073 0B       		.uleb128 0xb
 2851 0074 3B       		.uleb128 0x3b
 2852 0075 0B       		.uleb128 0xb
 2853 0076 49       		.uleb128 0x49
 2854 0077 13       		.uleb128 0x13
 2855 0078 38       		.uleb128 0x38
 2856 0079 0B       		.uleb128 0xb
 2857 007a 00       		.byte	0
 2858 007b 00       		.byte	0
 2859 007c 0B       		.uleb128 0xb
 2860 007d 04       		.uleb128 0x4
 2861 007e 01       		.byte	0x1
 2862 007f 03       		.uleb128 0x3
 2863 0080 0E       		.uleb128 0xe
 2864 0081 0B       		.uleb128 0xb
 2865 0082 0B       		.uleb128 0xb
 2866 0083 3A       		.uleb128 0x3a
 2867 0084 0B       		.uleb128 0xb
 2868 0085 3B       		.uleb128 0x3b
 2869 0086 0B       		.uleb128 0xb
 2870 0087 01       		.uleb128 0x1
 2871 0088 13       		.uleb128 0x13
 2872 0089 00       		.byte	0
 2873 008a 00       		.byte	0
 2874 008b 0C       		.uleb128 0xc
 2875 008c 28       		.uleb128 0x28
 2876 008d 00       		.byte	0
 2877 008e 03       		.uleb128 0x3
 2878 008f 0E       		.uleb128 0xe
 2879 0090 1C       		.uleb128 0x1c
 2880 0091 0D       		.uleb128 0xd
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 65


 2881 0092 00       		.byte	0
 2882 0093 00       		.byte	0
 2883 0094 0D       		.uleb128 0xd
 2884 0095 2E       		.uleb128 0x2e
 2885 0096 00       		.byte	0
 2886 0097 3F       		.uleb128 0x3f
 2887 0098 19       		.uleb128 0x19
 2888 0099 03       		.uleb128 0x3
 2889 009a 0E       		.uleb128 0xe
 2890 009b 3A       		.uleb128 0x3a
 2891 009c 0B       		.uleb128 0xb
 2892 009d 3B       		.uleb128 0x3b
 2893 009e 0B       		.uleb128 0xb
 2894 009f 27       		.uleb128 0x27
 2895 00a0 19       		.uleb128 0x19
 2896 00a1 11       		.uleb128 0x11
 2897 00a2 01       		.uleb128 0x1
 2898 00a3 12       		.uleb128 0x12
 2899 00a4 06       		.uleb128 0x6
 2900 00a5 40       		.uleb128 0x40
 2901 00a6 18       		.uleb128 0x18
 2902 00a7 9642     		.uleb128 0x2116
 2903 00a9 19       		.uleb128 0x19
 2904 00aa 00       		.byte	0
 2905 00ab 00       		.byte	0
 2906 00ac 0E       		.uleb128 0xe
 2907 00ad 2E       		.uleb128 0x2e
 2908 00ae 00       		.byte	0
 2909 00af 3F       		.uleb128 0x3f
 2910 00b0 19       		.uleb128 0x19
 2911 00b1 03       		.uleb128 0x3
 2912 00b2 0E       		.uleb128 0xe
 2913 00b3 3A       		.uleb128 0x3a
 2914 00b4 0B       		.uleb128 0xb
 2915 00b5 3B       		.uleb128 0x3b
 2916 00b6 0B       		.uleb128 0xb
 2917 00b7 27       		.uleb128 0x27
 2918 00b8 19       		.uleb128 0x19
 2919 00b9 11       		.uleb128 0x11
 2920 00ba 01       		.uleb128 0x1
 2921 00bb 12       		.uleb128 0x12
 2922 00bc 06       		.uleb128 0x6
 2923 00bd 40       		.uleb128 0x40
 2924 00be 18       		.uleb128 0x18
 2925 00bf 9742     		.uleb128 0x2117
 2926 00c1 19       		.uleb128 0x19
 2927 00c2 00       		.byte	0
 2928 00c3 00       		.byte	0
 2929 00c4 0F       		.uleb128 0xf
 2930 00c5 2E       		.uleb128 0x2e
 2931 00c6 01       		.byte	0x1
 2932 00c7 3F       		.uleb128 0x3f
 2933 00c8 19       		.uleb128 0x19
 2934 00c9 03       		.uleb128 0x3
 2935 00ca 0E       		.uleb128 0xe
 2936 00cb 3A       		.uleb128 0x3a
 2937 00cc 0B       		.uleb128 0xb
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 66


 2938 00cd 3B       		.uleb128 0x3b
 2939 00ce 0B       		.uleb128 0xb
 2940 00cf 49       		.uleb128 0x49
 2941 00d0 13       		.uleb128 0x13
 2942 00d1 11       		.uleb128 0x11
 2943 00d2 01       		.uleb128 0x1
 2944 00d3 12       		.uleb128 0x12
 2945 00d4 06       		.uleb128 0x6
 2946 00d5 40       		.uleb128 0x40
 2947 00d6 18       		.uleb128 0x18
 2948 00d7 9642     		.uleb128 0x2116
 2949 00d9 19       		.uleb128 0x19
 2950 00da 01       		.uleb128 0x1
 2951 00db 13       		.uleb128 0x13
 2952 00dc 00       		.byte	0
 2953 00dd 00       		.byte	0
 2954 00de 10       		.uleb128 0x10
 2955 00df 34       		.uleb128 0x34
 2956 00e0 00       		.byte	0
 2957 00e1 03       		.uleb128 0x3
 2958 00e2 0E       		.uleb128 0xe
 2959 00e3 3A       		.uleb128 0x3a
 2960 00e4 0B       		.uleb128 0xb
 2961 00e5 3B       		.uleb128 0x3b
 2962 00e6 0B       		.uleb128 0xb
 2963 00e7 49       		.uleb128 0x49
 2964 00e8 13       		.uleb128 0x13
 2965 00e9 02       		.uleb128 0x2
 2966 00ea 18       		.uleb128 0x18
 2967 00eb 00       		.byte	0
 2968 00ec 00       		.byte	0
 2969 00ed 11       		.uleb128 0x11
 2970 00ee 34       		.uleb128 0x34
 2971 00ef 00       		.byte	0
 2972 00f0 03       		.uleb128 0x3
 2973 00f1 0E       		.uleb128 0xe
 2974 00f2 3A       		.uleb128 0x3a
 2975 00f3 0B       		.uleb128 0xb
 2976 00f4 3B       		.uleb128 0x3b
 2977 00f5 0B       		.uleb128 0xb
 2978 00f6 49       		.uleb128 0x49
 2979 00f7 13       		.uleb128 0x13
 2980 00f8 00       		.byte	0
 2981 00f9 00       		.byte	0
 2982 00fa 12       		.uleb128 0x12
 2983 00fb 0B       		.uleb128 0xb
 2984 00fc 01       		.byte	0x1
 2985 00fd 11       		.uleb128 0x11
 2986 00fe 01       		.uleb128 0x1
 2987 00ff 12       		.uleb128 0x12
 2988 0100 06       		.uleb128 0x6
 2989 0101 00       		.byte	0
 2990 0102 00       		.byte	0
 2991 0103 13       		.uleb128 0x13
 2992 0104 2E       		.uleb128 0x2e
 2993 0105 01       		.byte	0x1
 2994 0106 3F       		.uleb128 0x3f
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 67


 2995 0107 19       		.uleb128 0x19
 2996 0108 03       		.uleb128 0x3
 2997 0109 0E       		.uleb128 0xe
 2998 010a 3A       		.uleb128 0x3a
 2999 010b 0B       		.uleb128 0xb
 3000 010c 3B       		.uleb128 0x3b
 3001 010d 05       		.uleb128 0x5
 3002 010e 27       		.uleb128 0x27
 3003 010f 19       		.uleb128 0x19
 3004 0110 11       		.uleb128 0x11
 3005 0111 01       		.uleb128 0x1
 3006 0112 12       		.uleb128 0x12
 3007 0113 06       		.uleb128 0x6
 3008 0114 40       		.uleb128 0x40
 3009 0115 18       		.uleb128 0x18
 3010 0116 9642     		.uleb128 0x2116
 3011 0118 19       		.uleb128 0x19
 3012 0119 01       		.uleb128 0x1
 3013 011a 13       		.uleb128 0x13
 3014 011b 00       		.byte	0
 3015 011c 00       		.byte	0
 3016 011d 14       		.uleb128 0x14
 3017 011e 05       		.uleb128 0x5
 3018 011f 00       		.byte	0
 3019 0120 03       		.uleb128 0x3
 3020 0121 0E       		.uleb128 0xe
 3021 0122 3A       		.uleb128 0x3a
 3022 0123 0B       		.uleb128 0xb
 3023 0124 3B       		.uleb128 0x3b
 3024 0125 05       		.uleb128 0x5
 3025 0126 49       		.uleb128 0x49
 3026 0127 13       		.uleb128 0x13
 3027 0128 02       		.uleb128 0x2
 3028 0129 18       		.uleb128 0x18
 3029 012a 00       		.byte	0
 3030 012b 00       		.byte	0
 3031 012c 15       		.uleb128 0x15
 3032 012d 34       		.uleb128 0x34
 3033 012e 00       		.byte	0
 3034 012f 03       		.uleb128 0x3
 3035 0130 08       		.uleb128 0x8
 3036 0131 3A       		.uleb128 0x3a
 3037 0132 0B       		.uleb128 0xb
 3038 0133 3B       		.uleb128 0x3b
 3039 0134 05       		.uleb128 0x5
 3040 0135 49       		.uleb128 0x49
 3041 0136 13       		.uleb128 0x13
 3042 0137 02       		.uleb128 0x2
 3043 0138 18       		.uleb128 0x18
 3044 0139 00       		.byte	0
 3045 013a 00       		.byte	0
 3046 013b 16       		.uleb128 0x16
 3047 013c 34       		.uleb128 0x34
 3048 013d 00       		.byte	0
 3049 013e 03       		.uleb128 0x3
 3050 013f 0E       		.uleb128 0xe
 3051 0140 3A       		.uleb128 0x3a
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 68


 3052 0141 0B       		.uleb128 0xb
 3053 0142 3B       		.uleb128 0x3b
 3054 0143 05       		.uleb128 0x5
 3055 0144 49       		.uleb128 0x49
 3056 0145 13       		.uleb128 0x13
 3057 0146 02       		.uleb128 0x2
 3058 0147 18       		.uleb128 0x18
 3059 0148 00       		.byte	0
 3060 0149 00       		.byte	0
 3061 014a 17       		.uleb128 0x17
 3062 014b 2E       		.uleb128 0x2e
 3063 014c 01       		.byte	0x1
 3064 014d 3F       		.uleb128 0x3f
 3065 014e 19       		.uleb128 0x19
 3066 014f 03       		.uleb128 0x3
 3067 0150 0E       		.uleb128 0xe
 3068 0151 3A       		.uleb128 0x3a
 3069 0152 0B       		.uleb128 0xb
 3070 0153 3B       		.uleb128 0x3b
 3071 0154 05       		.uleb128 0x5
 3072 0155 27       		.uleb128 0x27
 3073 0156 19       		.uleb128 0x19
 3074 0157 49       		.uleb128 0x49
 3075 0158 13       		.uleb128 0x13
 3076 0159 11       		.uleb128 0x11
 3077 015a 01       		.uleb128 0x1
 3078 015b 12       		.uleb128 0x12
 3079 015c 06       		.uleb128 0x6
 3080 015d 40       		.uleb128 0x40
 3081 015e 18       		.uleb128 0x18
 3082 015f 9642     		.uleb128 0x2116
 3083 0161 19       		.uleb128 0x19
 3084 0162 01       		.uleb128 0x1
 3085 0163 13       		.uleb128 0x13
 3086 0164 00       		.byte	0
 3087 0165 00       		.byte	0
 3088 0166 18       		.uleb128 0x18
 3089 0167 05       		.uleb128 0x5
 3090 0168 00       		.byte	0
 3091 0169 03       		.uleb128 0x3
 3092 016a 08       		.uleb128 0x8
 3093 016b 3A       		.uleb128 0x3a
 3094 016c 0B       		.uleb128 0xb
 3095 016d 3B       		.uleb128 0x3b
 3096 016e 05       		.uleb128 0x5
 3097 016f 49       		.uleb128 0x49
 3098 0170 13       		.uleb128 0x13
 3099 0171 02       		.uleb128 0x2
 3100 0172 18       		.uleb128 0x18
 3101 0173 00       		.byte	0
 3102 0174 00       		.byte	0
 3103 0175 19       		.uleb128 0x19
 3104 0176 2E       		.uleb128 0x2e
 3105 0177 01       		.byte	0x1
 3106 0178 3F       		.uleb128 0x3f
 3107 0179 19       		.uleb128 0x19
 3108 017a 03       		.uleb128 0x3
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 69


 3109 017b 0E       		.uleb128 0xe
 3110 017c 3A       		.uleb128 0x3a
 3111 017d 0B       		.uleb128 0xb
 3112 017e 3B       		.uleb128 0x3b
 3113 017f 05       		.uleb128 0x5
 3114 0180 11       		.uleb128 0x11
 3115 0181 01       		.uleb128 0x1
 3116 0182 12       		.uleb128 0x12
 3117 0183 06       		.uleb128 0x6
 3118 0184 40       		.uleb128 0x40
 3119 0185 18       		.uleb128 0x18
 3120 0186 9642     		.uleb128 0x2116
 3121 0188 19       		.uleb128 0x19
 3122 0189 01       		.uleb128 0x1
 3123 018a 13       		.uleb128 0x13
 3124 018b 00       		.byte	0
 3125 018c 00       		.byte	0
 3126 018d 1A       		.uleb128 0x1a
 3127 018e 2E       		.uleb128 0x2e
 3128 018f 00       		.byte	0
 3129 0190 3F       		.uleb128 0x3f
 3130 0191 19       		.uleb128 0x19
 3131 0192 03       		.uleb128 0x3
 3132 0193 0E       		.uleb128 0xe
 3133 0194 3A       		.uleb128 0x3a
 3134 0195 0B       		.uleb128 0xb
 3135 0196 3B       		.uleb128 0x3b
 3136 0197 05       		.uleb128 0x5
 3137 0198 11       		.uleb128 0x11
 3138 0199 01       		.uleb128 0x1
 3139 019a 12       		.uleb128 0x12
 3140 019b 06       		.uleb128 0x6
 3141 019c 40       		.uleb128 0x40
 3142 019d 18       		.uleb128 0x18
 3143 019e 9642     		.uleb128 0x2116
 3144 01a0 19       		.uleb128 0x19
 3145 01a1 00       		.byte	0
 3146 01a2 00       		.byte	0
 3147 01a3 1B       		.uleb128 0x1b
 3148 01a4 2E       		.uleb128 0x2e
 3149 01a5 01       		.byte	0x1
 3150 01a6 3F       		.uleb128 0x3f
 3151 01a7 19       		.uleb128 0x19
 3152 01a8 03       		.uleb128 0x3
 3153 01a9 0E       		.uleb128 0xe
 3154 01aa 3A       		.uleb128 0x3a
 3155 01ab 0B       		.uleb128 0xb
 3156 01ac 3B       		.uleb128 0x3b
 3157 01ad 05       		.uleb128 0x5
 3158 01ae 27       		.uleb128 0x27
 3159 01af 19       		.uleb128 0x19
 3160 01b0 11       		.uleb128 0x11
 3161 01b1 01       		.uleb128 0x1
 3162 01b2 12       		.uleb128 0x12
 3163 01b3 06       		.uleb128 0x6
 3164 01b4 40       		.uleb128 0x40
 3165 01b5 18       		.uleb128 0x18
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 70


 3166 01b6 9742     		.uleb128 0x2117
 3167 01b8 19       		.uleb128 0x19
 3168 01b9 01       		.uleb128 0x1
 3169 01ba 13       		.uleb128 0x13
 3170 01bb 00       		.byte	0
 3171 01bc 00       		.byte	0
 3172 01bd 1C       		.uleb128 0x1c
 3173 01be 34       		.uleb128 0x34
 3174 01bf 00       		.byte	0
 3175 01c0 03       		.uleb128 0x3
 3176 01c1 0E       		.uleb128 0xe
 3177 01c2 3A       		.uleb128 0x3a
 3178 01c3 0B       		.uleb128 0xb
 3179 01c4 3B       		.uleb128 0x3b
 3180 01c5 05       		.uleb128 0x5
 3181 01c6 49       		.uleb128 0x49
 3182 01c7 13       		.uleb128 0x13
 3183 01c8 3F       		.uleb128 0x3f
 3184 01c9 19       		.uleb128 0x19
 3185 01ca 3C       		.uleb128 0x3c
 3186 01cb 19       		.uleb128 0x19
 3187 01cc 00       		.byte	0
 3188 01cd 00       		.byte	0
 3189 01ce 1D       		.uleb128 0x1d
 3190 01cf 35       		.uleb128 0x35
 3191 01d0 00       		.byte	0
 3192 01d1 49       		.uleb128 0x49
 3193 01d2 13       		.uleb128 0x13
 3194 01d3 00       		.byte	0
 3195 01d4 00       		.byte	0
 3196 01d5 1E       		.uleb128 0x1e
 3197 01d6 34       		.uleb128 0x34
 3198 01d7 00       		.byte	0
 3199 01d8 03       		.uleb128 0x3
 3200 01d9 08       		.uleb128 0x8
 3201 01da 3A       		.uleb128 0x3a
 3202 01db 0B       		.uleb128 0xb
 3203 01dc 3B       		.uleb128 0x3b
 3204 01dd 0B       		.uleb128 0xb
 3205 01de 49       		.uleb128 0x49
 3206 01df 13       		.uleb128 0x13
 3207 01e0 3F       		.uleb128 0x3f
 3208 01e1 19       		.uleb128 0x19
 3209 01e2 02       		.uleb128 0x2
 3210 01e3 18       		.uleb128 0x18
 3211 01e4 00       		.byte	0
 3212 01e5 00       		.byte	0
 3213 01e6 1F       		.uleb128 0x1f
 3214 01e7 34       		.uleb128 0x34
 3215 01e8 00       		.byte	0
 3216 01e9 03       		.uleb128 0x3
 3217 01ea 0E       		.uleb128 0xe
 3218 01eb 3A       		.uleb128 0x3a
 3219 01ec 0B       		.uleb128 0xb
 3220 01ed 3B       		.uleb128 0x3b
 3221 01ee 0B       		.uleb128 0xb
 3222 01ef 49       		.uleb128 0x49
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 71


 3223 01f0 13       		.uleb128 0x13
 3224 01f1 3F       		.uleb128 0x3f
 3225 01f2 19       		.uleb128 0x19
 3226 01f3 02       		.uleb128 0x2
 3227 01f4 18       		.uleb128 0x18
 3228 01f5 00       		.byte	0
 3229 01f6 00       		.byte	0
 3230 01f7 00       		.byte	0
 3231              		.section	.debug_aranges,"",%progbits
 3232 0000 9C000000 		.4byte	0x9c
 3233 0004 0200     		.2byte	0x2
 3234 0006 00000000 		.4byte	.Ldebug_info0
 3235 000a 04       		.byte	0x4
 3236 000b 00       		.byte	0
 3237 000c 0000     		.2byte	0
 3238 000e 0000     		.2byte	0
 3239 0010 00000000 		.4byte	.LFB63
 3240 0014 30000000 		.4byte	.LFE63-.LFB63
 3241 0018 00000000 		.4byte	.LFB64
 3242 001c 18000000 		.4byte	.LFE64-.LFB64
 3243 0020 00000000 		.4byte	.LFB65
 3244 0024 40010000 		.4byte	.LFE65-.LFB65
 3245 0028 00000000 		.4byte	.LFB66
 3246 002c 00020000 		.4byte	.LFE66-.LFB66
 3247 0030 00000000 		.4byte	.LFB67
 3248 0034 CC000000 		.4byte	.LFE67-.LFB67
 3249 0038 00000000 		.4byte	.LFB68
 3250 003c 98000000 		.4byte	.LFE68-.LFB68
 3251 0040 00000000 		.4byte	.LFB69
 3252 0044 24000000 		.4byte	.LFE69-.LFB69
 3253 0048 00000000 		.4byte	.LFB70
 3254 004c B4000000 		.4byte	.LFE70-.LFB70
 3255 0050 00000000 		.4byte	.LFB71
 3256 0054 2A000000 		.4byte	.LFE71-.LFB71
 3257 0058 00000000 		.4byte	.LFB72
 3258 005c 2A000000 		.4byte	.LFE72-.LFB72
 3259 0060 00000000 		.4byte	.LFB73
 3260 0064 52000000 		.4byte	.LFE73-.LFB73
 3261 0068 00000000 		.4byte	.LFB74
 3262 006c 2C000000 		.4byte	.LFE74-.LFB74
 3263 0070 00000000 		.4byte	.LFB75
 3264 0074 40000000 		.4byte	.LFE75-.LFB75
 3265 0078 00000000 		.4byte	.LFB76
 3266 007c 40000000 		.4byte	.LFE76-.LFB76
 3267 0080 00000000 		.4byte	.LFB77
 3268 0084 8C000000 		.4byte	.LFE77-.LFB77
 3269 0088 00000000 		.4byte	.LFB78
 3270 008c 8C000000 		.4byte	.LFE78-.LFB78
 3271 0090 00000000 		.4byte	.LFB79
 3272 0094 14000000 		.4byte	.LFE79-.LFB79
 3273 0098 00000000 		.4byte	0
 3274 009c 00000000 		.4byte	0
 3275              		.section	.debug_ranges,"",%progbits
 3276              	.Ldebug_ranges0:
 3277 0000 00000000 		.4byte	.LFB63
 3278 0004 30000000 		.4byte	.LFE63
 3279 0008 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 72


 3280 000c 18000000 		.4byte	.LFE64
 3281 0010 00000000 		.4byte	.LFB65
 3282 0014 40010000 		.4byte	.LFE65
 3283 0018 00000000 		.4byte	.LFB66
 3284 001c 00020000 		.4byte	.LFE66
 3285 0020 00000000 		.4byte	.LFB67
 3286 0024 CC000000 		.4byte	.LFE67
 3287 0028 00000000 		.4byte	.LFB68
 3288 002c 98000000 		.4byte	.LFE68
 3289 0030 00000000 		.4byte	.LFB69
 3290 0034 24000000 		.4byte	.LFE69
 3291 0038 00000000 		.4byte	.LFB70
 3292 003c B4000000 		.4byte	.LFE70
 3293 0040 00000000 		.4byte	.LFB71
 3294 0044 2A000000 		.4byte	.LFE71
 3295 0048 00000000 		.4byte	.LFB72
 3296 004c 2A000000 		.4byte	.LFE72
 3297 0050 00000000 		.4byte	.LFB73
 3298 0054 52000000 		.4byte	.LFE73
 3299 0058 00000000 		.4byte	.LFB74
 3300 005c 2C000000 		.4byte	.LFE74
 3301 0060 00000000 		.4byte	.LFB75
 3302 0064 40000000 		.4byte	.LFE75
 3303 0068 00000000 		.4byte	.LFB76
 3304 006c 40000000 		.4byte	.LFE76
 3305 0070 00000000 		.4byte	.LFB77
 3306 0074 8C000000 		.4byte	.LFE77
 3307 0078 00000000 		.4byte	.LFB78
 3308 007c 8C000000 		.4byte	.LFE78
 3309 0080 00000000 		.4byte	.LFB79
 3310 0084 14000000 		.4byte	.LFE79
 3311 0088 00000000 		.4byte	0
 3312 008c 00000000 		.4byte	0
 3313              		.section	.debug_line,"",%progbits
 3314              	.Ldebug_line0:
 3315 0000 90030000 		.section	.debug_str,"MS",%progbits,1
 3315      02005501 
 3315      00000201 
 3315      FB0E0D00 
 3315      01010101 
 3316              	.LASF70:
 3317 0000 72656164 		.ascii	"reading\000"
 3317      696E6700 
 3318              	.LASF75:
 3319 0008 636F7272 		.ascii	"correctSpeed\000"
 3319      65637453 
 3319      70656564 
 3319      00
 3320              	.LASF45:
 3321 0015 50415353 		.ascii	"PASS\000"
 3321      00
 3322              	.LASF65:
 3323 001a 64656772 		.ascii	"degrees\000"
 3323      65657300 
 3324              	.LASF72:
 3325 0022 616D6F75 		.ascii	"amount\000"
 3325      6E7400
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 73


 3326              	.LASF46:
 3327 0029 726F626F 		.ascii	"robot_state\000"
 3327      745F7374 
 3327      61746500 
 3328              	.LASF112:
 3329 0035 73616D70 		.ascii	"sample_count\000"
 3329      6C655F63 
 3329      6F756E74 
 3329      00
 3330              	.LASF8:
 3331 0042 756E7369 		.ascii	"unsigned int\000"
 3331      676E6564 
 3331      20696E74 
 3331      00
 3332              	.LASF78:
 3333 004f 64657369 		.ascii	"desired_count\000"
 3333      7265645F 
 3333      636F756E 
 3333      7400
 3334              	.LASF11:
 3335 005d 5F5F696E 		.ascii	"__int32_t\000"
 3335      7433325F 
 3335      7400
 3336              	.LASF16:
 3337 0067 696E7431 		.ascii	"int16\000"
 3337      3600
 3338              	.LASF108:
 3339 006d 73797374 		.ascii	"system_state\000"
 3339      656D5F73 
 3339      74617465 
 3339      00
 3340              	.LASF74:
 3341 007a 6368616E 		.ascii	"changeRightWheelSpeed\000"
 3341      67655269 
 3341      67687457 
 3341      6865656C 
 3341      53706565 
 3342              	.LASF33:
 3343 0090 67325F78 		.ascii	"g2_xpos\000"
 3343      706F7300 
 3344              	.LASF81:
 3345 0098 636F7272 		.ascii	"correction\000"
 3345      65637469 
 3345      6F6E00
 3346              	.LASF67:
 3347 00a3 64697374 		.ascii	"distance_turned\000"
 3347      616E6365 
 3347      5F747572 
 3347      6E656400 
 3348              	.LASF87:
 3349 00b3 73686172 		.ascii	"sharpTurnLeft\000"
 3349      70547572 
 3349      6E4C6566 
 3349      7400
 3350              	.LASF103:
 3351 00c1 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3351      5F72665F 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 74


 3351      7472616E 
 3351      736D6973 
 3351      73696F6E 
 3352              	.LASF40:
 3353 00dd 4D454449 		.ascii	"MEDIUM_RIGHT\000"
 3353      554D5F52 
 3353      49474854 
 3353      00
 3354              	.LASF89:
 3355 00ea 75736250 		.ascii	"usbPutString\000"
 3355      75745374 
 3355      72696E67 
 3355      00
 3356              	.LASF53:
 3357 00f7 64697265 		.ascii	"directions\000"
 3357      6374696F 
 3357      6E7300
 3358              	.LASF36:
 3359 0102 67325F64 		.ascii	"g2_direction\000"
 3359      69726563 
 3359      74696F6E 
 3359      00
 3360              	.LASF18:
 3361 010f 666C6F61 		.ascii	"float\000"
 3361      7400
 3362              	.LASF82:
 3363 0115 73657457 		.ascii	"setWheelDirection\000"
 3363      6865656C 
 3363      44697265 
 3363      6374696F 
 3363      6E00
 3364              	.LASF17:
 3365 0127 696E7433 		.ascii	"int32\000"
 3365      3200
 3366              	.LASF77:
 3367 012d 636F756E 		.ascii	"count\000"
 3367      7400
 3368              	.LASF21:
 3369 0133 696E6465 		.ascii	"index\000"
 3369      7800
 3370              	.LASF109:
 3371 0139 73656E73 		.ascii	"sensor_readings\000"
 3371      6F725F72 
 3371      65616469 
 3371      6E677300 
 3372              	.LASF85:
 3373 0149 7475726E 		.ascii	"turnLeft\000"
 3373      4C656674 
 3373      00
 3374              	.LASF37:
 3375 0152 434F5252 		.ascii	"CORRECT\000"
 3375      45435400 
 3376              	.LASF7:
 3377 015a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3377      206C6F6E 
 3377      6720756E 
 3377      7369676E 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 75


 3377      65642069 
 3378              	.LASF100:
 3379 0171 666C6167 		.ascii	"flag_packet\000"
 3379      5F706163 
 3379      6B657400 
 3380              	.LASF121:
 3381 017d 75706461 		.ascii	"updateSensorValues\000"
 3381      74655365 
 3381      6E736F72 
 3381      56616C75 
 3381      657300
 3382              	.LASF38:
 3383 0190 534C4947 		.ascii	"SLIGHTLY_RIGHT\000"
 3383      48544C59 
 3383      5F524947 
 3383      485400
 3384              	.LASF96:
 3385 019f 666C6167 		.ascii	"flag_ts_update\000"
 3385      5F74735F 
 3385      75706461 
 3385      746500
 3386              	.LASF95:
 3387 01ae 666C6167 		.ascii	"flag_ts_enc\000"
 3387      5F74735F 
 3387      656E6300 
 3388              	.LASF111:
 3389 01ba 6164635F 		.ascii	"adc_readings\000"
 3389      72656164 
 3389      696E6773 
 3389      00
 3390              	.LASF93:
 3391 01c7 74735F73 		.ascii	"ts_speed\000"
 3391      70656564 
 3391      00
 3392              	.LASF50:
 3393 01d0 6C656674 		.ascii	"left_wheel_count\000"
 3393      5F776865 
 3393      656C5F63 
 3393      6F756E74 
 3393      00
 3394              	.LASF23:
 3395 01e1 726F626F 		.ascii	"robot_ypos\000"
 3395      745F7970 
 3395      6F7300
 3396              	.LASF94:
 3397 01ec 74735F64 		.ascii	"ts_display\000"
 3397      6973706C 
 3397      617900
 3398              	.LASF10:
 3399 01f7 63686172 		.ascii	"char\000"
 3399      00
 3400              	.LASF107:
 3401 01fc 75736242 		.ascii	"usbBuffer\000"
 3401      75666665 
 3401      7200
 3402              	.LASF27:
 3403 0206 67305F73 		.ascii	"g0_speed\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 76


 3403      70656564 
 3403      00
 3404              	.LASF14:
 3405 020f 75696E74 		.ascii	"uint16\000"
 3405      313600
 3406              	.LASF15:
 3407 0216 696E7438 		.ascii	"int8\000"
 3407      00
 3408              	.LASF32:
 3409 021b 67315F64 		.ascii	"g1_direction\000"
 3409      69726563 
 3409      74696F6E 
 3409      00
 3410              	.LASF110:
 3411 0228 6164635F 		.ascii	"adc_flag\000"
 3411      666C6167 
 3411      00
 3412              	.LASF58:
 3413 0231 64657369 		.ascii	"desired_distance\000"
 3413      7265645F 
 3413      64697374 
 3413      616E6365 
 3413      00
 3414              	.LASF63:
 3415 0242 6D325F64 		.ascii	"m2_dist\000"
 3415      69737400 
 3416              	.LASF84:
 3417 024a 72696768 		.ascii	"rightIsForward\000"
 3417      74497346 
 3417      6F727761 
 3417      726400
 3418              	.LASF6:
 3419 0259 6C6F6E67 		.ascii	"long long int\000"
 3419      206C6F6E 
 3419      6720696E 
 3419      7400
 3420              	.LASF52:
 3421 0267 70726576 		.ascii	"prev_state\000"
 3421      5F737461 
 3421      746500
 3422              	.LASF29:
 3423 0272 67315F78 		.ascii	"g1_xpos\000"
 3423      706F7300 
 3424              	.LASF66:
 3425 027a 64697374 		.ascii	"distance_to_turn\000"
 3425      616E6365 
 3425      5F746F5F 
 3425      7475726E 
 3425      00
 3426              	.LASF116:
 3427 028b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3427      4320342E 
 3427      392E3320 
 3427      32303135 
 3427      30333033 
 3428 02be 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3428      20726576 
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 77


 3428      6973696F 
 3428      6E203232 
 3428      31323230 
 3429 02f1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3429      66756E63 
 3429      74696F6E 
 3429      2D736563 
 3429      74696F6E 
 3430              	.LASF35:
 3431 0319 67325F73 		.ascii	"g2_speed\000"
 3431      70656564 
 3431      00
 3432              	.LASF26:
 3433 0322 67305F79 		.ascii	"g0_ypos\000"
 3433      706F7300 
 3434              	.LASF88:
 3435 032a 73686172 		.ascii	"sharpTurnRight\000"
 3435      70547572 
 3435      6E526967 
 3435      687400
 3436              	.LASF39:
 3437 0339 534C4947 		.ascii	"SLIGHTLY_LEFT\000"
 3437      48544C59 
 3437      5F4C4546 
 3437      5400
 3438              	.LASF73:
 3439 0347 6E65775F 		.ascii	"new_value\000"
 3439      76616C75 
 3439      6500
 3440              	.LASF119:
 3441 0351 64617461 		.ascii	"data_main\000"
 3441      5F6D6169 
 3441      6E00
 3442              	.LASF69:
 3443 035b 67657456 		.ascii	"getValForChannel\000"
 3443      616C466F 
 3443      72436861 
 3443      6E6E656C 
 3443      00
 3444              	.LASF20:
 3445 036c 72737369 		.ascii	"rssi\000"
 3445      00
 3446              	.LASF28:
 3447 0371 67305F64 		.ascii	"g0_direction\000"
 3447      69726563 
 3447      74696F6E 
 3447      00
 3448              	.LASF55:
 3449 037e 6E756D5F 		.ascii	"num_coords\000"
 3449      636F6F72 
 3449      647300
 3450              	.LASF60:
 3451 0389 70726576 		.ascii	"prevCountM1\000"
 3451      436F756E 
 3451      744D3100 
 3452              	.LASF61:
 3453 0395 70726576 		.ascii	"prevCountM2\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 78


 3453      436F756E 
 3453      744D3200 
 3454              	.LASF97:
 3455 03a1 666C6167 		.ascii	"flag_ts_speed\000"
 3455      5F74735F 
 3455      73706565 
 3455      6400
 3456              	.LASF102:
 3457 03af 64617461 		.ascii	"dataready_flag\000"
 3457      72656164 
 3457      795F666C 
 3457      616700
 3458              	.LASF99:
 3459 03be 666C6167 		.ascii	"flag_rx\000"
 3459      5F727800 
 3460              	.LASF2:
 3461 03c6 73686F72 		.ascii	"short int\000"
 3461      7420696E 
 3461      7400
 3462              	.LASF113:
 3463 03d0 636F756E 		.ascii	"countM1\000"
 3463      744D3100 
 3464              	.LASF114:
 3465 03d8 636F756E 		.ascii	"countM2\000"
 3465      744D3200 
 3466              	.LASF64:
 3467 03e0 7475726E 		.ascii	"turnForDegrees\000"
 3467      466F7244 
 3467      65677265 
 3467      657300
 3468              	.LASF4:
 3469 03ef 6C6F6E67 		.ascii	"long int\000"
 3469      20696E74 
 3469      00
 3470              	.LASF90:
 3471 03f8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3471      52784275 
 3471      66666572 
 3471      00
 3472              	.LASF92:
 3473 0405 74735F75 		.ascii	"ts_update\000"
 3473      70646174 
 3473      6500
 3474              	.LASF59:
 3475 040f 64697374 		.ascii	"distance\000"
 3475      616E6365 
 3475      00
 3476              	.LASF34:
 3477 0418 67325F79 		.ascii	"g2_ypos\000"
 3477      706F7300 
 3478              	.LASF49:
 3479 0420 72696768 		.ascii	"right_wheel_count\000"
 3479      745F7768 
 3479      65656C5F 
 3479      636F756E 
 3479      7400
 3480              	.LASF118:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 79


 3481 0432 5C5C6669 		.ascii	"\\\\files.auckland.ac.nz\\myhome\\Desktop\\Flik\\CS"
 3481      6C65732E 
 3481      6175636B 
 3481      6C616E64 
 3481      2E61632E 
 3482 045f 3330315F 		.ascii	"301_Class.cyprj.Archive01-20190825T234813Z-001\\CS3"
 3482      436C6173 
 3482      732E6379 
 3482      70726A2E 
 3482      41726368 
 3483 0491 30315F43 		.ascii	"01_Class.cyprj.Archive01\\CS301_Class.cydsn\000"
 3483      6C617373 
 3483      2E637970 
 3483      726A2E41 
 3483      72636869 
 3484              	.LASF41:
 3485 04bc 4D454449 		.ascii	"MEDIUM_LEFT\000"
 3485      554D5F4C 
 3485      45465400 
 3486              	.LASF86:
 3487 04c8 7475726E 		.ascii	"turnRight\000"
 3487      52696768 
 3487      7400
 3488              	.LASF47:
 3489 04d2 454E434F 		.ascii	"ENCODER_ISR\000"
 3489      4445525F 
 3489      49535200 
 3490              	.LASF30:
 3491 04de 67315F79 		.ascii	"g1_ypos\000"
 3491      706F7300 
 3492              	.LASF43:
 3493 04e6 5455524E 		.ascii	"TURN_LEFT\000"
 3493      5F4C4546 
 3493      5400
 3494              	.LASF68:
 3495 04f0 67657444 		.ascii	"getDistance\000"
 3495      69737461 
 3495      6E636500 
 3496              	.LASF9:
 3497 04fc 73697A65 		.ascii	"sizetype\000"
 3497      74797065 
 3497      00
 3498              	.LASF80:
 3499 0505 64696666 		.ascii	"diff_count\000"
 3499      5F636F75 
 3499      6E7400
 3500              	.LASF5:
 3501 0510 6C6F6E67 		.ascii	"long unsigned int\000"
 3501      20756E73 
 3501      69676E65 
 3501      6420696E 
 3501      7400
 3502              	.LASF76:
 3503 0522 70726576 		.ascii	"prevCount\000"
 3503      436F756E 
 3503      7400
 3504              	.LASF51:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 80


 3505 052c 706F6C6C 		.ascii	"polling_count\000"
 3505      696E675F 
 3505      636F756E 
 3505      7400
 3506              	.LASF12:
 3507 053a 696E7433 		.ascii	"int32_t\000"
 3507      325F7400 
 3508              	.LASF22:
 3509 0542 726F626F 		.ascii	"robot_xpos\000"
 3509      745F7870 
 3509      6F7300
 3510              	.LASF106:
 3511 054d 656E7472 		.ascii	"entry\000"
 3511      7900
 3512              	.LASF83:
 3513 0553 6C656674 		.ascii	"leftIsForward\000"
 3513      4973466F 
 3513      72776172 
 3513      6400
 3514              	.LASF1:
 3515 0561 756E7369 		.ascii	"unsigned char\000"
 3515      676E6564 
 3515      20636861 
 3515      7200
 3516              	.LASF62:
 3517 056f 6D315F64 		.ascii	"m1_dist\000"
 3517      69737400 
 3518              	.LASF105:
 3519 0577 6C696E65 		.ascii	"line\000"
 3519      00
 3520              	.LASF71:
 3521 057c 6368616E 		.ascii	"changeLeftWheelSpeed\000"
 3521      67654C65 
 3521      66745768 
 3521      65656C53 
 3521      70656564 
 3522              	.LASF115:
 3523 0591 74696D65 		.ascii	"timer_flag\000"
 3523      725F666C 
 3523      616700
 3524              	.LASF54:
 3525 059c 64697265 		.ascii	"direction_index\000"
 3525      6374696F 
 3525      6E5F696E 
 3525      64657800 
 3526              	.LASF91:
 3527 05ac 74735F65 		.ascii	"ts_enc\000"
 3527      6E6300
 3528              	.LASF44:
 3529 05b3 534C4F57 		.ascii	"SLOW\000"
 3529      00
 3530              	.LASF98:
 3531 05b8 666C6167 		.ascii	"flag_ts_display\000"
 3531      5F74735F 
 3531      64697370 
 3531      6C617900 
 3532              	.LASF120:
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 81


 3533 05c8 73746174 		.ascii	"state\000"
 3533      6500
 3534              	.LASF48:
 3535 05ce 4144435F 		.ascii	"ADC_ISR\000"
 3535      49535200 
 3536              	.LASF104:
 3537 05d6 64697370 		.ascii	"displaystring\000"
 3537      6C617973 
 3537      7472696E 
 3537      6700
 3538              	.LASF0:
 3539 05e4 7369676E 		.ascii	"signed char\000"
 3539      65642063 
 3539      68617200 
 3540              	.LASF3:
 3541 05f0 73686F72 		.ascii	"short unsigned int\000"
 3541      7420756E 
 3541      7369676E 
 3541      65642069 
 3541      6E7400
 3542              	.LASF79:
 3543 0603 69734C65 		.ascii	"isLeftWheel\000"
 3543      66745768 
 3543      65656C00 
 3544              	.LASF42:
 3545 060f 5455524E 		.ascii	"TURN_RIGHT\000"
 3545      5F524947 
 3545      485400
 3546              	.LASF24:
 3547 061a 726F626F 		.ascii	"robot_orientation\000"
 3547      745F6F72 
 3547      69656E74 
 3547      6174696F 
 3547      6E00
 3548              	.LASF56:
 3549 062c 6D61696E 		.ascii	"main\000"
 3549      00
 3550              	.LASF13:
 3551 0631 75696E74 		.ascii	"uint8\000"
 3551      3800
 3552              	.LASF19:
 3553 0637 646F7562 		.ascii	"double\000"
 3553      6C6500
 3554              	.LASF57:
 3555 063e 676F5374 		.ascii	"goStraight\000"
 3555      72616967 
 3555      687400
 3556              	.LASF25:
 3557 0649 67305F78 		.ascii	"g0_xpos\000"
 3557      706F7300 
 3558              	.LASF101:
 3559 0651 666C6167 		.ascii	"flag_KB_string\000"
 3559      5F4B425F 
 3559      73747269 
 3559      6E6700
 3560              	.LASF31:
 3561 0660 67315F73 		.ascii	"g1_speed\000"
ARM GAS  C:\Users\keva419\AppData\Local\Temp\cctfOfZG.s 			page 82


 3561      70656564 
 3561      00
 3562              	.LASF117:
 3563 0669 2E5C6D61 		.ascii	".\\main.c\000"
 3563      696E2E63 
 3563      00
 3564              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
